<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CodingDGSun&#39;s Blog</title>
  
  
  <link href="https://codingdgsun.github.io/atom.xml" rel="self"/>
  
  <link href="https://codingdgsun.github.io/"/>
  <updated>2022-01-17T06:03:46.537Z</updated>
  <id>https://codingdgsun.github.io/</id>
  
  <author>
    <name>CodingDGSun</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React项目build失败之MiniCssExtractPlugin</title>
    <link href="https://codingdgsun.github.io/2022/01/17/React%E9%A1%B9%E7%9B%AEbuild%E5%A4%B1%E8%B4%A5%E4%B9%8BMiniCssExtractPlugin/"/>
    <id>https://codingdgsun.github.io/2022/01/17/React%E9%A1%B9%E7%9B%AEbuild%E5%A4%B1%E8%B4%A5%E4%B9%8BMiniCssExtractPlugin/</id>
    <published>2022-01-17T06:03:09.000Z</published>
    <updated>2022-01-17T06:03:46.537Z</updated>
    
    <content type="html"><![CDATA[<h4 id="React项目build失败之MiniCssExtractPlugin"><a href="#React项目build失败之MiniCssExtractPlugin" class="headerlink" title="React项目build失败之MiniCssExtractPlugin"></a>React项目build失败之MiniCssExtractPlugin</h4><p>React项目，最新依赖<code>&quot;mini-css-extract-plugin&quot;: &quot;^2.5.0&quot;</code>会导致项目<code>npm run build</code>失败：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">node_modules/react-scripts/config/webpack.config.js:664</span><br><span class="line">        new MiniCssExtractPlugin(&#123;</span><br><span class="line">        ^</span><br><span class="line"></span><br><span class="line">TypeError: MiniCssExtractPlugin is not a constructor</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/91-01.6y6wul7xxx40.webp" alt="91-01"></p><p><strong>解决方案</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D --save-exact mini-css-extract-plugin@2.4.5</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/91-02.rpjz9zuahv4.webp" alt="91-02"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;React项目build失败之MiniCssExtractPlugin&quot;&gt;&lt;a href=&quot;#React项目build失败之MiniCssExtractPlugin&quot; class=&quot;headerlink&quot; title=&quot;React项目build失败之MiniCss</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>React项目构建常用命令</title>
    <link href="https://codingdgsun.github.io/2022/01/17/React%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://codingdgsun.github.io/2022/01/17/React%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2022-01-17T06:02:00.000Z</published>
    <updated>2022-01-17T06:02:35.780Z</updated>
    
    <content type="html"><![CDATA[<h4 id="React项目构建常用命令"><a href="#React项目构建常用命令" class="headerlink" title="React项目构建常用命令"></a>React项目构建常用命令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//方法一：</span><br><span class="line">npm install -g create-react-app//安装create-react-app</span><br><span class="line">create-react-app hello-world-react//创建项目，项目名称不要有大写字母</span><br><span class="line">npm run start 或者 npm start //进入项目目录后，启动项目</span><br><span class="line">//方法二：</span><br><span class="line">cnpm i yarn -g //提高安装react项目速度</span><br><span class="line">npx create-react-app my-react //创建项目，项目名称不要有大写字母</span><br><span class="line">npm run start 或者 npm start //进入项目目录后，启动项目</span><br></pre></td></tr></table></figure><p><strong>注意</strong>:启动项目后可能出现如下报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">TypeError: MiniCssExtractPlugin is not a constructor</span><br><span class="line"></span><br><span class="line">package.json里面：</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;mini-css-extract-plugin&quot;: &quot;2.4.5&quot;</span><br><span class="line">  &#125;</span><br><span class="line">导致</span><br></pre></td></tr></table></figure><p>解决方案：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D --save-exact mini-css-extract-plugin@2.4.5</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;React项目构建常用命令&quot;&gt;&lt;a href=&quot;#React项目构建常用命令&quot; class=&quot;headerlink&quot; title=&quot;React项目构建常用命令&quot;&gt;&lt;/a&gt;React项目构建常用命令&lt;/h4&gt;&lt;figure class=&quot;highlight plai</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Mac OS初始化一个React项目</title>
    <link href="https://codingdgsun.github.io/2022/01/17/Mac-OS%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%80%E4%B8%AAReact%E9%A1%B9%E7%9B%AE/"/>
    <id>https://codingdgsun.github.io/2022/01/17/Mac-OS%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%80%E4%B8%AAReact%E9%A1%B9%E7%9B%AE/</id>
    <published>2022-01-17T05:58:26.000Z</published>
    <updated>2022-01-17T06:01:34.926Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Mac-OS上，初始化一个React项目"><a href="#Mac-OS上，初始化一个React项目" class="headerlink" title="Mac OS上，初始化一个React项目"></a>Mac OS上，初始化一个React项目</h4><blockquote><p>初始化项目</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><blockquote><p>创建目录</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在项目根目录下，创建src源代码目录和dist产品目录</span><br></pre></td></tr></table></figure><blockquote><p>创建首页文件</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在src目录下创建index.html和index.js文件</span><br></pre></td></tr></table></figure><blockquote><p>安装webpack</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">cnpm i webpack -D</span><br><span class="line"></span><br><span class="line">package.json内容如下：</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;react&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;keywords&quot;: [],</span><br><span class="line">  &quot;author&quot;: &quot;&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;webpack&quot;: &quot;^5.66.0&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>安装webpack-cli</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">cnpm i webpack-cli -D</span><br><span class="line"></span><br><span class="line">package.json内容如下：</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;react&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;keywords&quot;: [],</span><br><span class="line">  &quot;author&quot;: &quot;&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;webpack&quot;: &quot;^5.66.0&quot;,</span><br><span class="line">    &quot;webpack-cli&quot;: &quot;^4.9.1&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>设置环境变量</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;export PATH=&quot;./node_modules/.bin:$PATH&quot;&#x27; &gt;&gt; ~/.zshrc</span><br><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure><blockquote><p>新建webpack配置文件</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">在项目根目录下新建：webpack.config.js</span><br><span class="line"></span><br><span class="line">内容如下：</span><br><span class="line">//向外暴露一个打包的配置对象；因为webpack是基于Node构建的，所以，webpack支持所有Node Api和语法</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    mode : &#x27;development&#x27; //&#x27;development&#x27; or &#x27;production&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：webpack4.x提供了约定大于配置的概念，目的是为了尽量减少配置文件的体积</p><ul><li>打包入口：<code>src</code> -&gt; <code>index.js</code></li><li>打包的输出文件是<code>dist</code> -&gt; <code>main.js</code></li><li>4.x中新增了<code>mode</code>选项，可选的值为：<code>development</code> 和 <code>production</code></li></ul><blockquote><p>执行打包</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack</span><br></pre></td></tr></table></figure><blockquote><p>显示网页</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">index.html内容如下：</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Index 首页&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;../dist/main.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    这是首页</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><p>安装webpack-dev-server</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm i webpack-dev-server -D</span><br></pre></td></tr></table></figure><blockquote><p>在package.json中新增</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&quot;dev&quot;:&quot;webpack-dev-server&quot;</span><br><span class="line"></span><br><span class="line">内容如下：</span><br><span class="line"> &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,</span><br><span class="line">    &quot;dev&quot;:&quot;webpack-dev-server&quot;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><blockquote><p>修改index.html里面的js路径</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- &lt;script src=&quot;../dist/main.js&quot;&gt;&lt;/script&gt; --&gt;</span><br><span class="line">&lt;script src=&quot;/main.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">```    </span><br><span class="line"></span><br><span class="line">&gt; 运行</span><br></pre></td></tr></table></figure><p>npm run dev</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**注意**：此时在浏览器输入：`http://localhost:8080/`有可能出现`cannot get`，解决方案：</span><br></pre></td></tr></table></figure><p>npx webpack server –static src</p><pre><code></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Mac-OS上，初始化一个React项目&quot;&gt;&lt;a href=&quot;#Mac-OS上，初始化一个React项目&quot; class=&quot;headerlink&quot; title=&quot;Mac OS上，初始化一个React项目&quot;&gt;&lt;/a&gt;Mac OS上，初始化一个React项目&lt;/h4&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MySQL语法入门（二）</title>
    <link href="https://codingdgsun.github.io/2022/01/17/MySQL%E8%AF%AD%E6%B3%95%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://codingdgsun.github.io/2022/01/17/MySQL%E8%AF%AD%E6%B3%95%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%8C%EF%BC%89/</id>
    <published>2022-01-17T05:55:01.000Z</published>
    <updated>2022-01-17T05:55:28.008Z</updated>
    
    <content type="html"><![CDATA[<h4 id="MySQL语法入门（二）"><a href="#MySQL语法入门（二）" class="headerlink" title="MySQL语法入门（二）"></a>MySQL语法入门（二）</h4><blockquote><p>数据库加密函数</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT MD5(&#x27;hello&#x27;);-- 5d41402abc4b2a76b9719d911017c592</span><br><span class="line">SELECT MD5(&#x27;HELLO&#x27;);-- eb61eead90e3b899c6bcbe27ac581660</span><br><span class="line">SELECT AES_ENCRYPT(&#x27;hello&#x27;, &#x27;key&#x27;);</span><br><span class="line">SELECT AES_DECRYPT(AES_ENCRYPT(&#x27;hello&#x27;, &#x27;key&#x27;), &#x27;key&#x27;);-- hello</span><br><span class="line">SELECT SHA(&#x27;hello&#x27;);-- aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d</span><br></pre></td></tr></table></figure><blockquote><p>控制流函数</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">SELECT IF(1 &gt; 2, 3, 4);-- 4</span><br><span class="line">SELECT IFNULL(1, 2);-- 1；第一个参数为空返回第二个参数，反之，返回第一个参数</span><br><span class="line">SELECT IFNULL(NULL, 2);-- 2</span><br><span class="line">SELECT NULLIF(1, 1);-- null；第一个参数和第二个参数相等，返回null，反之，返回第一个参数</span><br><span class="line">SELECT NULLIF(1, 2);-- 1;</span><br><span class="line">SELECT </span><br><span class="line">    CASE</span><br><span class="line">        WHEN 1 THEN 2</span><br><span class="line">        ELSE 3</span><br><span class="line">    END;-- 2</span><br><span class="line">SELECT </span><br><span class="line">    CASE</span><br><span class="line">        WHEN 0 THEN 4</span><br><span class="line">        ELSE 5</span><br><span class="line">    END;-- 5</span><br><span class="line">SELECT </span><br><span class="line">    CASE</span><br><span class="line">        WHEN 0 THEN 1</span><br><span class="line">        WHEN 1 THEN 2</span><br><span class="line">        ELSE 3</span><br><span class="line">    END;-- 2</span><br><span class="line">        </span><br><span class="line">SELECT </span><br><span class="line">    CASE</span><br><span class="line">        WHEN 0 THEN 1</span><br><span class="line">        WHEN 0 THEN 2</span><br><span class="line">        ELSE 3</span><br><span class="line">    END;-- 3   </span><br><span class="line">    </span><br><span class="line">SELECT </span><br><span class="line">    CASE &#x27;cat&#x27;</span><br><span class="line">        WHEN &#x27;cat&#x27; THEN 1</span><br><span class="line">        WHEN &#x27;dog&#x27; THEN 2</span><br><span class="line">        ELSE 3</span><br><span class="line">    END;-- 1     </span><br><span class="line">```    </span><br><span class="line"></span><br><span class="line">&gt; 格式化函数和类型转换函数</span><br></pre></td></tr></table></figure><p>SELECT DATE_FORMAT(NOW(), ‘%W %D %M %Y %r’);– Tuesday 14th January 2025 01:38:27 PM<br>SELECT TIME_FORMAT(‘25:11:44’, ‘%h:%i %p’);– 01:11 AM<br>SELECT INET_ATON(‘192.168.1.11’);– 3232235787；IP地址转成数字<br>SELECT INET_NTOA(3232235787);– 192.168.1.11；数字转成IP地址</p><p>SELECT 2 + ‘23’;– 25<br>SELECT 3 + CAST(‘11’ AS SIGNED);– 14<br>SELECT ‘f’ = BINARY ‘F’;– 0<br>SELECT ‘f’ = ‘F’;– 1<br>SELECT ‘f’ = CAST(‘F’ AS BINARY);– 0<br>SELECT ‘f’ = CAST(‘F’ AS CHAR);– 1<br>SELECT CONVERT( ‘14’ , SIGNED);– 14<br>SELECT CONVERT( ‘abc’ USING UTF8);– abc</p><pre><code></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;MySQL语法入门（二）&quot;&gt;&lt;a href=&quot;#MySQL语法入门（二）&quot; class=&quot;headerlink&quot; title=&quot;MySQL语法入门（二）&quot;&gt;&lt;/a&gt;MySQL语法入门（二）&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;数据库加密函数&lt;/p&gt;
&lt;/blo</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java中常见面试题二（简单）</title>
    <link href="https://codingdgsun.github.io/2022/01/17/Java%E4%B8%AD%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E4%BA%8C%EF%BC%88%E7%AE%80%E5%8D%95%EF%BC%89/"/>
    <id>https://codingdgsun.github.io/2022/01/17/Java%E4%B8%AD%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E4%BA%8C%EF%BC%88%E7%AE%80%E5%8D%95%EF%BC%89/</id>
    <published>2022-01-17T05:54:02.000Z</published>
    <updated>2022-01-17T05:54:33.841Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Java中常见面试题二（简单）"><a href="#Java中常见面试题二（简单）" class="headerlink" title="Java中常见面试题二（简单）"></a>Java中常见面试题二（简单）</h4><blockquote><p>HashMap和Hashtable的区别？</p></blockquote><ul><li><strong>线程是否安全</strong>： HashMap 是非线程安全的，Hashtable 是线程安全的,因为 Hashtable 内部的方法基本都经过synchronized 修饰。（如果你要保证线程安全的话就使用 ConcurrentHashMap 吧！）</li><li><strong>效率</strong>：因为Hashtable加了synchronized锁。所以HashMap 要比 Hashtable 效率高一点。另外，Hashtable 基本被淘汰，不要在代码中使用它</li><li><strong>对 Null key 和 Null value 的支持</strong>： HashMap 可以存储 null 的 key 和 value，但 null 作为键只能有一个，null 作为值可以有多个；Hashtable 不允许有 null 键和 null 值，否则会抛出 NullPointerException。</li><li><strong>初始容量大小和每次扩充容量大小的不同</strong> ：① 创建时如果不指定容量初始值，Hashtable 默认的初始大小为 11，之后每次扩充，容量变为原来的 2n+1。HashMap 默认的初始化大小为 16。之后每次扩充，容量变为原来的 2 倍。② 创建时如果给定了容量初始值，那么 Hashtable 会直接使用你给定的大小，而 HashMap 会将其扩充为 2 的幂次方大小。也就是说 HashMap 总是使用 2 的幂作为哈希表的大小。</li><li><strong>底层数据结构</strong>： JDK1.8 以后的 HashMap 在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为 8）（将链表转换成红黑树前会判断，如果当前数组的长度小于 64，那么会选择先进行数组扩容，而不是转换为红黑树）时，将链表转化为红黑树，以减少搜索时间。Hashtable 没有这样的机制。</li></ul><blockquote><p>Spring事务的理解？</p></blockquote><p>Spring支持编程式事务管理以及声明式事务管理两种方式</p><ul><li><p>编程式事务管理<br>  编程式事务管理是侵入性事务管理，使用TransactionTemplate或者直接使用PlatformTransactionManager，对于编程式事务管理，Spring推荐使用TransactionTemplate。</p></li><li><p>声明式事务管理<br>  声明式事务管理建立在AOP之上，其本质是对方法前后进行拦截，然后在目标方法开始之前创建或者加入一个事务，执行完目标方法之后根据执行的情况提交或者回滚。</p></li></ul><blockquote><p>Java中会存在内存泄漏吗，请简单描述</p></blockquote><ul><li><p>所谓内存泄露就是指一个不再被程序使用的对象或变量一直被占据在内存中。Java中有垃圾回收机制，它可以保证一对象不再被引用的时候，即对象变成了孤儿的时候，对象将自动被垃圾回收器从内存中清除掉。由于Java使用有向图的方式进行垃圾回收管理，可 以消除引用循环的问题,</p></li><li><p>例如有两个对象，相互引用，只要它们和根进程不可达的，那么GC也是可以回收它们的，例如下面的代码可以看到这种情况的内存回收。</p></li><li><p>Java中的内存泄露的情况:长生命周期的对象持有短生命周期对象的引用就很可能发生内存泄露，尽管短生命周期对象已经不再需要，但是因为长生命周期对象持有它的引用而导致不能被回收，这就是Java中内存泄露的发生场景，通俗地说，就是程序员可能创建了一个对象，以后一直不再使用这个对象，这个对象却一直被引用，即这个对象无用但是却无法被垃圾回收器回收的，这就是java中可能出现内存泄露的情况，例如，缓存系统，我们加载了一个对象放在缓存中(例如放在一个全局map对象中),然后一直不再使用它，这个对象一直被缓存引用，但却不再被使用。</p></li><li><p>检查Java中的内存泄露，一定要让程序将各种分支情况都完整执行到程序结束，然后看某个对象是否被使用过，如果没有，则才能判定这个对象属于内存泄露。</p></li><li><p>如果一个外部类的实例对象的方法返回了一个内部类的实例对象，这个内部类对象被长期引用了，即使那个外部类实例对象不再被使用，但由于内部类持久外部类的实例对象，这个外部类对象将不会被垃圾回收，这也会造成内存泄露。</p></li></ul><blockquote><p>GC是什么?为什么要有GC?</p></blockquote><p>GC是垃圾收集的意思(GabageCollection)，内存处理是编程人员容易出现问题的地方，忘记或者错误的内存回收会导致程序或系统的不稳定甚至崩溃，Java提供的GC功能可以自动监测对象是否超过作用域从而达到自动回收内存的目的，Java 语言没有提供释放已分配内存的显示操作方法。</p><blockquote><p>简述Java垃圾回收机制</p></blockquote><p>在Java中，程序员是不需要显示的去释放一个对象的内存的，而是由虚拟机自行执行。在JVM中，有一个垃圾回收线程，它是低优先级的，在正常情况下是不会执行的，只有在虚拟机空闲或者当前堆内存不足时，才会触发执行，扫面那些没有被任何引用的对象，并将它们添加到要回收的集合中，进行回收。</p><blockquote><p>垃圾回收的优点和原理。并考虑2种回收机制</p></blockquote><ul><li><p>Java语言中一个显著的特点就是引入了垃圾回收机制，使C++程序员最头疼的内存管理的问题迎刃而解，它使得Java程序员在编写程序的时候不再需要考虑内存管理。</p></li><li><p>由于有个垃圾回收机制，Java 中的对象不再有“作用域”的概念，只有对象的引用才有”作用域”。垃圾回收可以有效的防止内存泄露，有效的使用可以使用的内存。</p></li><li><p>垃圾回收器通常是作为一个单独的低级别的线程运行，不可预知的情况下对内存堆中已经死亡的或者长时间没有使用的对象进行清楚和回收，程序员不能实时的调用垃圾回收器对某个对象或所有对象进行垃圾回收。</p></li><li><p>回收机制有<strong>分代复制垃圾回收</strong>、<strong>标记垃圾回收</strong>、<strong>增量垃圾回收</strong>。</p></li></ul><blockquote><p>深拷贝和浅拷贝是什么？</p></blockquote><ul><li><p>简单来讲就是复制、克隆。</p></li><li><p>浅拷贝就是对对象中的数据成员进行简单赋值，如果存在动态成员或者指针就会报错。而且，如果有引用类型的变量，新生成的对象和被拷贝的对象的这个属性会指向同一个地方，没有解耦，会影响对方，两个对象会拥有一样的值（穿一条裤子）。对基本数据类型来说，两边是独立的。</p></li><li><p>深拷贝就是对对象中存在的动态成员或指针重新开辟内存空间。而且，如果有引用类型的变量，新生成的对象和被拷贝的对象的这个属性会指向两个地方，解耦了，不会影响对方，两个对象分别做修改的话，不会影响到对方。</p></li></ul><blockquote><p>什么是分布式垃圾回收(DGC)?它是如何工作的?</p></blockquote><ul><li><p>DGC叫做分布式垃圾回收。</p></li><li><p>RMI使用DGC来做自动垃圾回收。因为 RMI包含了跨虚拟机的远程对象的引用，垃圾回收是很困难的。DGC使用引用计数算法来给远程对象提供自动内存管理。</p></li></ul><blockquote><p>简述Java内存分配与回收策率以及Minor GC和Major GC</p></blockquote><ul><li>对象优先在堆的Eden区分配</li><li>大对象直接进入老年代</li><li>长期存活的对象将直接进入老年代</li><li>当Eden区没有足够的空间进行分配时，虚拟机会执行一次Minor GC。</li><li>Minor GC通常发生在新生代的Eden区，在这个区的对象生存期短，往往发生Gc的频率较高，回收速度比较快;</li><li>Full GC/Major GC发生在老年代，一般情况下，触发老年代GC的时候不会触发Minor GC,但是通过配置，可以在Full GC之前进行一次Minor GC这样可以加快老年代的回收速度。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Java中常见面试题二（简单）&quot;&gt;&lt;a href=&quot;#Java中常见面试题二（简单）&quot; class=&quot;headerlink&quot; title=&quot;Java中常见面试题二（简单）&quot;&gt;&lt;/a&gt;Java中常见面试题二（简单）&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;HashM</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java中常见面试题一（困难）</title>
    <link href="https://codingdgsun.github.io/2022/01/07/Java%E4%B8%AD%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B8%80%EF%BC%88%E5%9B%B0%E9%9A%BE%EF%BC%89/"/>
    <id>https://codingdgsun.github.io/2022/01/07/Java%E4%B8%AD%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B8%80%EF%BC%88%E5%9B%B0%E9%9A%BE%EF%BC%89/</id>
    <published>2022-01-07T15:36:33.000Z</published>
    <updated>2022-01-07T15:37:00.667Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Java中常见面试题一（困难）"><a href="#Java中常见面试题一（困难）" class="headerlink" title="Java中常见面试题一（困难）"></a>Java中常见面试题一（困难）</h4><blockquote><p>Redis的缓存击穿及解决方案</p></blockquote><ul><li>缓存击穿：<br><code>这个跟缓存雪崩有点像，但是又有一点不一样，缓存雪崩是因为大面积的缓存失效，数据库崩溃了,而缓存击穿不同的是缓存击穿是指存在一个热点数据Key，有请求不断来访问这个Key，这么多请求在同一段时间内访问这个热点数据，当这个 Key 失效时间到了的时候，持续的这么多请求直接怂到数据库上了，就在这个 Key 值上击穿了缓存。</code></li><li>解决方案：<br><code>设置热点数据永不过期或者加上互斥锁就搞定了。</code></li></ul><blockquote><p>索引的建立原则, 如何避免索引失效</p></blockquote><ul><li><p><strong>索引的建立原则</strong><br>索引的设计需要遵循一些已有的原则，这样便于提升索引的使用效率，更高效的使用索引。<br>(1)对查询频次较高，且数据量比较大的表，建立索引。<br>(2)索引字段的选择，最佳候选列应当从where子句的条件中提取，如果where子句中的组合比较多，那么应当挑选最常用，过滤效果最好的列的组合。<br>(3)如果where后有多个条件经常被用到，建议建立符合索引，复合索引需要遵循最左前缀法则，N个列组合而成的复合索引，相当于创建了N个索引。<br>复合索引命名规则index_表名_列名1_列名2_列明3<br>比如:createindexidx_seller_name_sta_addrontb_seller(name，status，address)<br>复合索引需要遵循最左前缀法则，N个列组合而成的复合索引，相当于创建了N个索引。最左前缀法则后面会详细介绍~<br>(4)使用唯一索引，区分度越高，使用索引的效率越高。<br>(5)索引并非越多越好，如果该表赠，删，改操作较多，慎重选择建立索引，过多索引会降低表维护效率。<br>(6)使用短索引，提高索引访问时的I/O效率，因此也相应提升了Mysql查询效率。<br>(7)多表连接的字段上需要建立索引，这样可以极大提高表连接的效率。<br>(8)排序字段上，因为排序效率低，添加索引能提高查询效率。</p></li><li><p><strong>如何避免索引失效</strong><br>(1)遵循最左前缀法则<br>如果在查询的时候，使用了复合索引，要遵循最左前缀法则，也就是查询从索引的最左列开始，并且不能跳过索引中的列。如果不包含最左边的索引列，则其他索引不生效;如果包含了最左边的索引列，但是跳过了一列直接索引了复合索引的第三列，则第三列的索引不生效。<br>(2)不要在索引上使用运算，否则索引也会失效。<br>(3)字符串不加引号，造成索引失效。<br>(4)尽量使用覆盖索引，避免select*，这样能提高查询效率。<br>(5)or关键字连接<br>用or分割开的条件，如果or前面的列有索引，or后面的列没有索引，那么查询的时候索引会失效，如果一定要用or查询，可以考虑下or连接的条件列都加索引，这样就不会失效了。<br>(6)like模糊查询<br>在使用like模糊查询时，如果like%也就是%加在后面索引不会失效，如果%lik或％like%也就是%加在前面，索引会失效。<br>如果查询的列占整张表的绝大多数，那么就会全表扫描，不会走索引。所以在查询的时候走不走索引不能百分百肯定。<br>也就是说如果查找一个稀有数据，如果建立了索引，就会走索引。如果查询的数据表达绝大多数都符合条件，就全表扫描，不走索引。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Java中常见面试题一（困难）&quot;&gt;&lt;a href=&quot;#Java中常见面试题一（困难）&quot; class=&quot;headerlink&quot; title=&quot;Java中常见面试题一（困难）&quot;&gt;&lt;/a&gt;Java中常见面试题一（困难）&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;Redis</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java中常见面试题一（中等）</title>
    <link href="https://codingdgsun.github.io/2022/01/07/Java%E4%B8%AD%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B8%80%EF%BC%88%E4%B8%AD%E7%AD%89%EF%BC%89/"/>
    <id>https://codingdgsun.github.io/2022/01/07/Java%E4%B8%AD%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B8%80%EF%BC%88%E4%B8%AD%E7%AD%89%EF%BC%89/</id>
    <published>2022-01-07T15:35:37.000Z</published>
    <updated>2022-01-07T15:36:11.941Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Java中常见面试题一（中等）"><a href="#Java中常见面试题一（中等）" class="headerlink" title="Java中常见面试题一（中等）"></a>Java中常见面试题一（中等）</h4><blockquote><p>SQL语句优化有哪些？数据库的优化怎样优化？</p></blockquote><ul><li>对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。</li><li>应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描。</li><li>应尽量避免在 where 子句中使用!=或&lt;&gt;操作符，否则引擎将放弃使用索引而进行全表扫描。</li></ul><blockquote><p>乐观锁和悲观锁的解释及其应用场景</p></blockquote><ul><li><p>**悲观锁(Pessimistic Lock)**，顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会block直到它拿到锁。传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁。</p></li><li><p>**乐观锁(Optimistic Lock)**，顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制。乐观锁适用于多读的应用类型，这样可以提高吞吐量，像数据库如果提供类似于write_condition机制的其实都是提供的乐观锁。</p></li><li><p><strong>使用场景</strong>：<br>两种锁各有优缺点，不可认为一种好于另一种，像乐观锁适用于写比较少的情况下，即冲突真的很少发生的时候，这样可以省去了锁的开销，加大了系统的整个吞吐量。但如果经常产生冲突，上层应用会不断的进行retry，这样反倒是降低了性能，所以这种情况下用悲观锁就比较合适。</p></li></ul><blockquote><p>过滤器和拦截器区别和项目中如何应用</p></blockquote><ul><li>过滤器：在目标资源之前进行的操作，过滤所有的内容，比如 action、servlet、jsp、html</li><li>拦截器：在目标资源之前进行的操作，不能拦截所有的内容，拦截 action，不能拦截 jsp，不能拦截 html</li><li>拦截器和过滤器之间有很多相同之处，但是两者之间存在根本的差别。其主要区别为以下几点：<br>(1）拦截器是基于 JAVA 反射机制的，而过滤器是基于函数回调的。<br>(2）拦截器不依赖于 Servlet 容器，而过滤器依赖于 Servlet 容器。<br>(3）拦截器只能对 Action 请求起作用，而过滤器可以对几乎所有的请求起作用。<br>(4）拦截器可以访问 Action 上下文、值栈里的对象，而过滤器不能。<br>(5）在 Action 的生命周期中，拦截器可以多次被调用，而过滤器只能在容器初始化时被调用一次。</li></ul><blockquote><p>GC回收机制的原理</p></blockquote><ul><li>用户Java程序运行过程中，Java虚拟机提供了另外一个系统级的线程，专门负责回收不再被使用的对象占用的内存，这一过程称为垃圾回收。</li><li>垃圾回收需要对堆内存中的对象进行标记，并对堆内存进行整理。这一过程的某些阶段需要暂时终止用户Java线程，等回收工作完成后再恢复执行。因此，频繁地触发虚拟机垃圾回收操作的行为会影响程序的运行效率。</li><li>那么什么情况下会频繁地出发垃圾回收操作呢，比如：堆内存设置过小，再比如：程序频繁地分配大型局部对象数组。</li></ul><blockquote><p>ConcurrentHashMap原理</p></blockquote><ul><li>JDK1.7(Segment数组结构和HashEntry数组结构)</li><li>JDK 1.7 ConcurrentHashMap是由Segment数组结构和HashEntry数组结构组成。 每个Segment都对应一个Hash表，且都有独立的锁，所以这样就可以每个线程访问一个Segment，就可以并行访问了，从而提高了效率。 这就是锁分段。<br>(1)首先将数据分为一段一段的存储,然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据时,其他段的数据也能被其他线程访问。<br>(2)Segment 实现了 ReentrantLock,所以 Segment 是一种可重入锁，扮演锁的角色。HashEntry 用于存储键值对数据。<br>(3)一个ConcurrentHashMap里面包含多个Segment数组。 Segment的结构和HashMap类似，是一种数组和链表结构。 一个Segment包含一个HashEntry数组，每个HashEntry是一个链表结构的元素。 每个Segment守护一个HashEntry数组里的元素，当对HashEntry数组的数据进行修改时,首先获得对应的Segment的锁。<br>(4)并行度(默认16)<br>concurrencyLevel：并行级别、并发数、Segment 数，怎么翻译不重要，理解它。 默认是 16，也就是说 ConcurrentHashMap有16个Segments,最多可以同时支持 16 个线程并发写。</li><li>JDK1.8(数组+链表+红黑树)<br>(1)ConcurrentHashMap取消了Segment分段锁，采用CAS和synchronized来保证并发安全。<br>(2)数据结构跟HashMap1。8的结构类似,数组+链表/红黑树。<br>(3)jdk1.8在链表长度超过一定阀值(8)时,将链表(寻址时间复杂度为O(N))转换为红黑树(寻址时间复杂度为O(log(N)))<br>(4)synchronized只锁定当前链表或红黑树的首节点，这样只要hash不冲突，就不会产生并发，效率又提升N倍。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Java中常见面试题一（中等）&quot;&gt;&lt;a href=&quot;#Java中常见面试题一（中等）&quot; class=&quot;headerlink&quot; title=&quot;Java中常见面试题一（中等）&quot;&gt;&lt;/a&gt;Java中常见面试题一（中等）&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;SQL语句</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java中常见面试题一（简单）</title>
    <link href="https://codingdgsun.github.io/2022/01/07/Java%E4%B8%AD%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B8%80%EF%BC%88%E7%AE%80%E5%8D%95%EF%BC%89/"/>
    <id>https://codingdgsun.github.io/2022/01/07/Java%E4%B8%AD%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B8%80%EF%BC%88%E7%AE%80%E5%8D%95%EF%BC%89/</id>
    <published>2022-01-07T15:34:13.000Z</published>
    <updated>2022-01-12T03:04:25.591Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Java中常见面试题一（简单）"><a href="#Java中常见面试题一（简单）" class="headerlink" title="Java中常见面试题一（简单）"></a>Java中常见面试题一（简单）</h4><blockquote><p>面向对象的特征有哪些方面? </p></blockquote><ul><li><p><strong>抽象</strong>：抽象就是忽略一个主题中与当前目标无关的那些方面，以便更充分地注意与当前目标有关的方面。抽象并不打算了解全部问题，而只是选择其中的一部分，暂时不用部分细节。抽象包括两个方面，一是过程抽象,二是数据抽象。</p></li><li><p><strong>继承</strong>：继承是一种联结类的层次模型，并且允许和鼓励类的重用，它提供了一种明确表述共性的方法。对象的一个新类可以从现有的类中派生，这个过程称为类继承。新类继承了原始类的特性，新类称为原始类的派生类（子类），而原始类称为新类的基类（父类）。派生类可以从它的基类那里继承方法和实例变量，并且类可以修改或增加新的方法使之更适合特殊的需要。</p></li><li><p><strong>封装</strong>：封装是把过程和数据包围起来，对数据的访问只能通过已定义的界面。面向对象计算始于这个基本概念，即现实世界可以被描绘成一系列完全自治、封装的对象,这些对象通过一个受保护的接口访问其他对象。</p></li><li><p><strong>多态性</strong>：多态性是指允许不同类的对象对同一消息作出响应。多态性包括参数化多态性和包含多态性。多态性语言具有灵活、抽象、行为共享、代码共享的优势，很好的解决了应用程序函数同名问题。</p></li></ul><blockquote><p>Enumeration接口和Iterator接口的区别有哪些？</p></blockquote><p><code>Enumeration速度是Iterator的2倍，同时占用更少的内存。但是，Iterator远远比Enumeration安全，因为其他线程不能够修改正在被iterator遍历的集合里面的对象。同时，Iterator允许调用者删除底层集合里面的元素，这对Enumeration来说是不可能的</code></p><blockquote><p>Collection和 Collections的区别</p></blockquote><ul><li>Collection是接口，Java的集合由其派生而来，其是根接口，其下包括子类和实现类</li><li>Collections针对集合类的一个工具类，Collections工具类提供了大量的方法实现对集合（set、list、map）的排序、修改、查询等操作</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Java中常见面试题一（简单）&quot;&gt;&lt;a href=&quot;#Java中常见面试题一（简单）&quot; class=&quot;headerlink&quot; title=&quot;Java中常见面试题一（简单）&quot;&gt;&lt;/a&gt;Java中常见面试题一（简单）&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;面向对象的</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MySQL语法入门（一）</title>
    <link href="https://codingdgsun.github.io/2022/01/06/MySQL%E8%AF%AD%E6%B3%95%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://codingdgsun.github.io/2022/01/06/MySQL%E8%AF%AD%E6%B3%95%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2022-01-06T08:51:05.000Z</published>
    <updated>2022-01-06T08:51:42.452Z</updated>
    
    <content type="html"><![CDATA[<h4 id="MySQL语法入门（一）"><a href="#MySQL语法入门（一）" class="headerlink" title="MySQL语法入门（一）"></a>MySQL语法入门（一）</h4><blockquote><p>基本运算符使用</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">SELECT 1 + 2;-- 3</span><br><span class="line">SELECT 1 / 0;-- null</span><br><span class="line">SELECT 1 + NULL;-- null</span><br><span class="line">SELECT &#x27;2&#x27; * &#x27;4&#x27;;-- 8</span><br><span class="line">SELECT &#x27;2f&#x27; + 3;-- 5</span><br><span class="line">SELECT 2.2 + 2;-- 4.2</span><br><span class="line"></span><br><span class="line">SELECT 1 = 2;-- 0</span><br><span class="line">SELECT 1 = 1;-- 1</span><br><span class="line">SELECT 1 = NULL;-- null</span><br><span class="line">SELECT 1 &lt;=&gt; NULL;-- 0</span><br><span class="line"></span><br><span class="line">SELECT &#x27;hello&#x27; = &#x27;HELLO&#x27;;-- 1</span><br><span class="line">SELECT &#x27;hello&#x27; = &#x27;  HELLO    &#x27;;-- 0</span><br><span class="line"></span><br><span class="line">SELECT BINARY &#x27;hello&#x27; = &#x27;HELLO&#x27;;-- 0</span><br><span class="line"></span><br><span class="line">SELECT &#x27;a&#x27; &gt; &#x27;b&#x27;;-- 0</span><br><span class="line">SELECT &#x27;b&#x27; &gt; &#x27;a&#x27;;-- 1</span><br><span class="line"></span><br><span class="line">SELECT &#x27;b&#x27; BETWEEN &#x27;a&#x27; AND &#x27;c&#x27;;-- 1</span><br><span class="line"></span><br><span class="line">SELECT &#x27;a&#x27; BETWEEN &#x27;a&#x27; AND &#x27;c&#x27;;-- 1</span><br><span class="line"></span><br><span class="line">SELECT &#x27;c&#x27; BETWEEN &#x27;a&#x27; AND &#x27;c&#x27;;-- 1 &gt;=  &lt;=</span><br><span class="line"></span><br><span class="line">SELECT NOT &#x27;b&#x27; BETWEEN &#x27;a&#x27; AND &#x27;c&#x27;;-- 0</span><br><span class="line"></span><br><span class="line">SELECT NOT &#x27;a&#x27; BETWEEN &#x27;a&#x27; AND &#x27;c&#x27;;-- 0</span><br><span class="line"></span><br><span class="line">SELECT NOT &#x27;c&#x27; BETWEEN &#x27;a&#x27; AND &#x27;c&#x27;;-- 0 &gt;=  &lt;=</span><br><span class="line"></span><br><span class="line">SELECT 3 IN (3 , 4, 5);-- 1</span><br><span class="line">SELECT 1 IN (3 , 4, 5);-- 0</span><br><span class="line"></span><br><span class="line">SELECT NULL IN (3 , 4, 5);-- null</span><br><span class="line"></span><br><span class="line">SELECT NULL IN (3 , 4, 5, NULL);-- null</span><br><span class="line"></span><br><span class="line">SELECT &#x27;hello&#x27; LIKE &#x27;he%&#x27;;-- 1</span><br><span class="line">SELECT &#x27;hel%&#x27; LIKE &#x27;hello&#x27;;-- 0</span><br><span class="line"></span><br><span class="line">SELECT 1 BETWEEN 1 AND 2;</span><br><span class="line"></span><br><span class="line">SELECT NOT 1;-- 0</span><br><span class="line">SELECT ! 1;-- 0</span><br><span class="line">SELECT (1 &gt; 2) AND (19 &gt; 10);-- 0</span><br><span class="line">SELECT (11 &gt; 2) &amp;&amp; (19 &gt; 10);-- 1</span><br><span class="line">SELECT (1 &gt; 2) OR (19 &gt; 10);-- 1</span><br><span class="line">SELECT (21 &gt; 2) || (19 &gt; 10);-- 1</span><br><span class="line">SELECT (1 &gt; 2) XOR (19 &gt; 10);-- 1</span><br><span class="line">SELECT (21 &gt; 2) XOR (19 &gt; 10);-- 0</span><br><span class="line"></span><br><span class="line">SELECT 1 | 2;-- 3;001 | 010 -&gt; 011</span><br><span class="line"></span><br><span class="line">SELECT 3 &gt;&gt; 1;-- 1; 11 &gt;&gt; 1 -&gt; 1</span><br><span class="line"></span><br><span class="line">SELECT 3 &lt;&lt; 1;-- 6; 11 &lt;&lt; 1 -&gt; 110</span><br><span class="line"></span><br><span class="line">SELECT 3 ^ 2;-- 1; 11 ^ 10 -&gt; 01</span><br></pre></td></tr></table></figure><blockquote><p>基本数学函数使用</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">SELECT ABS(- 5);-- 5</span><br><span class="line">SELECT ABS(- 5.8);-- 5.8</span><br><span class="line"></span><br><span class="line">SELECT CEIL(1.2);-- 2</span><br><span class="line">SELECT CEILING(1.2);-- 2</span><br><span class="line">SELECT CEIL(1.6);-- 2</span><br><span class="line">SELECT CEILING(1.6);-- 2</span><br><span class="line"></span><br><span class="line">SELECT CEIL(- 1.2);-- -1</span><br><span class="line">SELECT CEILING(- 1.2);-- -1</span><br><span class="line">SELECT CEIL(- 1.6);-- -1</span><br><span class="line">SELECT CEILING(- 1.6);-- -1</span><br><span class="line"></span><br><span class="line">SELECT FLOOR(1.2);-- 1</span><br><span class="line">SELECT FLOOR(- 1.2);-- -2</span><br><span class="line"></span><br><span class="line">SELECT GREATEST(1, 4, 6);-- 6</span><br><span class="line">SELECT LEAST(1, 3, 2);-- 1</span><br><span class="line"></span><br><span class="line">SELECT MOD(10, 6);-- 4</span><br><span class="line"></span><br><span class="line">SELECT PI();-- 3.141593</span><br><span class="line"></span><br><span class="line">SELECT RAND();-- 0.9857855839522421</span><br><span class="line"></span><br><span class="line">SELECT ROUND(22.3563, 2);-- 22.36</span><br><span class="line"></span><br><span class="line">SELECT TRUNCATE(12.4562, 2);-- 12.45</span><br><span class="line"></span><br><span class="line">SELECT SIGN(1);-- 1 正数</span><br><span class="line">SELECT SIGN(0);-- 0 0</span><br><span class="line">SELECT SIGN(- 1.3);-- -1 负数</span><br><span class="line"></span><br><span class="line">SELECT POWER(2, 4);-- 16 </span><br><span class="line">SELECT POW(2, 4);-- 16</span><br><span class="line">SELECT EXP(1);-- 2.718281828459045</span><br><span class="line">SELECT EXP(2);-- &#x27;7.38905609893065&#x27;</span><br><span class="line">SELECT SQRT(4);-- 2</span><br><span class="line">SELECT SQRT(5);-- 2.23606797749979</span><br><span class="line">SELECT BIN(10);-- 1010</span><br><span class="line">SELECT OCT(10);-- 12</span><br><span class="line">SELECT HEX(10);-- A</span><br><span class="line">SELECT OCT(10);-- 12</span><br><span class="line">SELECT OCT(10);-- 12</span><br></pre></td></tr></table></figure><blockquote><p>基本字符串函数使用</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">SELECT LENGTH(&#x27;hello&#x27;);-- 5</span><br><span class="line">SELECT LCASE(&#x27;helLO&#x27;);-- hello</span><br><span class="line">SELECT LOWER(&#x27;helLO&#x27;);-- hello</span><br><span class="line">SELECT UCASE(&#x27;hello&#x27;);-- HELLO</span><br><span class="line">SELECT UPPER(&#x27;hello&#x27;);-- HELLO</span><br><span class="line"></span><br><span class="line">SELECT STRCMP(&#x27;hello&#x27;, &#x27;yes&#x27;);-- -1</span><br><span class="line">SELECT STRCMP(&#x27;zworld&#x27;, &#x27;yes&#x27;);-- 1</span><br><span class="line"></span><br><span class="line">SELECT POSITION(&#x27;yes&#x27; IN &#x27;yesman&#x27;);-- 1</span><br><span class="line"></span><br><span class="line">SELECT REPLACE(&#x27;hello&#x27;, &#x27;l&#x27;, &#x27;a&#x27;);-- heaao</span><br><span class="line"></span><br><span class="line">SELECT INSERT(&#x27;hello world&#x27;, 2, 3, &#x27;bb&#x27;);-- hbbo world</span><br><span class="line">SELECT INSERT(&#x27;hello world&#x27;, 2, 1, &#x27;bb&#x27;);-- hbbllo world</span><br><span class="line"></span><br><span class="line">SELECT CONCAT(&#x27;hello&#x27;, &#x27;world&#x27;);-- helloworld</span><br><span class="line">SELECT CONCAT_WS(&#x27;@&#x27;, &#x27;hello&#x27;, &#x27;world&#x27;);-- hello@world</span><br><span class="line"></span><br><span class="line">SELECT LEFT(&#x27;hello&#x27;, 2);-- he</span><br><span class="line">SELECT RIGHT(&#x27;hello&#x27;, 2);-- lo</span><br><span class="line"></span><br><span class="line">SELECT LPAD(&#x27;hello&#x27;, 7, &#x27;a&#x27;);-- aahello 左边填充指定字符 长度 7 需大于原字符串长度</span><br><span class="line">SELECT RPAD(&#x27;hello&#x27;, 7, &#x27;b&#x27;);-- hellobb 右边填充指定字符 长度 7 需大于原字符串长度</span><br><span class="line"></span><br><span class="line">SELECT LTRIM(&#x27;   hello&#x27;);-- hello</span><br><span class="line">SELECT RTRIM(&#x27;hello    &#x27;);-- hello</span><br><span class="line">SELECT TRIM(&#x27;   hello   &#x27;);-- hello</span><br><span class="line"></span><br><span class="line">SELECT SUBSTRING(&#x27;hello&#x27;, 2, 3);-- ell</span><br><span class="line"></span><br><span class="line">SELECT ASCII(&#x27;0&#x27;);-- 48</span><br><span class="line">SELECT ASCII(&#x27;A&#x27;);-- 65</span><br><span class="line">SELECT ASCII(&#x27;a&#x27;);-- 97</span><br></pre></td></tr></table></figure><blockquote><p>基本日期时间函数使用</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">SELECT NOW();-- 2022-01-06 22:31:15</span><br><span class="line">SELECT CURTIME();-- 25:31:49</span><br><span class="line">SELECT CURDATE();-- 2022-01-06</span><br><span class="line">SELECT YEAR(20220106);-- 2022</span><br><span class="line">SELECT YEAR(&#x27;20220106&#x27;);-- 2022</span><br><span class="line">SELECT YEAR(&#x27;2022-01-06&#x27;);-- 2022</span><br><span class="line">SELECT YEAR(&#x27;2022/01/06&#x27;);-- 2022</span><br><span class="line">SELECT MONTH(&#x27;2022/01/06&#x27;);-- 1</span><br><span class="line">SELECT MONTHNAME(&#x27;2022/01/06&#x27;);-- January</span><br><span class="line">SELECT DAYOFYEAR(&#x27;2022/01/06&#x27;);-- 6</span><br><span class="line">SELECT DAYOFWEEK(&#x27;2022/01/06&#x27;);-- 5</span><br><span class="line">SELECT DAYNAME(&#x27;2022/01/06&#x27;);-- Thursday</span><br><span class="line">SELECT WEEK(&#x27;2022/01/06&#x27;);-- 1</span><br><span class="line">SELECT HOUR(&#x27;25:31:49&#x27;);-- 25</span><br><span class="line">SELECT MINUTE(&#x27;25:31:49&#x27;);-- 31</span><br><span class="line">SELECT SECOND(&#x27;25:31:49&#x27;);-- 49</span><br><span class="line">SELECT DATE_ADD(NOW(), INTERVAL 2 MONTH);-- 2022-03-06 22:40:55</span><br><span class="line">SELECT DATE_ADD(NOW(), INTERVAL 3 DAY);-- 2022-01-09 22:41:30</span><br><span class="line">SELECT DATE_SUB(NOW(), INTERVAL 3 YEAR);-- 2019-01-06 22:42:11</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;MySQL语法入门（一）&quot;&gt;&lt;a href=&quot;#MySQL语法入门（一）&quot; class=&quot;headerlink&quot; title=&quot;MySQL语法入门（一）&quot;&gt;&lt;/a&gt;MySQL语法入门（一）&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;基本运算符使用&lt;/p&gt;
&lt;/blo</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java中的桥接模式</title>
    <link href="https://codingdgsun.github.io/2021/12/31/Java%E4%B8%AD%E7%9A%84%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>https://codingdgsun.github.io/2021/12/31/Java%E4%B8%AD%E7%9A%84%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-12-31T05:58:55.000Z</published>
    <updated>2021-12-31T05:59:21.131Z</updated>
    
    <content type="html"><![CDATA[<h4 id="桥接模式简介"><a href="#桥接模式简介" class="headerlink" title="桥接模式简介"></a>桥接模式简介</h4><ul><li>桥接是用于把抽象化与实现化解耦，使得二者可以独立变化。这种类型的设计模式属于结构型模式，它通过提供抽象化和实现化之间的桥接结构，来实现二者的解耦。</li><li>这种模式涉及到一个作为桥接的接口，使得实体类的功能独立于接口实现类。这两种类型的类可被结构化改变而互不影响。</li></ul><h5 id="品牌接口Brand"><a href="#品牌接口Brand" class="headerlink" title="品牌接口Brand"></a>品牌接口Brand</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//产品品牌</span><br><span class="line">public interface Brand &#123;</span><br><span class="line">    void name();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="实现类品牌A和品牌B"><a href="#实现类品牌A和品牌B" class="headerlink" title="实现类品牌A和品牌B"></a>实现类品牌A和品牌B</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//A品牌</span><br><span class="line">public class ABrand implements Brand &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void name() &#123;</span><br><span class="line">        System.out.print(&quot;A品牌&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//B品牌</span><br><span class="line">public class BBrand implements Brand &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void name() &#123;</span><br><span class="line">        System.out.print(&quot;B品牌&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="抽象产品类Product"><a href="#抽象产品类Product" class="headerlink" title="抽象产品类Product"></a>抽象产品类Product</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//抽象产品类</span><br><span class="line">public abstract class Product &#123;</span><br><span class="line">    //带品牌，组合方式</span><br><span class="line">    private Brand brand;</span><br><span class="line"></span><br><span class="line">    public Product(Brand brand) &#123;</span><br><span class="line">        this.brand = brand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void name() &#123;</span><br><span class="line">        brand.name();//品牌名称</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="子类产品C和D"><a href="#子类产品C和D" class="headerlink" title="子类产品C和D"></a>子类产品C和D</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//C产品</span><br><span class="line">public class CProduct extends Product &#123;</span><br><span class="line">    public CProduct(Brand brand) &#123;</span><br><span class="line">        super(brand);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void name() &#123;</span><br><span class="line">        super.name();</span><br><span class="line">        System.out.println(&quot;C产品&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//D产品</span><br><span class="line">public class DProduct extends Product &#123;</span><br><span class="line">    public DProduct(Brand brand) &#123;</span><br><span class="line">        super(brand);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void name() &#123;</span><br><span class="line">        super.name();</span><br><span class="line">        System.out.println(&quot;D产品&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Brand brandA = new ABrand();//A品牌</span><br><span class="line">        Brand brandB = new BBrand();//B品牌</span><br><span class="line">        CProduct cProduct = new CProduct(brandA);//C产品，带A品牌，即A品牌的C产品</span><br><span class="line">        DProduct dProduct = new DProduct(brandB);//D产品，带B品牌，即B品牌的D产品</span><br><span class="line">        cProduct.name();</span><br><span class="line">        dProduct.name();</span><br><span class="line">        /**</span><br><span class="line">         * 输出结果：</span><br><span class="line">         * A品牌C产品</span><br><span class="line">         * B品牌D产品</span><br><span class="line">         */</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A品牌C产品</span><br><span class="line">B品牌D产品</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;桥接模式简介&quot;&gt;&lt;a href=&quot;#桥接模式简介&quot; class=&quot;headerlink&quot; title=&quot;桥接模式简介&quot;&gt;&lt;/a&gt;桥接模式简介&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;桥接是用于把抽象化与实现化解耦，使得二者可以独立变化。这种类型的设计模式属于结构型模式，它通过提</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java中的适配器模式</title>
    <link href="https://codingdgsun.github.io/2021/12/31/Java%E4%B8%AD%E7%9A%84%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>https://codingdgsun.github.io/2021/12/31/Java%E4%B8%AD%E7%9A%84%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-12-31T05:57:39.000Z</published>
    <updated>2021-12-31T05:58:12.163Z</updated>
    
    <content type="html"><![CDATA[<h4 id="适配器模式简介"><a href="#适配器模式简介" class="headerlink" title="适配器模式简介"></a>适配器模式简介</h4><ul><li>适配器模式是作为两个不兼容的接口之间的桥梁。这种类型的设计模式属于结构型模式，它结合了两个独立接口的功能。</li><li>这种模式涉及到一个单一的类，该类负责加入独立的或不兼容的接口功能。</li></ul><blockquote><p>类模式</p></blockquote><h5 id="要被适配的类TV和类Wire"><a href="#要被适配的类TV和类Wire" class="headerlink" title="要被适配的类TV和类Wire"></a>要被适配的类TV和类Wire</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//要被适配的类：电视</span><br><span class="line">public class TV &#123;</span><br><span class="line">    //电视剧需要一个电源适配器，就可以供电，开机</span><br><span class="line">    public void open(IPowerAdapter iPowerAdapter) &#123;</span><br><span class="line">        //打开电视，需要电，需要连接电线，需要一个电源适配器</span><br><span class="line">        iPowerAdapter.power();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//要被适配接入的类：电线</span><br><span class="line">public class Wire &#123;</span><br><span class="line">    public void supply() &#123;</span><br><span class="line">        System.out.println(&quot;供上电了...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="电源适配器接口IPowerAdapter"><a href="#电源适配器接口IPowerAdapter" class="headerlink" title="电源适配器接口IPowerAdapter"></a>电源适配器接口IPowerAdapter</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//电源适配器接口</span><br><span class="line">public interface IPowerAdapter &#123;</span><br><span class="line">    //供电</span><br><span class="line">    void power();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="电线和电视机适配器类TVPowerAdapter（通过继承方式）"><a href="#电线和电视机适配器类TVPowerAdapter（通过继承方式）" class="headerlink" title="电线和电视机适配器类TVPowerAdapter（通过继承方式）"></a>电线和电视机适配器类TVPowerAdapter（通过继承方式）</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//真正的适配器，一端连接电线，一端连接电视</span><br><span class="line">public class TVPowerAdapter extends Wire implements IPowerAdapter &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void power() &#123;</span><br><span class="line">        super.supply();//有电了</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        TV tv = new TV();//电视</span><br><span class="line">        TVPowerAdapter tvPowerAdapter = new TVPowerAdapter();//电源适配器</span><br><span class="line">        Wire wire = new Wire();//电线</span><br><span class="line"></span><br><span class="line">        tv.open(tvPowerAdapter);</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 输出结果：</span><br><span class="line">         * 供上电了...</span><br><span class="line">         */</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">供上电了...</span><br></pre></td></tr></table></figure><blockquote><p>组合模式（推荐使用）</p></blockquote><h5 id="要被适配的类TV和类Wire-1"><a href="#要被适配的类TV和类Wire-1" class="headerlink" title="要被适配的类TV和类Wire"></a>要被适配的类TV和类Wire</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//要被适配的类：电视</span><br><span class="line">public class TV &#123;</span><br><span class="line">    //电视剧需要一个电源适配器，就可以供电，开机</span><br><span class="line">    public void open(IPowerAdapter iPowerAdapter) &#123;</span><br><span class="line">        //打开电视，需要电，需要连接电线，需要一个电源适配器</span><br><span class="line">        iPowerAdapter.power();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//要被适配接入的类：电线</span><br><span class="line">public class Wire &#123;</span><br><span class="line">    public void supply() &#123;</span><br><span class="line">        System.out.println(&quot;供上电了...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="电源适配器接口IPowerAdapter-1"><a href="#电源适配器接口IPowerAdapter-1" class="headerlink" title="电源适配器接口IPowerAdapter"></a>电源适配器接口IPowerAdapter</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//电源适配器接口</span><br><span class="line">public interface IPowerAdapter &#123;</span><br><span class="line">    //供电</span><br><span class="line">    void power();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="电线和电视机适配器类TVPowerAdapter（通过组合方式）"><a href="#电线和电视机适配器类TVPowerAdapter（通过组合方式）" class="headerlink" title="电线和电视机适配器类TVPowerAdapter（通过组合方式）"></a>电线和电视机适配器类TVPowerAdapter（通过组合方式）</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//真正的适配器，一端连接电线，一端连接电视</span><br><span class="line">public class TVPowerAdapter implements IPowerAdapter &#123;</span><br><span class="line">    private Wire wire;</span><br><span class="line"></span><br><span class="line">    public TVPowerAdapter(Wire wire) &#123;</span><br><span class="line">        this.wire = wire;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void power() &#123;</span><br><span class="line">        wire.supply();//有电了</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试类-1"><a href="#测试类-1" class="headerlink" title="测试类"></a>测试类</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        TV tv = new TV();//电视</span><br><span class="line">        Wire wire = new Wire();//电线</span><br><span class="line">        TVPowerAdapter tvPowerAdapter = new TVPowerAdapter(wire);//电源适配器</span><br><span class="line"></span><br><span class="line">        tv.open(tvPowerAdapter);</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 输出结果：</span><br><span class="line">         * 供上电了...</span><br><span class="line">         */</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试结果-1"><a href="#测试结果-1" class="headerlink" title="测试结果"></a>测试结果</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">供上电了...</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;适配器模式简介&quot;&gt;&lt;a href=&quot;#适配器模式简介&quot; class=&quot;headerlink&quot; title=&quot;适配器模式简介&quot;&gt;&lt;/a&gt;适配器模式简介&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;适配器模式是作为两个不兼容的接口之间的桥梁。这种类型的设计模式属于结构型模式，它结合了两</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Mac OS上用命令行执行C程序</title>
    <link href="https://codingdgsun.github.io/2021/12/31/Mac-OS%E4%B8%8A%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%89%A7%E8%A1%8CC%E7%A8%8B%E5%BA%8F/"/>
    <id>https://codingdgsun.github.io/2021/12/31/Mac-OS%E4%B8%8A%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%89%A7%E8%A1%8CC%E7%A8%8B%E5%BA%8F/</id>
    <published>2021-12-31T05:55:21.000Z</published>
    <updated>2021-12-31T05:57:03.333Z</updated>
    
    <content type="html"><![CDATA[<h4 id="用命令行新建C文件"><a href="#用命令行新建C文件" class="headerlink" title="用命令行新建C文件"></a>用命令行新建C文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch hello.c</span><br></pre></td></tr></table></figure><h4 id="编辑C文件"><a href="#编辑C文件" class="headerlink" title="编辑C文件"></a>编辑C文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim hello.c</span><br></pre></td></tr></table></figure><h4 id="编写C程序代码"><a href="#编写C程序代码" class="headerlink" title="编写C程序代码"></a>编写C程序代码</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;Hello World!&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/80-01.3q90u8uku2o0.webp" alt="80-01"></p><h4 id="编译C程序文件"><a href="#编译C程序文件" class="headerlink" title="编译C程序文件"></a>编译C程序文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cc -c hello.c</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/80-02.7aizgqg7qwk0.webp" alt="80-02"></p><h4 id="生成可执行文件"><a href="#生成可执行文件" class="headerlink" title="生成可执行文件"></a>生成可执行文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cc hello.o</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/80-03.3uv17lx8om00.webp" alt="80-03"></p><h4 id="执行文件"><a href="#执行文件" class="headerlink" title="执行文件"></a>执行文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./a.out</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/80-04.19nks75flj40.webp" alt="80-04"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;用命令行新建C文件&quot;&gt;&lt;a href=&quot;#用命令行新建C文件&quot; class=&quot;headerlink&quot; title=&quot;用命令行新建C文件&quot;&gt;&lt;/a&gt;用命令行新建C文件&lt;/h4&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;t</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java中的原型模式</title>
    <link href="https://codingdgsun.github.io/2021/12/31/Java%E4%B8%AD%E7%9A%84%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://codingdgsun.github.io/2021/12/31/Java%E4%B8%AD%E7%9A%84%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-12-31T05:54:02.000Z</published>
    <updated>2021-12-31T05:54:36.718Z</updated>
    
    <content type="html"><![CDATA[<h4 id="原型模式简介"><a href="#原型模式简介" class="headerlink" title="原型模式简介"></a>原型模式简介</h4><ul><li>模式属于创建型模式，它提供了一种创建对象的最佳方式。</li><li>用于创建重复的对象，同时又能保证性能。</li><li>这种模式是实现了一个原型接口，该接口用于创建当前对象的克隆。当直接创建对象的代价比较大时，则采用这种模式。</li><li>例如，一个对象需要在一个高代价的数据库操作之后被创建。我们可以缓存该对象，在下一个请求时返回它的克隆，在需要的时候更新数据库，以此来减少数据库调用。</li></ul><blockquote><p>浅克隆</p></blockquote><h5 id="类Book实现Cloneable接口并重写clone方法"><a href="#类Book实现Cloneable接口并重写clone方法" class="headerlink" title="类Book实现Cloneable接口并重写clone方法"></a>类Book实现Cloneable接口并重写clone方法</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">public class Book implements Cloneable &#123;</span><br><span class="line">    private String name;//书名</span><br><span class="line">    private Date publishDate;//发布日期</span><br><span class="line"></span><br><span class="line">    public Book() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Book(String name, Date publishDate) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.publishDate = publishDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Date getPublishDate() &#123;</span><br><span class="line">        return publishDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPublishDate(Date publishDate) &#123;</span><br><span class="line">        this.publishDate = publishDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected Object clone() throws CloneNotSupportedException &#123;</span><br><span class="line">        return super.clone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Book&#123;&quot; +</span><br><span class="line">                &quot;name=&#x27;&quot; + name + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &quot;, publishDate=&quot; + publishDate +</span><br><span class="line">                &#x27;&#125;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) throws CloneNotSupportedException &#123;</span><br><span class="line">        String name = &quot;Java 设计模式&quot;;</span><br><span class="line">        Date publishDate = new Date();</span><br><span class="line"></span><br><span class="line">        Book book = new Book(name, publishDate);</span><br><span class="line">        //克隆出对象</span><br><span class="line">        Book clone = (Book) book.clone();</span><br><span class="line"></span><br><span class="line">        System.out.println(book);</span><br><span class="line">        System.out.println(book.hashCode());</span><br><span class="line">        System.out.println(clone);</span><br><span class="line">        System.out.println(clone.hashCode());</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;==================&quot;);</span><br><span class="line"></span><br><span class="line">        publishDate.setTime(publishDate.getTime() + 2000);//修改时间</span><br><span class="line">        System.out.println(book);</span><br><span class="line">        System.out.println(book.hashCode());</span><br><span class="line">        System.out.println(clone);</span><br><span class="line">        System.out.println(clone.hashCode());</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 测试结果：修改了时间，源对象和克隆的对象的时间，都发生了改变</span><br><span class="line">         * Book&#123;name=&#x27;Java 设计模式&#x27;, publishDate=Wed Dec 29 12:17:33 CST 2021&#125;</span><br><span class="line">         * 2093631819</span><br><span class="line">         * Book&#123;name=&#x27;Java 设计模式&#x27;, publishDate=Wed Dec 29 12:17:33 CST 2021&#125;</span><br><span class="line">         * 2074407503</span><br><span class="line">         * ==================</span><br><span class="line">         * Book&#123;name=&#x27;Java 设计模式&#x27;, publishDate=Wed Dec 29 12:17:35 CST 2021&#125;</span><br><span class="line">         * 2093631819</span><br><span class="line">         * Book&#123;name=&#x27;Java 设计模式&#x27;, publishDate=Wed Dec 29 12:17:35 CST 2021&#125;</span><br><span class="line">         * 2074407503</span><br><span class="line">         */</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Book&#123;name=&#x27;Java 设计模式&#x27;, publishDate=Wed Dec 29 12:17:33 CST 2021&#125;</span><br><span class="line">2093631819</span><br><span class="line">Book&#123;name=&#x27;Java 设计模式&#x27;, publishDate=Wed Dec 29 12:17:33 CST 2021&#125;</span><br><span class="line">2074407503</span><br><span class="line">==================</span><br><span class="line">Book&#123;name=&#x27;Java 设计模式&#x27;, publishDate=Wed Dec 29 12:17:35 CST 2021&#125;</span><br><span class="line">2093631819</span><br><span class="line">Book&#123;name=&#x27;Java 设计模式&#x27;, publishDate=Wed Dec 29 12:17:35 CST 2021&#125;</span><br><span class="line">2074407503</span><br></pre></td></tr></table></figure><blockquote><p>深克隆</p></blockquote><h5 id="类Book实现Cloneable接口并重写clone方法-1"><a href="#类Book实现Cloneable接口并重写clone方法-1" class="headerlink" title="类Book实现Cloneable接口并重写clone方法"></a>类Book实现Cloneable接口并重写clone方法</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">public class Book implements Cloneable &#123;</span><br><span class="line">    private String name;//书名</span><br><span class="line">    private Date publishDate;//发布日期</span><br><span class="line"></span><br><span class="line">    public Book() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Book(String name, Date publishDate) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.publishDate = publishDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Date getPublishDate() &#123;</span><br><span class="line">        return publishDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPublishDate(Date publishDate) &#123;</span><br><span class="line">        this.publishDate = publishDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected Object clone() throws CloneNotSupportedException &#123;</span><br><span class="line">        Object obj = super.clone();</span><br><span class="line">        Book book = (Book) obj;</span><br><span class="line"></span><br><span class="line">        //将源对象的属性也进行克隆，即深克隆</span><br><span class="line">        book.publishDate = (Date) book.publishDate.clone();</span><br><span class="line">        return obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Book&#123;&quot; +</span><br><span class="line">                &quot;name=&#x27;&quot; + name + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &quot;, publishDate=&quot; + publishDate +</span><br><span class="line">                &#x27;&#125;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试类-1"><a href="#测试类-1" class="headerlink" title="测试类"></a>测试类</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) throws CloneNotSupportedException &#123;</span><br><span class="line">        String name = &quot;Java 设计模式&quot;;</span><br><span class="line">        Date publishDate = new Date();</span><br><span class="line"></span><br><span class="line">        Book book = new Book(name, publishDate);</span><br><span class="line">        //克隆出对象</span><br><span class="line">        Book clone = (Book) book.clone();</span><br><span class="line"></span><br><span class="line">        System.out.println(book);</span><br><span class="line">        System.out.println(book.hashCode());</span><br><span class="line">        System.out.println(clone);</span><br><span class="line">        System.out.println(clone.hashCode());</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;==================&quot;);</span><br><span class="line"></span><br><span class="line">        publishDate.setTime(publishDate.getTime() + 2000);</span><br><span class="line">        System.out.println(book);</span><br><span class="line">        System.out.println(book.hashCode());</span><br><span class="line">        System.out.println(clone);</span><br><span class="line">        System.out.println(clone.hashCode());</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 测试结果：修改了时间，源对象的时间，发生了改变，但克隆的对象的时间没有改变</span><br><span class="line">         * Book&#123;name=&#x27;Java 设计模式&#x27;, publishDate=Wed Dec 29 12:41:47 CST 2021&#125;</span><br><span class="line">         * 2093631819</span><br><span class="line">         * Book&#123;name=&#x27;Java 设计模式&#x27;, publishDate=Wed Dec 29 12:41:47 CST 2021&#125;</span><br><span class="line">         * 2074407503</span><br><span class="line">         * ==================</span><br><span class="line">         * Book&#123;name=&#x27;Java 设计模式&#x27;, publishDate=Wed Dec 29 12:41:49 CST 2021&#125;</span><br><span class="line">         * 2093631819</span><br><span class="line">         * Book&#123;name=&#x27;Java 设计模式&#x27;, publishDate=Wed Dec 29 12:41:47 CST 2021&#125;</span><br><span class="line">         * 2074407503</span><br><span class="line">         */</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试结果-1"><a href="#测试结果-1" class="headerlink" title="测试结果"></a>测试结果</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Book&#123;name=&#x27;Java 设计模式&#x27;, publishDate=Wed Dec 29 12:41:47 CST 2021&#125;</span><br><span class="line">2093631819</span><br><span class="line">Book&#123;name=&#x27;Java 设计模式&#x27;, publishDate=Wed Dec 29 12:41:47 CST 2021&#125;</span><br><span class="line">2074407503</span><br><span class="line">==================</span><br><span class="line">Book&#123;name=&#x27;Java 设计模式&#x27;, publishDate=Wed Dec 29 12:41:49 CST 2021&#125;</span><br><span class="line">2093631819</span><br><span class="line">Book&#123;name=&#x27;Java 设计模式&#x27;, publishDate=Wed Dec 29 12:41:47 CST 2021&#125;</span><br><span class="line">2074407503</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;原型模式简介&quot;&gt;&lt;a href=&quot;#原型模式简介&quot; class=&quot;headerlink&quot; title=&quot;原型模式简介&quot;&gt;&lt;/a&gt;原型模式简介&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;模式属于创建型模式，它提供了一种创建对象的最佳方式。&lt;/li&gt;
&lt;li&gt;用于创建重复的对象，同时</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java中的建造者模式</title>
    <link href="https://codingdgsun.github.io/2021/12/31/Java%E4%B8%AD%E7%9A%84%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://codingdgsun.github.io/2021/12/31/Java%E4%B8%AD%E7%9A%84%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-12-31T05:52:39.000Z</published>
    <updated>2021-12-31T05:53:03.732Z</updated>
    
    <content type="html"><![CDATA[<h4 id="建造者模式简介"><a href="#建造者模式简介" class="headerlink" title="建造者模式简介"></a>建造者模式简介</h4><ul><li>模式属于创建型模式，它提供了一种创建对象的最佳方式。</li><li>使用多个简单的对象一步一步构建成一个复杂的对象。</li><li>一个Builder类会一步一步构造最终的对象。该Builder类是独立于其他对象的。</li></ul><blockquote><p>指挥者模式</p></blockquote><h5 id="产品类Product"><a href="#产品类Product" class="headerlink" title="产品类Product"></a>产品类Product</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">//产品</span><br><span class="line">public class Product &#123;</span><br><span class="line">    private String one;</span><br><span class="line">    private String two;</span><br><span class="line">    private String three;</span><br><span class="line"></span><br><span class="line">    public String getOne() &#123;</span><br><span class="line">        return one;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setOne(String one) &#123;</span><br><span class="line">        this.one = one;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getTwo() &#123;</span><br><span class="line">        return two;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setTwo(String two) &#123;</span><br><span class="line">        this.two = two;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getThree() &#123;</span><br><span class="line">        return three;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setThree(String three) &#123;</span><br><span class="line">        this.three = three;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Product&#123;&quot; +</span><br><span class="line">                &quot;one=&#x27;&quot; + one + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &quot;, two=&#x27;&quot; + two + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &quot;, three=&#x27;&quot; + three + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &#x27;&#125;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="抽象类Builder"><a href="#抽象类Builder" class="headerlink" title="抽象类Builder"></a>抽象类Builder</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//抽象的建造者</span><br><span class="line">public abstract class Builder &#123;</span><br><span class="line">    abstract void one();//第一步工序</span><br><span class="line"></span><br><span class="line">    abstract void two();//第二步工序</span><br><span class="line"></span><br><span class="line">    abstract void three();//第三步工序</span><br><span class="line"></span><br><span class="line">    abstract Product getProduct();//完工，得到产品</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="子类Worker"><a href="#子类Worker" class="headerlink" title="子类Worker"></a>子类Worker</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">//具体的建造者：工人</span><br><span class="line">public class Worker extends Builder &#123;</span><br><span class="line">    private Product product;</span><br><span class="line"></span><br><span class="line">    public Worker() &#123;</span><br><span class="line">        product = new Product();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    void one() &#123;</span><br><span class="line">        product.setOne(&quot;第一步工序&quot;);</span><br><span class="line">        System.out.println(&quot;第一步工序&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    void two() &#123;</span><br><span class="line">        product.setTwo(&quot;第二步工序&quot;);</span><br><span class="line">        System.out.println(&quot;第二步工序&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    void three() &#123;</span><br><span class="line">        product.setThree(&quot;第三步工序&quot;);</span><br><span class="line">        System.out.println(&quot;第三步工序&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    Product getProduct() &#123;</span><br><span class="line">        return product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="指挥者类"><a href="#指挥者类" class="headerlink" title="指挥者类"></a>指挥者类</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//指挥者</span><br><span class="line">public class Director &#123;</span><br><span class="line">    //指挥工人生成产品</span><br><span class="line">    public Product build(Builder builder)&#123;</span><br><span class="line">        builder.one();</span><br><span class="line">        builder.two();</span><br><span class="line">        builder.three();</span><br><span class="line"></span><br><span class="line">        return builder.getProduct();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //指挥者</span><br><span class="line">        Director director = new Director();</span><br><span class="line">        //指挥工人生产产品</span><br><span class="line">        Product product = director.build(new Worker());</span><br><span class="line">        System.out.println(product);</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 输出结果：</span><br><span class="line">         * 第一步工序</span><br><span class="line">         * 第二步工序</span><br><span class="line">         * 第三步工序</span><br><span class="line">         * Product&#123;one=&#x27;第一步工序&#x27;, two=&#x27;第二步工序&#x27;, three=&#x27;第三步工序&#x27;&#125;</span><br><span class="line">         */</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">第一步工序</span><br><span class="line">第二步工序</span><br><span class="line">第三步工序</span><br><span class="line">Product&#123;one=&#x27;第一步工序&#x27;, two=&#x27;第二步工序&#x27;, three=&#x27;第三步工序&#x27;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>内部类模式</p></blockquote><h5 id="产品类Product-1"><a href="#产品类Product-1" class="headerlink" title="产品类Product"></a>产品类Product</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">//产品</span><br><span class="line">public class Product &#123;</span><br><span class="line">    private String one = &quot;第一步工序&quot;;</span><br><span class="line">    private String two = &quot;第二步工序&quot;;</span><br><span class="line">    private String three = &quot;第三步工序&quot;;</span><br><span class="line"></span><br><span class="line">    public String getOne() &#123;</span><br><span class="line">        return one;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setOne(String one) &#123;</span><br><span class="line">        this.one = one;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getTwo() &#123;</span><br><span class="line">        return two;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setTwo(String two) &#123;</span><br><span class="line">        this.two = two;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getThree() &#123;</span><br><span class="line">        return three;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setThree(String three) &#123;</span><br><span class="line">        this.three = three;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Product&#123;&quot; +</span><br><span class="line">                &quot;one=&#x27;&quot; + one + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &quot;, two=&#x27;&quot; + two + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &quot;, three=&#x27;&quot; + three + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &#x27;&#125;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="抽象类Builder-1"><a href="#抽象类Builder-1" class="headerlink" title="抽象类Builder"></a>抽象类Builder</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//抽象的建造者</span><br><span class="line">public abstract class Builder &#123;</span><br><span class="line">    abstract Builder one(String mes);//第一步工序</span><br><span class="line"></span><br><span class="line">    abstract Builder two(String mes);//第二步工序</span><br><span class="line"></span><br><span class="line">    abstract Builder three(String mes);//第三步工序</span><br><span class="line"></span><br><span class="line">    abstract Product getProduct();//完工，得到产品</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="子类Worker-1"><a href="#子类Worker-1" class="headerlink" title="子类Worker"></a>子类Worker</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">//具体的建造者：工人</span><br><span class="line">public class Worker extends Builder &#123;</span><br><span class="line">    private Product product;</span><br><span class="line"></span><br><span class="line">    public Worker() &#123;</span><br><span class="line">        product = new Product();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    Builder one(String mes) &#123;</span><br><span class="line">        product.setOne(mes);</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    Builder two(String mes) &#123;</span><br><span class="line">        product.setTwo(mes);</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    Builder three(String mes) &#123;</span><br><span class="line">        product.setThree(mes);</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    Product getProduct() &#123;</span><br><span class="line">        return product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试类-1"><a href="#测试类-1" class="headerlink" title="测试类"></a>测试类</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //工人</span><br><span class="line">        Worker worker = new Worker();</span><br><span class="line">        //生产产品</span><br><span class="line">        Product product = worker.getProduct();</span><br><span class="line">        System.out.println(product.toString());</span><br><span class="line">        /**</span><br><span class="line">         * 输出结果：</span><br><span class="line">         * Product&#123;one=&#x27;第一步工序&#x27;, two=&#x27;第二步工序&#x27;, three=&#x27;第三步工序&#x27;&#125;</span><br><span class="line">         */</span><br><span class="line"></span><br><span class="line">        //链式编程</span><br><span class="line">        product = worker.one(&quot;第一步额外工序&quot;).three(&quot;提前第三步工序&quot;).getProduct();</span><br><span class="line">        System.out.println(product);</span><br><span class="line">        /**</span><br><span class="line">         * 输出结果：</span><br><span class="line">         * Product&#123;one=&#x27;第一步额外工序&#x27;, two=&#x27;第二步工序&#x27;, three=&#x27;提前第三步工序&#x27;&#125;</span><br><span class="line">         */</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试结果-1"><a href="#测试结果-1" class="headerlink" title="测试结果"></a>测试结果</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Product&#123;one=&#x27;第一步工序&#x27;, two=&#x27;第二步工序&#x27;, three=&#x27;第三步工序&#x27;&#125;</span><br><span class="line">Product&#123;one=&#x27;第一步额外工序&#x27;, two=&#x27;第二步工序&#x27;, three=&#x27;提前第三步工序&#x27;&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;建造者模式简介&quot;&gt;&lt;a href=&quot;#建造者模式简介&quot; class=&quot;headerlink&quot; title=&quot;建造者模式简介&quot;&gt;&lt;/a&gt;建造者模式简介&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;模式属于创建型模式，它提供了一种创建对象的最佳方式。&lt;/li&gt;
&lt;li&gt;使用多个简单的对</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java中的抽象工厂模式</title>
    <link href="https://codingdgsun.github.io/2021/12/27/Java%E4%B8%AD%E7%9A%84%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>https://codingdgsun.github.io/2021/12/27/Java%E4%B8%AD%E7%9A%84%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-12-27T02:20:32.000Z</published>
    <updated>2021-12-27T02:20:50.926Z</updated>
    
    <content type="html"><![CDATA[<h4 id="抽象工厂模式简介"><a href="#抽象工厂模式简介" class="headerlink" title="抽象工厂模式简介"></a>抽象工厂模式简介</h4><ul><li>模式属于创建型模式，它提供了一种创建对象的最佳方式。</li><li>抽象工厂模式（Abstract Factory Pattern）是围绕一个超级工厂创建其他工厂。该超级工厂又称为其他工厂的工厂。</li><li>在抽象工厂模式中，接口是负责创建一个相关对象的工厂，不需要显式指定它们的类。每个生成的工厂都能按照工厂模式提供对象。</li></ul><h5 id="接口IComputerProduct"><a href="#接口IComputerProduct" class="headerlink" title="接口IComputerProduct"></a>接口IComputerProduct</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//电脑产品接口</span><br><span class="line">public interface IComputerProduct &#123;</span><br><span class="line">    void start();</span><br><span class="line"></span><br><span class="line">    void shutdown();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="子类AComputer和BComputer"><a href="#子类AComputer和BComputer" class="headerlink" title="子类AComputer和BComputer"></a>子类AComputer和BComputer</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//A电脑</span><br><span class="line">public class AComputer implements IComputerProduct &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void start() &#123;</span><br><span class="line">        System.out.println(&quot;开启A电脑&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void shutdown() &#123;</span><br><span class="line">        System.out.println(&quot;关闭A电脑&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//B电脑</span><br><span class="line">public class BComputer implements IComputerProduct &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void start() &#123;</span><br><span class="line">        System.out.println(&quot;开启B电脑&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void shutdown() &#123;</span><br><span class="line">        System.out.println(&quot;关闭B电脑&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="接口ITVProduct"><a href="#接口ITVProduct" class="headerlink" title="接口ITVProduct"></a>接口ITVProduct</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//电视机产品接口</span><br><span class="line">public interface ITVProduct &#123;</span><br><span class="line">    void start();</span><br><span class="line"></span><br><span class="line">    void shutdown();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="子类ATV和BTV"><a href="#子类ATV和BTV" class="headerlink" title="子类ATV和BTV"></a>子类ATV和BTV</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//A电视</span><br><span class="line">public class ATV implements ITVProduct &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void start() &#123;</span><br><span class="line">        System.out.println(&quot;开启A电视&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void shutdown() &#123;</span><br><span class="line">        System.out.println(&quot;关闭A电视&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//B电视</span><br><span class="line">public class BTV implements ITVProduct &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void start() &#123;</span><br><span class="line">        System.out.println(&quot;开启B电视&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void shutdown() &#123;</span><br><span class="line">        System.out.println(&quot;关闭B电视&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="接口IProductFactory"><a href="#接口IProductFactory" class="headerlink" title="接口IProductFactory"></a>接口IProductFactory</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//抽象产品工厂</span><br><span class="line">public interface IProductFactory &#123;</span><br><span class="line">    //生产电脑</span><br><span class="line">    IComputerProduct iComputerProduct();</span><br><span class="line"></span><br><span class="line">    //生产电视</span><br><span class="line">    ITVProduct itvProduct();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="子类AFactory和BFactory"><a href="#子类AFactory和BFactory" class="headerlink" title="子类AFactory和BFactory"></a>子类AFactory和BFactory</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public class AFactory implements IProductFactory &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public IComputerProduct iComputerProduct() &#123;</span><br><span class="line">        return new AComputer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public ITVProduct itvProduct() &#123;</span><br><span class="line">        return new ATV();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class BFactory implements IProductFactory &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public IComputerProduct iComputerProduct() &#123;</span><br><span class="line">        return new BComputer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public ITVProduct itvProduct() &#123;</span><br><span class="line">        return new BTV();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        AFactory aFactory = new AFactory();//A工厂</span><br><span class="line">        IComputerProduct iComputerProduct = aFactory.iComputerProduct();//A工厂电脑产品</span><br><span class="line">        iComputerProduct.start();</span><br><span class="line">        iComputerProduct.shutdown();</span><br><span class="line"></span><br><span class="line">        ITVProduct itvProduct = aFactory.itvProduct();//A工厂电视产品</span><br><span class="line">        itvProduct.start();</span><br><span class="line">        itvProduct.shutdown();</span><br><span class="line"></span><br><span class="line">        BFactory bFactory = new BFactory();//B工厂</span><br><span class="line">        iComputerProduct = bFactory.iComputerProduct();//B工厂电脑产品</span><br><span class="line">        iComputerProduct.start();</span><br><span class="line">        iComputerProduct.shutdown();</span><br><span class="line"></span><br><span class="line">        itvProduct = bFactory.itvProduct();//B工厂电视产品</span><br><span class="line">        itvProduct.start();</span><br><span class="line">        itvProduct.shutdown();</span><br><span class="line">        /**</span><br><span class="line">         * 输出结果：</span><br><span class="line">         * 开启A电脑</span><br><span class="line">         * 关闭A电脑</span><br><span class="line">         * 开启A电视</span><br><span class="line">         * 关闭A电视</span><br><span class="line">         * 开启B电脑</span><br><span class="line">         * 关闭B电脑</span><br><span class="line">         * 开启B电视</span><br><span class="line">         * 关闭B电视</span><br><span class="line">         */</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">开启A电脑</span><br><span class="line">关闭A电脑</span><br><span class="line">开启A电视</span><br><span class="line">关闭A电视</span><br><span class="line">开启B电脑</span><br><span class="line">关闭B电脑</span><br><span class="line">开启B电视</span><br><span class="line">关闭B电视</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;抽象工厂模式简介&quot;&gt;&lt;a href=&quot;#抽象工厂模式简介&quot; class=&quot;headerlink&quot; title=&quot;抽象工厂模式简介&quot;&gt;&lt;/a&gt;抽象工厂模式简介&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;模式属于创建型模式，它提供了一种创建对象的最佳方式。&lt;/li&gt;
&lt;li&gt;抽象工厂</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java中的工厂模式</title>
    <link href="https://codingdgsun.github.io/2021/12/27/Java%E4%B8%AD%E7%9A%84%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>https://codingdgsun.github.io/2021/12/27/Java%E4%B8%AD%E7%9A%84%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-12-27T02:19:58.000Z</published>
    <updated>2021-12-27T02:20:15.765Z</updated>
    
    <content type="html"><![CDATA[<h4 id="工厂模式简介"><a href="#工厂模式简介" class="headerlink" title="工厂模式简介"></a>工厂模式简介</h4><ul><li>模式属于创建型模式，它提供了一种创建对象的最佳方式。</li><li>在工厂模式中，创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。</li></ul><blockquote><p>静态简单工厂模式</p></blockquote><h5 id="接口Animal"><a href="#接口Animal" class="headerlink" title="接口Animal"></a>接口Animal</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface Animal &#123;</span><br><span class="line">    String getName();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="子类Dog和Cat"><a href="#子类Dog和Cat" class="headerlink" title="子类Dog和Cat"></a>子类Dog和Cat</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class Dog implements Animal &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return &quot;Dog&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Cat implements Animal &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return &quot;Cat&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="工厂类"><a href="#工厂类" class="headerlink" title="工厂类"></a>工厂类</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class AnimalFactory &#123;</span><br><span class="line">    //静态简单工厂模式</span><br><span class="line">    public static Animal getAnimal(String animal) &#123;</span><br><span class="line">        if (animal != null) &#123;</span><br><span class="line">            if (animal.equals(&quot;Dog&quot;)) &#123;</span><br><span class="line">                return new Dog();</span><br><span class="line">            &#125; else if (animal.equals(&quot;Cat&quot;)) &#123;</span><br><span class="line">                return new Cat();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Animal animal1 = AnimalFactory.getAnimal(&quot;Dog&quot;);</span><br><span class="line">        Animal animal2 = AnimalFactory.getAnimal(&quot;Cat&quot;);</span><br><span class="line"></span><br><span class="line">        if (animal1 != null) &#123;</span><br><span class="line">            System.out.println(animal1.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (animal2 != null) &#123;</span><br><span class="line">            System.out.println(animal2.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 输出结果：</span><br><span class="line">         * Dog</span><br><span class="line">         * Cat</span><br><span class="line">         */</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Dog</span><br><span class="line">Cat</span><br></pre></td></tr></table></figure><hr><blockquote><p>工厂方法模式</p></blockquote><h5 id="接口Animal-1"><a href="#接口Animal-1" class="headerlink" title="接口Animal"></a>接口Animal</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface Animal &#123;</span><br><span class="line">    String getName();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="子类Dog和Cat-1"><a href="#子类Dog和Cat-1" class="headerlink" title="子类Dog和Cat"></a>子类Dog和Cat</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class Dog implements Animal &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return &quot;Dog&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Cat implements Animal &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return &quot;Cat&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="接口AnimalFactory"><a href="#接口AnimalFactory" class="headerlink" title="接口AnimalFactory"></a>接口AnimalFactory</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface AnimalFactory &#123;</span><br><span class="line">    Animal getAnimal();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="子类CatFactory和DogFactory"><a href="#子类CatFactory和DogFactory" class="headerlink" title="子类CatFactory和DogFactory"></a>子类CatFactory和DogFactory</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class CatFactory implements AnimalFactory&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public Animal getAnimal() &#123;</span><br><span class="line">        return new Cat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class DogFactory implements AnimalFactory&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public Animal getAnimal() &#123;</span><br><span class="line">        return new Dog();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试类-1"><a href="#测试类-1" class="headerlink" title="测试类"></a>测试类</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Animal animal1 = new DogFactory().getAnimal();</span><br><span class="line">        Animal animal2 = new CatFactory().getAnimal();</span><br><span class="line"></span><br><span class="line">        if (animal1 != null) &#123;</span><br><span class="line">            System.out.println(animal1.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (animal2 != null) &#123;</span><br><span class="line">            System.out.println(animal2.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 输出结果：</span><br><span class="line">         * Dog</span><br><span class="line">         * Cat</span><br><span class="line">         */</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试结果-1"><a href="#测试结果-1" class="headerlink" title="测试结果"></a>测试结果</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Dog</span><br><span class="line">Cat</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;工厂模式简介&quot;&gt;&lt;a href=&quot;#工厂模式简介&quot; class=&quot;headerlink&quot; title=&quot;工厂模式简介&quot;&gt;&lt;/a&gt;工厂模式简介&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;模式属于创建型模式，它提供了一种创建对象的最佳方式。&lt;/li&gt;
&lt;li&gt;在工厂模式中，创建对象时</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java中的单例模式</title>
    <link href="https://codingdgsun.github.io/2021/12/27/Java%E4%B8%AD%E7%9A%84%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://codingdgsun.github.io/2021/12/27/Java%E4%B8%AD%E7%9A%84%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-12-27T02:19:17.000Z</published>
    <updated>2021-12-27T02:19:37.601Z</updated>
    
    <content type="html"><![CDATA[<h4 id="单例模式简介"><a href="#单例模式简介" class="headerlink" title="单例模式简介"></a>单例模式简介</h4><ul><li>模式属于创建型模式，它提供了一种创建对象的最佳方式。</li><li>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。</li><li>这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</li><li>主要分为：<strong>饿汉模式</strong>和<strong>懒汉模式</strong></li></ul><blockquote><p>饿汉模式</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//饿汉模式</span><br><span class="line">public class Hungry &#123;</span><br><span class="line">    private static Hungry hungry = new Hungry();</span><br><span class="line"></span><br><span class="line">    private Hungry() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static Hungry getInstance() &#123;</span><br><span class="line">        return hungry;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>懒汉模式（单线程）</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class LazyMan01 &#123;</span><br><span class="line">    private static LazyMan01 lazyMan;</span><br><span class="line"></span><br><span class="line">    private LazyMan01() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static LazyMan01 getInstance() &#123;</span><br><span class="line">        if (lazyMan == null) &#123;</span><br><span class="line">            lazyMan = new LazyMan01();</span><br><span class="line">        &#125;</span><br><span class="line">        return lazyMan;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>懒汉模式（多线程）</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class LazyMan02 &#123;</span><br><span class="line">    private volatile static LazyMan02 lazyMan;</span><br><span class="line"></span><br><span class="line">    private LazyMan02() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //双重检测锁 懒汉单例模式 DCL懒汉模式</span><br><span class="line">    public static LazyMan02 getInstance() &#123;</span><br><span class="line">        if (lazyMan == null) &#123;</span><br><span class="line">            synchronized (LazyMan02.class) &#123;</span><br><span class="line">                if (lazyMan == null) &#123;</span><br><span class="line">                    lazyMan = new LazyMan02();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return lazyMan;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;单例模式简介&quot;&gt;&lt;a href=&quot;#单例模式简介&quot; class=&quot;headerlink&quot; title=&quot;单例模式简介&quot;&gt;&lt;/a&gt;单例模式简介&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;模式属于创建型模式，它提供了一种创建对象的最佳方式。&lt;/li&gt;
&lt;li&gt;这种模式涉及到一个单一的</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>上传docker镜像到阿里云镜像中心实践</title>
    <link href="https://codingdgsun.github.io/2021/12/23/%E4%B8%8A%E4%BC%A0docker%E9%95%9C%E5%83%8F%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91%E9%95%9C%E5%83%8F%E4%B8%AD%E5%BF%83%E5%AE%9E%E8%B7%B5/"/>
    <id>https://codingdgsun.github.io/2021/12/23/%E4%B8%8A%E4%BC%A0docker%E9%95%9C%E5%83%8F%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91%E9%95%9C%E5%83%8F%E4%B8%AD%E5%BF%83%E5%AE%9E%E8%B7%B5/</id>
    <published>2021-12-23T07:26:09.000Z</published>
    <updated>2021-12-23T07:26:46.209Z</updated>
    
    <content type="html"><![CDATA[<h4 id="注册并登录阿里云账户"><a href="#注册并登录阿里云账户" class="headerlink" title="注册并登录阿里云账户"></a>注册并登录阿里云账户</h4><p>需提前在<a href="https://www.aliyun.com/">阿里云官网</a>，注册一个用户<br><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/74-01.15owi8srn5ts.jpg" alt="74-01"></p><h4 id="进入控制后台"><a href="#进入控制后台" class="headerlink" title="进入控制后台"></a>进入控制后台</h4><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/74-02.g4d2fpny4v4.jpg" alt="74-02"></p><h4 id="进入容器镜像服务"><a href="#进入容器镜像服务" class="headerlink" title="进入容器镜像服务"></a>进入容器镜像服务</h4><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/74-03.2s9pfoj67ue0.jpg" alt="74-03"></p><h4 id="创建个人实例"><a href="#创建个人实例" class="headerlink" title="创建个人实例"></a>创建个人实例</h4><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/74-04.76876twdqgg0.jpg" alt="74-04"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/74-05.3nxq0q97aks0.jpg" alt="74-05"></p><h4 id="设置Registry密码"><a href="#设置Registry密码" class="headerlink" title="设置Registry密码"></a>设置Registry密码</h4><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/74-06.2tx9zc5vzci0.jpg" alt="74-06"></p><h4 id="创建命名空间"><a href="#创建命名空间" class="headerlink" title="创建命名空间"></a>创建命名空间</h4><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/74-07.5rmim98en600.jpg" alt="74-07"></p><h4 id="创建镜像仓库"><a href="#创建镜像仓库" class="headerlink" title="创建镜像仓库"></a>创建镜像仓库</h4><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/74-08.7gn1vmgjs3s0.jpg" alt="74-08"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/74-09.5ujod1i1g3o0.jpg" alt="74-09"></p><h4 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull tomcat      //下载tomcat镜像</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/65-01.323ona7ue4s0.jpg" alt="65-01"></p><h4 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name=&quot;MyTomcat&quot; -p 8888:8080 tomcat     </span><br><span class="line">//后台方式，以外部主机端口8888映射容器端口8080，运行Tomcat，容器别名为MyTomcat</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-11.1qdl3qsvqekg.jpg" alt="63-09"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl localhost:8888     //测试访问显示404</span><br></pre></td></tr></table></figure><p><strong>此处要注意，【有坑】！</strong></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-07.6m9lxsdxl0o0.jpg" alt="63-10"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-08.3pbn6nqzv5q0.jpg" alt="63-11"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it 2dd5319e4047 /bin/bash      //进入容器</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-12.1399pww3sdyo.jpg" alt="63-12"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -r webapps.dist/* webapps      //将webapps.dist目录下的所以文件，拷贝到webapps目录</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-13.3fqizw1cu620.jpg" alt="63-13"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl localhost:8888     //测试访问显示正常</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-14.3400o668a420.jpg" alt="63-14"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-15.6jo9k4icxgg0.jpg" alt="63-15"></p><h4 id="提交生成镜像"><a href="#提交生成镜像" class="headerlink" title="提交生成镜像"></a>提交生成镜像</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker commit --help        //查看commit帮助</span><br><span class="line">        -a 作者</span><br><span class="line">        -m 提交的信息内容</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/65-02.5iznzj4pifw0.jpg" alt="65-02"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker commit -a &quot;codingdgsun&quot; -m &quot;Init tomcat webapps&quot; 08635d0f1579 registry.cn-hangzhou.aliyuncs.com/codingdgsun/mytomcat:1.0.0     </span><br><span class="line">//提交镜像，作者：codingdgsun；提交的备注信息：Init tomcat webapps；提交的容器ID：08635d0f1579；</span><br><span class="line">//镜像的别名：registry.cn-hangzhou.aliyuncs.com/codingdgsun/mytomcat；版本号：1.0.0</span><br></pre></td></tr></table></figure><p><strong>注意</strong>镜像的别名必须是(<strong>registry.cn-hangzhou.aliyuncs.com/codingdgsun/mytomcat；版本号：1.0.0</strong>)：其中，codingdgsun是阿里云镜像服务里面新建的命名空间，不然阿里云镜像中心不允许上传镜像</p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/74-11.hqjzk8dsaw8.jpg" alt="74-11"></p><h4 id="登录阿里云Docker-Registry"><a href="#登录阿里云Docker-Registry" class="headerlink" title="登录阿里云Docker Registry"></a>登录阿里云Docker Registry</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker login  registry.cn-hangzhou.aliyuncs.com</span><br><span class="line">//输入阿里云用户名和registry密码进行登录</span><br><span class="line">docker logout registry.cn-hangzhou.aliyuncs.com          //退出登录</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/74-10.2uwq2pbzrn40.jpg" alt="74-10"></p><h4 id="上传镜像到阿里云镜像中心"><a href="#上传镜像到阿里云镜像中心" class="headerlink" title="上传镜像到阿里云镜像中心"></a>上传镜像到阿里云镜像中心</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push registry.cn-hangzhou.aliyuncs.com/codingdgsun/mytomcat:1.0.0</span><br></pre></td></tr></table></figure><h4 id="镜像上传成功"><a href="#镜像上传成功" class="headerlink" title="镜像上传成功"></a>镜像上传成功</h4><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/74-12.6vt8yfejyn00.jpg" alt="74-12"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/74-13.5iak35mgh4g0.jpg" alt="74-13"></p><h4 id="从阿里云镜像中心下载镜像"><a href="#从阿里云镜像中心下载镜像" class="headerlink" title="从阿里云镜像中心下载镜像"></a>从阿里云镜像中心下载镜像</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/codingdgsun/mytomcat:1.0.0</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;注册并登录阿里云账户&quot;&gt;&lt;a href=&quot;#注册并登录阿里云账户&quot; class=&quot;headerlink&quot; title=&quot;注册并登录阿里云账户&quot;&gt;&lt;/a&gt;注册并登录阿里云账户&lt;/h4&gt;&lt;p&gt;需提前在&lt;a href=&quot;https://www.aliyun.com/&quot;&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>上传docker镜像到dockerhub实践</title>
    <link href="https://codingdgsun.github.io/2021/12/23/%E4%B8%8A%E4%BC%A0docker%E9%95%9C%E5%83%8F%E5%88%B0dockerhub%E5%AE%9E%E8%B7%B5/"/>
    <id>https://codingdgsun.github.io/2021/12/23/%E4%B8%8A%E4%BC%A0docker%E9%95%9C%E5%83%8F%E5%88%B0dockerhub%E5%AE%9E%E8%B7%B5/</id>
    <published>2021-12-23T07:24:36.000Z</published>
    <updated>2021-12-23T07:24:54.009Z</updated>
    
    <content type="html"><![CDATA[<h4 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull tomcat      //下载tomcat镜像</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/65-01.323ona7ue4s0.jpg" alt="65-01"></p><h4 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name=&quot;MyTomcat&quot; -p 8888:8080 tomcat     </span><br><span class="line">//后台方式，以外部主机端口8888映射容器端口8080，运行Tomcat，容器别名为MyTomcat</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-11.1qdl3qsvqekg.jpg" alt="63-09"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl localhost:8888     //测试访问显示404</span><br></pre></td></tr></table></figure><p><strong>此处要注意，【有坑】！</strong></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-07.6m9lxsdxl0o0.jpg" alt="63-10"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-08.3pbn6nqzv5q0.jpg" alt="63-11"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it 2dd5319e4047 /bin/bash      //进入容器</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-12.1399pww3sdyo.jpg" alt="63-12"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -r webapps.dist/* webapps      //将webapps.dist目录下的所以文件，拷贝到webapps目录</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-13.3fqizw1cu620.jpg" alt="63-13"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl localhost:8888     //测试访问显示正常</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-14.3400o668a420.jpg" alt="63-14"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-15.6jo9k4icxgg0.jpg" alt="63-15"></p><h4 id="提交生成镜像"><a href="#提交生成镜像" class="headerlink" title="提交生成镜像"></a>提交生成镜像</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker commit --help        //查看commit帮助</span><br><span class="line">        -a 作者</span><br><span class="line">        -m 提交的信息内容</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/65-02.5iznzj4pifw0.jpg" alt="65-02"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker commit -a &quot;codingdgsun&quot; -m &quot;Init tomcat webapps&quot; 08635d0f1579 sunjiedg/mytomcat:1.0.0     </span><br><span class="line">//提交镜像，作者：codingdgsun；提交的备注信息：Init tomcat webapps；提交的容器ID：08635d0f1579；</span><br><span class="line">//镜像的别名：sunjiedg/mytomcat；版本号：1.0.0</span><br></pre></td></tr></table></figure><p><strong>注意</strong>镜像的别名必须是（sunjiedg/mytomcat；版本号：1.0.0）：其中，sunjiedg是dockerhub注册的用户名（需提前在<a href="https://hub.docker.com/">dockerhub官网</a>，注册一个用户)，不然dockerhub不允许上传镜像</p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/73-03.2qwh308p7is0.png" alt="73-03"></p><h4 id="登录dockerhub"><a href="#登录dockerhub" class="headerlink" title="登录dockerhub"></a>登录dockerhub</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker login        //输入dockerhub的用户名和密码</span><br><span class="line">docker logout           //退出登录</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/73-04.6k578xy9m6c0.jpg" alt="73-04"></p><h4 id="查看dockerhub中的镜像仓库"><a href="#查看dockerhub中的镜像仓库" class="headerlink" title="查看dockerhub中的镜像仓库"></a>查看dockerhub中的镜像仓库</h4><p>需提前在<a href="https://hub.docker.com/">dockerhub官网</a>，注册一个用户<br><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/73-02.4nakesf95860.jpg" alt="73-02"></p><h4 id="上传镜像到dockerhub"><a href="#上传镜像到dockerhub" class="headerlink" title="上传镜像到dockerhub"></a>上传镜像到dockerhub</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker push sunjiedg/mytomcat:1.0.0     </span><br><span class="line">//使用命令，上传镜像到dockehub仓库，镜像的名字必须是：dockerhub注册的用户名/镜像的别名:版本号(latest)</span><br></pre></td></tr></table></figure><h4 id="镜像上传成功"><a href="#镜像上传成功" class="headerlink" title="镜像上传成功"></a>镜像上传成功</h4><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/73-05.2eksna0g8l8g.jpg" alt="73-05"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/73-06.14t00tch81uo.jpg" alt="73-06"></p><h4 id="从dockerhub下载镜像"><a href="#从dockerhub下载镜像" class="headerlink" title="从dockerhub下载镜像"></a>从dockerhub下载镜像</h4><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/73-07.gma7c6490sg.jpg" alt="73-07"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull sunjiedg/mytomcat:1.0.0</span><br><span class="line">//镜像名称为：dockerhub注册的用户名/镜像的别名:版本号(latest)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;下载镜像&quot;&gt;&lt;a href=&quot;#下载镜像&quot; class=&quot;headerlink&quot; title=&quot;下载镜像&quot;&gt;&lt;/a&gt;下载镜像&lt;/h4&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java中稀疏数组的使用</title>
    <link href="https://codingdgsun.github.io/2021/12/22/Java%E4%B8%AD%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://codingdgsun.github.io/2021/12/22/Java%E4%B8%AD%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2021-12-22T07:54:13.000Z</published>
    <updated>2021-12-22T07:54:37.769Z</updated>
    
    <content type="html"><![CDATA[<h4 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a>稀疏数组</h4><p>当一个数组中大部分元素是0，或者是一个相同的值时，可以使用稀疏数组来保存该数组。并且稀疏数组，行数为：原来数组非0元素个数+1；列数为：3。即：稀疏数组列数总是3。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">原数组总行数                原数组总列数               原数组非0元素个数</span><br><span class="line">原数组非0元素行索引         原数组非0元素列索引         原数组非0元素值</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br></pre></td></tr></table></figure><p>稀疏数组，第一行（即：0行），第一列存储原数组的总行数，第二列存储原数组的总列数，第三列存储非零元素的数量； 其他行结构相同，每一行存储一条非0元素信息。</p><blockquote><p>代码如下</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">       System.out.println(&quot;原来数组为：&quot;);</span><br><span class="line">       int[][] array1 = new int[5][6];</span><br><span class="line">       array1[1][3] = 4;</span><br><span class="line">       array1[3][4] = 6;</span><br><span class="line">       int sum = 0;//非0的元素个数</span><br><span class="line">       for (int[] arrays : array1) &#123;</span><br><span class="line">           for (int array : arrays) &#123;</span><br><span class="line">               System.out.print(array + &quot;\t&quot;);</span><br><span class="line">               if (array != 0) &#123;</span><br><span class="line">                   sum++;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           System.out.println();</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println(&quot;原来数组中，非0的元素个数为：&quot; + sum);</span><br><span class="line"></span><br><span class="line">       System.out.println(&quot;稀疏数组为：&quot;);</span><br><span class="line">       int[][] array2 = new int[sum + 1][3];//稀疏数组，sum+1行，3列</span><br><span class="line"></span><br><span class="line">       array2[0][0] = array1.length;//稀疏数组第一行第一列：原数组行数</span><br><span class="line">       array2[0][1] = array1[0].length;//稀疏数组第一行第二列：原数组列数</span><br><span class="line">       array2[0][2] = sum;//稀疏数组第一行第三列：原数组中非0的元素个数</span><br><span class="line"></span><br><span class="line">       int count = 0;//非0的元素个数，即稀疏数组所在行索引</span><br><span class="line">       for (int i = 0; i &lt; array1.length; i++) &#123;</span><br><span class="line">           for (int j = 0; j &lt; array1[i].length; j++) &#123;</span><br><span class="line">               if (array1[i][j] != 0) &#123;</span><br><span class="line">                   count++;//稀疏数组所在行索引</span><br><span class="line">                   array2[count][0] = i;//稀疏数组第count行第一列，是原数组非0的元素的所在行索引</span><br><span class="line">                   array2[count][1] = j;//稀疏数组第count行第二列，是原数组非0的元素的所在列索引</span><br><span class="line">                   array2[count][2] = array1[i][j];//稀疏数组第count行第三列，是原数组非0的元素值</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       printArray(array2);//输出稀疏数组</span><br><span class="line"></span><br><span class="line">       System.out.println(&quot;将稀疏数组还原成正常数组为：&quot;);</span><br><span class="line"></span><br><span class="line">       //定义二维数组，稀疏数组第一行第一列：原数组行数，第一行第二列：原数组列数</span><br><span class="line">       int[][] array3 = new int[array2[0][0]][array2[0][1]];//数组初始化后，每个元素都为0</span><br><span class="line">       for (int i = 1; i &lt; array2.length; i++) &#123;</span><br><span class="line">           //从稀疏数组，第二行开始遍历，即 i 为1</span><br><span class="line">           array3[array2[i][0]][array2[i][1]] = array2[i][2];//稀疏数组第i行第一列是原数组非0元素的行索引，第i行第二列是原数组非0元素的列索引，第i行第三列的值是原数组的元素值</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       printArray(array3);//输出还原后的数组</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   private static void printArray(int[][] arrays) &#123;</span><br><span class="line">       for (int[] array : arrays) &#123;</span><br><span class="line">           for (int num : array) &#123;</span><br><span class="line">               System.out.print(num + &quot;\t&quot;);</span><br><span class="line">           &#125;</span><br><span class="line">           System.out.println();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果如下</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">原来数组为：</span><br><span class="line">000000</span><br><span class="line">000400</span><br><span class="line">000000</span><br><span class="line">000060</span><br><span class="line">000000</span><br><span class="line">原来数组中，非0的元素个数为：2</span><br><span class="line">稀疏数组为：</span><br><span class="line">562</span><br><span class="line">134</span><br><span class="line">346</span><br><span class="line">将稀疏数组还原成正常数组为：</span><br><span class="line">000000</span><br><span class="line">000400</span><br><span class="line">000000</span><br><span class="line">000060</span><br><span class="line">000000</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;稀疏数组&quot;&gt;&lt;a href=&quot;#稀疏数组&quot; class=&quot;headerlink&quot; title=&quot;稀疏数组&quot;&gt;&lt;/a&gt;稀疏数组&lt;/h4&gt;&lt;p&gt;当一个数组中大部分元素是0，或者是一个相同的值时，可以使用稀疏数组来保存该数组。并且稀疏数组，行数为：原来数组非0元素个数+</summary>
      
    
    
    
    
  </entry>
  
</feed>
