<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CodingDGSun&#39;s Blog</title>
  
  
  <link href="https://codingdgsun.github.io/atom.xml" rel="self"/>
  
  <link href="https://codingdgsun.github.io/"/>
  <updated>2021-12-14T13:46:54.644Z</updated>
  <id>https://codingdgsun.github.io/</id>
  
  <author>
    <name>CodingDGSun</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>可视化图形工具Portainer</title>
    <link href="https://codingdgsun.github.io/2021/12/14/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%9B%BE%E5%BD%A2%E5%B7%A5%E5%85%B7Portainer/"/>
    <id>https://codingdgsun.github.io/2021/12/14/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%9B%BE%E5%BD%A2%E5%B7%A5%E5%85%B7Portainer/</id>
    <published>2021-12-14T13:46:22.000Z</published>
    <updated>2021-12-14T13:46:54.644Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Portainer是一个可视化的容器镜像的图形管理工具，利用Portainer可以轻松构建，管理和维护Docker环境。-而且完全免费，基于容器化的安装方式，方便高效部署。"><a href="#Portainer是一个可视化的容器镜像的图形管理工具，利用Portainer可以轻松构建，管理和维护Docker环境。-而且完全免费，基于容器化的安装方式，方便高效部署。" class="headerlink" title="Portainer是一个可视化的容器镜像的图形管理工具，利用Portainer可以轻松构建，管理和维护Docker环境。 而且完全免费，基于容器化的安装方式，方便高效部署。"></a>Portainer是一个可视化的容器镜像的图形管理工具，利用Portainer可以轻松构建，管理和维护Docker环境。 而且完全免费，基于容器化的安装方式，方便高效部署。</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8888:9000 --restart=always -v /var/run/docker.sock:/var/run/docker.sock --privileged=true portainer/portainer        //下载并运行portainer</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/64-01.30x8vniw5v80.jpg" alt="64-01"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localhost:8888       //测试查看网站</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/64-02.u4lhwlblly8.jpg" alt="64-02"></p><p>创建用户，进行登录<br><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/64-03.4hu89qjd0740.jpg" alt="64-03"></p><p>选择查看管理本地容器<br><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/64-04.rua4hm0lfyo.jpg" alt="64-04"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/64-05.4ku8t6ys1ts0.jpg" alt="64-05"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Portainer是一个可视化的容器镜像的图形管理工具，利用Portainer可以轻松构建，管理和维护Docker环境。-而且完全免费，基于容器化的安装方式，方便高效部署。&quot;&gt;&lt;a href=&quot;#Portainer是一个可视化的容器镜像的图形管理工具，利用Port</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Docker上部署服务应用</title>
    <link href="https://codingdgsun.github.io/2021/12/14/Docker%E4%B8%8A%E9%83%A8%E7%BD%B2%E6%9C%8D%E5%8A%A1%E5%BA%94%E7%94%A8/"/>
    <id>https://codingdgsun.github.io/2021/12/14/Docker%E4%B8%8A%E9%83%A8%E7%BD%B2%E6%9C%8D%E5%8A%A1%E5%BA%94%E7%94%A8/</id>
    <published>2021-12-14T08:28:52.000Z</published>
    <updated>2021-12-14T08:29:14.947Z</updated>
    
    <content type="html"><![CDATA[<h2 id="部署Nginx"><a href="#部署Nginx" class="headerlink" title="部署Nginx"></a>部署Nginx</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx       //下载Nginx镜像</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-01.6lb8u4ioxio0.jpg" alt="63-01"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name=&quot;MyNginx01&quot; -p 3090:80 nginx       //后台方式，以外部主机端口3090映射容器端口80，运行Nginx，容器别名为MyNginx01</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-02.45f082l2slc0.jpg" alt="63-02"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl localhost:3090     //在外部主机测试容器Nginx服务</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-03.3ujm0wohg6o0.jpg" alt="63-03"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-04.4trfmw30td40.jpg" alt="63-04"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it 53c01c475a1e /bin/bash      //进入容器</span><br><span class="line">whereis nginx       //查看Nginx所在位置</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-05.1sjgyqmw68m8.jpg" alt="63-05"></p><h2 id="部署Tomcat"><a href="#部署Tomcat" class="headerlink" title="部署Tomcat"></a>部署Tomcat</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --rm -p 8888:8080 tomcat:9.0     //交互方式，以外部主机端口8888映射容器端口8080，运行Tomcat。用完后，退出容器后，立即删除镜像，一般用于测试使用。</span><br><span class="line"></span><br><span class="line">ctrl + c        //退出，查看镜像，确实消失了</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-06.31g5gnccgno0.jpg" alt="63-06"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-09.3w2ulr3ovra0.jpg" alt="63-07"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull tomcat      //下载Tomcat镜像</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-10.1ucnk4ni1ssg.jpg" alt="63-08"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name=&quot;MyTomcat&quot; -p 8888:8080 tomcat     //后台方式，以外部主机端口8888映射容器端口8080，运行Tomcat，容器别名为MyTomcat</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-11.1qdl3qsvqekg.jpg" alt="63-09"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl localhost:8888     //测试访问显示404</span><br></pre></td></tr></table></figure><p><strong>此处要注意，【有坑】！</strong></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-07.6m9lxsdxl0o0.jpg" alt="63-10"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-08.3pbn6nqzv5q0.jpg" alt="63-11"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it 2dd5319e4047 /bin/bash      //进入容器</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-12.1399pww3sdyo.jpg" alt="63-12"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -r webapps.dist/* webapps      //将webapps.dist目录下的所以文件，拷贝到webapps目录</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-13.3fqizw1cu620.jpg" alt="63-13"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl localhost:8888     //测试访问显示正常</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-14.3400o668a420.jpg" alt="63-14"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-15.6jo9k4icxgg0.jpg" alt="63-15"></p><h2 id="部署Elasticsearch"><a href="#部署Elasticsearch" class="headerlink" title="部署Elasticsearch"></a>部署Elasticsearch</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name=&quot;MyElasticsearch&quot; -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; elasticsearch:7.6.2        //下载并运行elasticsearch</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-16.1j0te7c7txhc.jpg" alt="63-16"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker stats        //监控查看docker内存情况</span><br><span class="line"></span><br><span class="line">docker stats 容器Id       //监控查看指定docker内存情况</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-17.4l71mepu05m0.jpg" alt="63-17"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localhost:9200      //测试Elasticsearch</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-18.3kao0obf7060.jpg" alt="63-18"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop 17079ad436b2        //停止容器</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-19.6launorxf040.jpg" alt="63-19"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name=&quot;MyElasticsearch02&quot; -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; -e ES_JAVA_OPTS=&quot;-Xms64m -Xmx512m&quot; elasticsearch:7.6.2        //设置Elasticsearch内存限制，-e ES_JAVA_OPTS=&quot;-Xms64m -Xmx512m&quot;，最大内存512MB,最小64MB；容器别名：MyElasticsearch02</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-20.1g67t9f8xbsw.jpg" alt="63-20"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-21.59hlonf64v40.jpg" alt="63-21"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl localhost:9200     //测试正常</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-22.5husxnf3wlc0.jpg" alt="63-22"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;部署Nginx&quot;&gt;&lt;a href=&quot;#部署Nginx&quot; class=&quot;headerlink&quot; title=&quot;部署Nginx&quot;&gt;&lt;/a&gt;部署Nginx&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Docker使用入门</title>
    <link href="https://codingdgsun.github.io/2021/12/13/Docker%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/"/>
    <id>https://codingdgsun.github.io/2021/12/13/Docker%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/</id>
    <published>2021-12-13T06:43:08.000Z</published>
    <updated>2021-12-13T06:43:51.562Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker官网地址"><a href="#Docker官网地址" class="headerlink" title="Docker官网地址"></a>Docker官网地址</h2><p><a href="https://www.docker.com/">https://www.docker.com</a></p><h2 id="docker镜像常用命令"><a href="#docker镜像常用命令" class="headerlink" title="docker镜像常用命令"></a>docker镜像常用命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker version      //查看版本</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-01.415zr53dpts0.jpg" alt="62-01"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker --help       //查看帮助</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-02.kfqlz8jhytc.jpg" alt="62-02"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images --help        //查看镜像帮助</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-03.1coruy66sf5s.jpg" alt="62-03"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search --help        //查看搜索帮助</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-04.26y2x6k0v5es.jpg" alt="62-04"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search mysql     //搜索镜像，比如：mysql</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-05.36pznh0szjk0.jpg" alt="62-05"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search mysql --filter=STARTs=6000        //过滤搜索STARS大于6000的镜像</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-06.3j9g4c8p9hw0.jpg" alt="62-06"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull --help      //查看下载镜像帮助</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-07.2a0r639sx0kk.jpg" alt="62-07"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql       //下载最新镜像mysql</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-08.296iy0qqxzk0.jpg" alt="62-08"></p><p>查看<a href="https://registry.hub.docker.com/">dockerhub</a>里面的镜像版本</p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-09.5d9z3ljbxfk0.jpg" alt="62-09"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:5.7       //下载指定版本的镜像mysql，版本需在dockerhub里面存在</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-10.72nb66io24w0.jpg" alt="62-10"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-11.6k38cqtn7fk0.jpg" alt="62-11"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images       //查看镜像</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-12.92oza0qzxb.jpg" alt="62-12"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi --help      //查看删除镜像帮助</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-13.2rnnf6ca5920.jpg" alt="62-13"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images -aq       //查看所有镜像的ID</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-14.1s3bmszpg8hs.jpg" alt="62-14"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi [imageId]     //删除指定镜像</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-15.6qrs2dvzrrk0.jpg" alt="62-15"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi -f $(docker images -aq)      //删除所有镜像</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-16.2w5btq7eqa80.jpg" alt="62-16"></p><h2 id="docker容器常用命令"><a href="#docker容器常用命令" class="headerlink" title="docker容器常用命令"></a>docker容器常用命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull centos      //下载一个centos镜像</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-17.6nvpbax9gkg0.jpg" alt="62-17"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run [可选参数] image     //新建容器并启动</span><br><span class="line"></span><br><span class="line">--name=&quot;容器别名&quot;       //给容器起个别名</span><br><span class="line">-d      //后台运行</span><br><span class="line">-it     //使用交互方式运行</span><br><span class="line">-p      //指定容器端口</span><br><span class="line">    -p ip:主机端口:容器端口</span><br><span class="line">    -p 主机端口:容器端口</span><br><span class="line">    -p 容器端口</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-18.5ru73rw16i80.jpg" alt="62-18"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit        //退出容器并停止容器</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-19.579ju8xo2p40.jpg" alt="62-19"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker ps       //列出当前正在运行的容器</span><br><span class="line"></span><br><span class="line">        -a      //列出当前正在运行的容器和历史上运行过的容器</span><br><span class="line">        -n=?    //显示最近创建的容器</span><br><span class="line">        -q      //只显示容器的编号</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-20.23qkzey7f6v4.jpg" alt="62-20"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + p + q        //退出容器但不停止容器</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-21.g6mlfuvvodc.jpg" alt="62-21"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker rm 容器Id        //删除指定容器，但正在运行的，不能删除；如果强制删除需加参数 rm -f</span><br><span class="line">docker rm -f $(docker ps -aq)       //删除所有容器</span><br><span class="line"></span><br><span class="line">docker ps -aq |xargs docker rm//删除所有容器</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-22.750rz3gz2qc0.jpg" alt="62-22"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-23.6wfi24o9a500.jpg" alt="62-23"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-24.3h51fhghx0y0.jpg" alt="62-24"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器Id     //启动停止的容器</span><br><span class="line">docker restart 容器Id     //重启容器</span><br><span class="line">docker stop 容器Id     //停止正在运行的容器</span><br><span class="line">docker kill 容器Id     //强制停止容器</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-25.201y9mdlf9i8.jpg" alt="62-25"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-26.691txesdw5o0.jpg" alt="62-26"></p><h2 id="docker其他命令"><a href="#docker其他命令" class="headerlink" title="docker其他命令"></a>docker其他命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d 镜像      //启动一个镜像；如果容器启动后，发现没有提供服务，就会立即停止</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-27.6d9yhut1vac0.jpg" alt="62-27"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name=&quot;myCentOS&quot; centos /bin/bash  -c &quot;while true; do echo helloworld;sleep 1;done&quot;      //后台运行一个输出服务程序</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-28.6fht91dgbyo0.jpg" alt="62-28"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -tf --tail 5 容器Id       //查看镜像程序日志</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-29.530xjr8n1as0.jpg" alt="62-29"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker top 容器Id     //查看容器内部的进程信息</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-30.44tce0hx0y20.jpg" alt="62-30"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect 容器Id       //查看容器的元数据</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-31.6cqxfsjsdeo.jpg" alt="62-31"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it 容器Id /bin/bash      //进入正在运行的容器，开启一个新的终端，可以在里面进行操作</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-32.21365yeowiow.jpg" alt="62-32"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker attach 容器Id        //进入容器正在执行的终端，不会启动新的进程</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-33.xtthcqm0we8.jpg" alt="62-33"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-34.5ybgibnh4d80.jpg" alt="62-34"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp 447ff6c195c3:/home/helloworld.txt /Users/sunjie/Desktop       //将容器里面的文件拷贝到宿主机</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-35.6qotq3sog340.jpg" alt="62-35"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Docker官网地址&quot;&gt;&lt;a href=&quot;#Docker官网地址&quot; class=&quot;headerlink&quot; title=&quot;Docker官网地址&quot;&gt;&lt;/a&gt;Docker官网地址&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.docker.com/&quot;&gt;http</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Windows上Dos命令操作文件及文件夹</title>
    <link href="https://codingdgsun.github.io/2021/07/29/Windows%E4%B8%8ADos%E5%91%BD%E4%BB%A4%E6%93%8D%E4%BD%9C%E6%96%87%E4%BB%B6%E5%8F%8A%E6%96%87%E4%BB%B6%E5%A4%B9/"/>
    <id>https://codingdgsun.github.io/2021/07/29/Windows%E4%B8%8ADos%E5%91%BD%E4%BB%A4%E6%93%8D%E4%BD%9C%E6%96%87%E4%BB%B6%E5%8F%8A%E6%96%87%E4%BB%B6%E5%A4%B9/</id>
    <published>2021-07-29T05:42:43.000Z</published>
    <updated>2021-07-29T05:43:01.791Z</updated>
    
    <content type="html"><![CDATA[<h2 id="打开cmd命令提示符窗口"><a href="#打开cmd命令提示符窗口" class="headerlink" title="打开cmd命令提示符窗口"></a>打开cmd命令提示符窗口</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><ul><li>键盘Windows键 + R键，两个键一起按，打开“运行”窗口</li><li>在打开的“运行”窗口中输入“cmd”，再按下键盘“回车”键即可<br><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/01%E8%BF%90%E8%A1%8C.4ixiloh5ka68.jpg" alt="01运行"></li></ul><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><ul><li>在电脑桌面空白处，按住键盘Shift键+鼠标右键，两个键一起按,右击后选择“在此处打开窗口命令”</li></ul><hr><p>新建文件夹“a”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">md a</span><br></pre></td></tr></table></figure><p>删除文件夹“a”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rd a</span><br></pre></td></tr></table></figure><p>新建空的文本文件“a.txt”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy nul a.txt</span><br></pre></td></tr></table></figure><p>新建有内容的文本文件“b.txt”，并在结尾处，按回车键，之后输入“你好”内容，按“Ctrl+Z”键盘组合键结束</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">copy con b.txt</span><br><span class="line">你好</span><br></pre></td></tr></table></figure><p>查看文本文件“b.txt”内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type b.txt</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/29_01.5vrzh34pd4lc.png" alt="29_01"></p><hr><p>删除文件夹“aa”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rd aa /s</span><br></pre></td></tr></table></figure><p>删除文件“a.txt”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">del a.txt</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/29_02.1cbz1kzfvelc.jpg" alt="29_02"></p><hr><p>拷贝文件“b.txt”到指定目录“aa”下，并重命名为“1.txt”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy b.txt aa\1.txt</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/29_03.rbrps1t6fc0.jpg" alt="29_03"></p><hr><p>删除文件夹“aa”下的所有文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">del aa</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/29_04.6aql0881i8w0.jpg" alt="29_04"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;打开cmd命令提示符窗口&quot;&gt;&lt;a href=&quot;#打开cmd命令提示符窗口&quot; class=&quot;headerlink&quot; title=&quot;打开cmd命令提示符窗口&quot;&gt;&lt;/a&gt;打开cmd命令提示符窗口&lt;/h2&gt;&lt;h3 id=&quot;方法一&quot;&gt;&lt;a href=&quot;#方法一&quot; class</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java输出日历</title>
    <link href="https://codingdgsun.github.io/2021/07/18/Java%E8%BE%93%E5%87%BA%E6%97%A5%E5%8E%86/"/>
    <id>https://codingdgsun.github.io/2021/07/18/Java%E8%BE%93%E5%87%BA%E6%97%A5%E5%8E%86/</id>
    <published>2021-07-18T00:18:55.000Z</published>
    <updated>2021-07-18T00:19:13.532Z</updated>
    
    <content type="html"><![CDATA[<p><strong>使用键盘输入日期，输出当月日历</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        Scanner sc = new Scanner(System.in);</span><br><span class="line">        System.out.println(&quot;请输入日期，比如：2021-06-18&quot;);</span><br><span class="line">        String strDate = sc.next();//接收用户输入的日期</span><br><span class="line">        //System.out.println(&quot;日期是：&quot; + strDate);//输出日期</span><br><span class="line">        System.out.println(&quot;日\t一\t二\t三\t四\t五\t六&quot;);</span><br><span class="line">        java.sql.Date date = java.sql.Date.valueOf(strDate);//将字符串日期strDate转换成java.sql.Date</span><br><span class="line">        Calendar calendar = Calendar.getInstance();//声明日历类，方式一</span><br><span class="line">        //Calendar calendar = new GregorianCalendar();//声明日历类，方式二</span><br><span class="line">        calendar.setTime(date);//设置日期</span><br><span class="line">        //System.out.println(calendar);</span><br><span class="line">        int maxDate = calendar.getActualMaximum(Calendar.DATE);//获取当月最大天数，比如6月有30天，7月有31天</span><br><span class="line">        int day = calendar.get(Calendar.DATE);//获取当前日</span><br><span class="line">        calendar.set(Calendar.DATE, 1);//设置当前日为1号</span><br><span class="line">        int num = calendar.get(Calendar.DAY_OF_WEEK);//获取1号是一周中的第几天，比如周日是一周中的第1天</span><br><span class="line">        int count = num - 1;//计数器，每7天输出换行，包括输出的空区域num-1</span><br><span class="line">        for (int i = 1; i &lt; num; i++) &#123;</span><br><span class="line">            //输入num个空区域,比如1号是第一周的中的第3天，则1号是周二，前面应该输出2个空区域</span><br><span class="line">            System.out.print(&quot;\t&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        for (int i = 1; i &lt;= maxDate; i++) &#123;</span><br><span class="line">            if (day == i) &#123;//如果是当前日，则用*标注</span><br><span class="line">                System.out.print(i + &quot;*\t&quot;);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                System.out.print(i + &quot;\t&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            count++;</span><br><span class="line">            if (count % 7 == 0) &#123;</span><br><span class="line">                //count计数器，每7个换行</span><br><span class="line">                System.out.println();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><p>输出结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">请输入日期，比如：2021-06-18</span><br><span class="line">2021-07-18</span><br><span class="line">日一二三四五六</span><br><span class="line">123</span><br><span class="line">45678910</span><br><span class="line">11121314151617</span><br><span class="line">18*192021222324</span><br><span class="line">25262728293031</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;使用键盘输入日期，输出当月日历&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;b</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java输出形状</title>
    <link href="https://codingdgsun.github.io/2021/07/11/Java%E8%BE%93%E5%87%BA%E5%BD%A2%E7%8A%B6/"/>
    <id>https://codingdgsun.github.io/2021/07/11/Java%E8%BE%93%E5%87%BA%E5%BD%A2%E7%8A%B6/</id>
    <published>2021-07-11T11:14:48.000Z</published>
    <updated>2021-07-11T11:15:06.941Z</updated>
    
    <content type="html"><![CDATA[<p><strong>输出矩形</strong></p><p>以此矩形案例（4行，9列的矩形）为例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        //输出矩形</span><br><span class="line">        for (int i = 1; i &lt;= 4; i++) &#123;//控制行，即4行</span><br><span class="line">            for (int j = 1; j &lt;= 9; j++) &#123;//控制输出的*的个数，每行9个</span><br><span class="line">                System.out.print(&quot;*&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            //换行</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//输出结果</span><br><span class="line">*********</span><br><span class="line">*********</span><br><span class="line">*********</span><br><span class="line">*********</span><br></pre></td></tr></table></figure><hr><p><strong>前面有空格的矩形</strong></p><p>以此矩形案例（4行，9列的矩形）为例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        //输出前面有空格矩形</span><br><span class="line">        for (int i = 1; i &lt;= 4; i++) &#123;//控制行，即4行</span><br><span class="line">            //输出空格</span><br><span class="line">            for (int k = 1; k &lt;= 5; k++) &#123;//控制空格，即每行开始输出5个空格</span><br><span class="line">                System.out.print(&quot; &quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            for (int j = 1; j &lt;= 9; j++) &#123;//控制输出的*的个数，每行9个</span><br><span class="line">                System.out.print(&quot;*&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            //换行</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//输出结果</span><br><span class="line">     *********</span><br><span class="line">     *********</span><br><span class="line">     *********</span><br><span class="line">     *********</span><br></pre></td></tr></table></figure><hr><p><strong>输出平行四边形</strong></p><p>以此矩形案例（4行，9列的矩形）为例，要变成平行四边形</p><ul><li>第一行前面输出8个空格</li><li>第二行前面输出7个空格</li><li>第三行前面输出6个空格</li><li>第四行前面输出5个空格</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   ********* 1 8</span><br><span class="line">  ********* 2 7</span><br><span class="line"> ********* 3 6</span><br><span class="line">********* 4 5</span><br></pre></td></tr></table></figure><p><strong>综上所述，得出规律：行数+空格数=9</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        //输出平行四边形</span><br><span class="line">        for (int i = 1; i &lt;= 4; i++) &#123;//控制行，即4行</span><br><span class="line">            //输出空格</span><br><span class="line">            for (int k = 1; k &lt;= 9 - i; k++) &#123;//控制空格，行数+空格数=9，即每行开始输出9-i个空格</span><br><span class="line">                System.out.print(&quot; &quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            for (int j = 1; j &lt;= 5; j++) &#123;//控制输出的*的个数，每行5个</span><br><span class="line">                System.out.print(&quot;*&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            //换行</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//输出结果：</span><br><span class="line">        *****</span><br><span class="line">       *****</span><br><span class="line">      *****</span><br><span class="line">     *****</span><br></pre></td></tr></table></figure><hr><p><strong>输出三角形</strong></p><p>以此案例（4行）为例，要变成三角形</p><ul><li>第一行前面输出8个空格，1个星</li><li>第二行前面输出7个空格，3个星</li><li>第三行前面输出6个空格，5个星</li><li>第四行前面输出5个空格，7个星</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   * 1 8 1</span><br><span class="line">  *** 2 7 3</span><br><span class="line"> ***** 3 6 5</span><br><span class="line">******* 4 5 7</span><br></pre></td></tr></table></figure><p><strong>综上所述，得出规律：行数+空格数=9，2x行数-1=星的个数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        //输出三角形</span><br><span class="line">        for (int i = 1; i &lt;= 4; i++) &#123;//控制行，即4行</span><br><span class="line">            //输出空格</span><br><span class="line">            for (int k = 1; k &lt;= 9 - i; k++) &#123;//控制空格，行数+空格数=9，即每行开始输出9-i个空格</span><br><span class="line">                System.out.print(&quot; &quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            for (int j = 1; j &lt;= 2 * i - 1; j++) &#123;//控制输出的*的个数，2x行数-1=星的个数，即每行2 * i -1个星</span><br><span class="line">                System.out.print(&quot;*&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            //换行</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//输出结果：</span><br><span class="line">        *</span><br><span class="line">       ***</span><br><span class="line">      *****</span><br><span class="line">     *******</span><br></pre></td></tr></table></figure><hr><p><strong>输出菱形</strong></p><p>此案例由上面三角形（4行）和下面倒三角形（3行）组合，变成菱形</p><p>上面三角形</p><ul><li>第一行前面输出8个空格，1个星</li><li>第二行前面输出7个空格，3个星</li><li>第三行前面输出6个空格，5个星</li><li>第四行前面输出5个空格，7个星</li></ul><p>下面倒三角形</p><ul><li>第一行前面输出6个空格，5个星</li><li>第二行前面输出7个空格，3个星</li><li>第三行前面输出8个空格，1个星<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   * 1 8 1</span><br><span class="line">  *** 2 7 3</span><br><span class="line"> ***** 3 6 5</span><br><span class="line">******* 4 5 7</span><br><span class="line"> *****   1 6 5</span><br><span class="line">  ***     2 7 3</span><br><span class="line">   *       3 8 1</span><br></pre></td></tr></table></figure></li></ul><p><strong>综上所述，得出规律：上面三角形，行数+空格数=9，2x行数-1=星的个数；下面倒三角形，行数+5=空格数，7-2x行数=星的个数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        //输出上面三角形</span><br><span class="line">        for (int i = 1; i &lt;= 4; i++) &#123;//控制行，即4行</span><br><span class="line">            //输出空格</span><br><span class="line">            for (int k = 1; k &lt;= 9 - i; k++) &#123;//控制空格，行数+空格数=9，即每行开始输出9-i个空格</span><br><span class="line">                System.out.print(&quot; &quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            for (int j = 1; j &lt;= 2 * i - 1; j++) &#123;//控制输出的*的个数，2x行数-1=星的个数，即每行2 * i -1个星</span><br><span class="line">                System.out.print(&quot;*&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            //换行</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //输出下面倒三角形</span><br><span class="line">        for (int i = 1; i &lt;= 3; i++) &#123;//控制行，即3行</span><br><span class="line">            //输出空格</span><br><span class="line">            for (int k = 1; k &lt;= i + 5; k++) &#123;//控制空格，行数+5=空格数，即每行开始输出i+5个空格</span><br><span class="line">                System.out.print(&quot; &quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            for (int j = 1; j &lt;= 7 - 2 * i; j++) &#123;//控制输出的*的个数，7-2x行数=星的个数，即每行7 - 2 * i个星</span><br><span class="line">                System.out.print(&quot;*&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            //换行</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//输出结果：</span><br><span class="line">        *</span><br><span class="line">       ***</span><br><span class="line">      *****</span><br><span class="line">     *******</span><br><span class="line">      *****</span><br><span class="line">       ***</span><br><span class="line">        *</span><br></pre></td></tr></table></figure><hr><p><strong>输出空心菱形</strong></p><p>此案例由上面三角形（4行）和下面倒三角形（3行）组合，变成菱形，中间星形由空格代替</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   * </span><br><span class="line">  * * </span><br><span class="line"> *   * </span><br><span class="line">*     * </span><br><span class="line"> *   *   </span><br><span class="line">  * *     </span><br><span class="line">   *       </span><br></pre></td></tr></table></figure><p><strong>得出规律：在输出星的地方，每行第一个和最后一个输出星，其余输出空格</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"> public static void main(String[] args) &#123;</span><br><span class="line">        //输出上面三角形</span><br><span class="line">        for (int i = 1; i &lt;= 4; i++) &#123;//控制行，即4行</span><br><span class="line">            //输出空格</span><br><span class="line">            for (int k = 1; k &lt;= 9 - i; k++) &#123;//控制空格，行数+空格数=9，即每行开始输出9-i个空格</span><br><span class="line">                System.out.print(&quot; &quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            for (int j = 1; j &lt;= 2 * i - 1; j++) &#123;//控制输出的*的个数，2x行数-1=星的个数，即每行2 * i -1个星</span><br><span class="line">                //在首和尾输出星，其余输出空格</span><br><span class="line">                if (j == 1 || j == 2 * i - 1) &#123;</span><br><span class="line">                    System.out.print(&quot;*&quot;);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    System.out.print(&quot; &quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            //换行</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //输出下面倒三角形</span><br><span class="line">        for (int i = 1; i &lt;= 3; i++) &#123;//控制行，即3行</span><br><span class="line">            //输出空格</span><br><span class="line">            for (int k = 1; k &lt;= i + 5; k++) &#123;//控制空格，行数+5=空格数，即每行开始输出i+5个空格</span><br><span class="line">                System.out.print(&quot; &quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            for (int j = 1; j &lt;= 7 - 2 * i; j++) &#123;//控制输出的*的个数，7-2x行数=星的个数，即每行7 - 2 * i个星</span><br><span class="line">                //在首和尾输出星，其余输出空格</span><br><span class="line">                if (j == 1 || j == 7 - 2 * i) &#123;</span><br><span class="line">                    System.out.print(&quot;*&quot;);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    System.out.print(&quot; &quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            //换行</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//输出结果：</span><br><span class="line">        *</span><br><span class="line">       * *</span><br><span class="line">      *   *</span><br><span class="line">     *     *</span><br><span class="line">      *   *</span><br><span class="line">       * *</span><br><span class="line">        *</span><br></pre></td></tr></table></figure><hr><p><strong>输出正方形</strong></p><p>以此案例（5行，5列的正方形）为例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        //输出正方形</span><br><span class="line">        int len = 5;//正方形边长</span><br><span class="line">        for (int i = 1; i &lt;= len; i++) &#123;//控制行，即4行</span><br><span class="line">            for (int j = 1; j &lt;= len; j++) &#123;//输出星，即每行输出j个星</span><br><span class="line">                System.out.print(&quot;*&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            //换行</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//输出结果：</span><br><span class="line">*****</span><br><span class="line">*****</span><br><span class="line">*****</span><br><span class="line">*****</span><br><span class="line">*****</span><br></pre></td></tr></table></figure><hr><p><strong>输出实心菱形</strong></p><p>以此案例（5行，5列）为例</p><ul><li>第一行第一个和最后一个星的位置是3和3</li><li>第二行第一个和最后一个星的位置是2和4</li><li>第三行第一个和最后一个星的位置是1和5</li><li>第四行第一个和最后一个星的位置是2和4</li><li>第五行第一个和最后一个星的位置是3和3</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  *  1 3 3</span><br><span class="line"> ***  2 2 4</span><br><span class="line">*****  3 1 5</span><br><span class="line"> ***    4 2 4 </span><br><span class="line">  *      5 3 3 </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        //输出实心菱形</span><br><span class="line">        int len = 5;//边长</span><br><span class="line">        int first = len / 2 + 1;//开始输出星的位置</span><br><span class="line">        int end = len / 2 + 1;//结束输出星的位置</span><br><span class="line">        boolean flag = true;//如果是上半部三角形则是true，如果是下半倒三角形则是false</span><br><span class="line"></span><br><span class="line">        for (int i = 1; i &lt;= len; i++) &#123;//控制行，即4行</span><br><span class="line">            for (int j = 1; j &lt;= len; j++) &#123;//输出星，即每行输出j个星</span><br><span class="line">                if (j &gt;= first &amp;&amp; j &lt;= end) &#123;//在每行的起始至结束位置输出星</span><br><span class="line">                    System.out.print(&quot;*&quot;);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    System.out.print(&quot; &quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            //换行</span><br><span class="line">            System.out.println();</span><br><span class="line"></span><br><span class="line">            if(end == len)&#123;//最后一个星位置是边长宽度</span><br><span class="line">                flag = false;//下一行，马上执行下半部倒三角形</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if(flag)&#123;</span><br><span class="line">                //在上半三角形，开始输出星的位置first前移1，结束输出星的位置end后移1</span><br><span class="line">                first--;</span><br><span class="line">                end++;</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                //在下半倒三角形，开始输出星的位置first后移1，结束输出星的位置end前移1</span><br><span class="line">                first++;</span><br><span class="line">                end--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//输出结果：</span><br><span class="line">  *  </span><br><span class="line"> *** </span><br><span class="line">*****</span><br><span class="line"> *** </span><br><span class="line">  *  </span><br></pre></td></tr></table></figure><p>如果想输出空心菱形则只需要将：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (j &gt;= first &amp;&amp; j &lt;= end)</span><br></pre></td></tr></table></figure><p>改成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (j == first || j == end)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;输出矩形&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以此矩形案例（4行，9列的矩形）为例&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java输出九九乘法表</title>
    <link href="https://codingdgsun.github.io/2021/07/11/Java%E8%BE%93%E5%87%BA%E4%B9%9D%E4%B9%9D%E4%B9%98%E6%B3%95%E8%A1%A8/"/>
    <id>https://codingdgsun.github.io/2021/07/11/Java%E8%BE%93%E5%87%BA%E4%B9%9D%E4%B9%9D%E4%B9%98%E6%B3%95%E8%A1%A8/</id>
    <published>2021-07-11T11:13:27.000Z</published>
    <updated>2021-07-11T11:13:52.225Z</updated>
    
    <content type="html"><![CDATA[<p><strong>使用For嵌套循环输出九九乘法表</strong><br><strong>正序输出</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        /**</span><br><span class="line">         //先输出两行，找找规律</span><br><span class="line">         for (int i = 1; i &lt;= 6; i++) &#123;</span><br><span class="line">         System.out.print(i + &quot;* 6 =&quot; + i * 6 + &quot;\t&quot;);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         System.out.println();</span><br><span class="line"></span><br><span class="line">         for (int i = 1; i &lt;= 7; i++) &#123;</span><br><span class="line">         System.out.print(i + &quot;* 7 =&quot; + i * 7 + &quot;\t&quot;);</span><br><span class="line">         &#125;</span><br><span class="line">         */</span><br><span class="line"></span><br><span class="line">        for (int i = 1; i &lt;= 9; i++) &#123;//外循环控制行，从1至9行</span><br><span class="line">            for (int j = 1; j &lt;= i; j++) &#123;//内循环控制列，依次遍历到i的值，即每行i个等式个数</span><br><span class="line">                System.out.print(j + &quot;*&quot; + i + &quot;=&quot; + i * j + &quot;\t&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//输出结果：</span><br><span class="line">/**</span><br><span class="line">1*1=1</span><br><span class="line">1*2=22*2=4</span><br><span class="line">1*3=32*3=63*3=9</span><br><span class="line">1*4=42*4=83*4=124*4=16</span><br><span class="line">1*5=52*5=103*5=154*5=205*5=25</span><br><span class="line">1*6=62*6=123*6=184*6=245*6=306*6=36</span><br><span class="line">1*7=72*7=143*7=214*7=285*7=356*7=427*7=49</span><br><span class="line">1*8=82*8=163*8=244*8=325*8=406*8=487*8=568*8=64</span><br><span class="line">1*9=92*9=183*9=274*9=365*9=456*9=547*9=638*9=729*9=81</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><hr><p><strong>逆序输出</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        //先输出两行，找找规律</span><br><span class="line">        /**</span><br><span class="line">         for (int i = 1; i &lt;= 7; i++) &#123;</span><br><span class="line">         System.out.print(i + &quot;* 7 =&quot; + i * 7 + &quot;\t&quot;);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         System.out.println();</span><br><span class="line"></span><br><span class="line">         for (int i = 1; i &lt;= 6; i++) &#123;</span><br><span class="line">         System.out.print(i + &quot;* 6 =&quot; + i * 6 + &quot;\t&quot;);</span><br><span class="line">         &#125;</span><br><span class="line">         */</span><br><span class="line"></span><br><span class="line">        for (int i = 9; i &gt;= 1; i--) &#123;//外循环控制行，从9至1行</span><br><span class="line">            for (int j = 1; j &lt;= i; j++) &#123;//内循环控制列，依次遍历到i的值，即每行等式个数</span><br><span class="line">                System.out.print(j + &quot;*&quot; + i + &quot;=&quot; + i * j + &quot;\t&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//输出结果：</span><br><span class="line">/**</span><br><span class="line">1*9=92*9=183*9=274*9=365*9=456*9=547*9=638*9=729*9=81</span><br><span class="line">1*8=82*8=163*8=244*8=325*8=406*8=487*8=568*8=64</span><br><span class="line">1*7=72*7=143*7=214*7=285*7=356*7=427*7=49</span><br><span class="line">1*6=62*6=123*6=184*6=245*6=306*6=36</span><br><span class="line">1*5=52*5=103*5=154*5=205*5=25</span><br><span class="line">1*4=42*4=83*4=124*4=16</span><br><span class="line">1*3=32*3=63*3=9</span><br><span class="line">1*2=22*2=4</span><br><span class="line">1*1=1</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;使用For嵌套循环输出九九乘法表&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;正序输出&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;sp</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java中try、catch、finally执行顺序</title>
    <link href="https://codingdgsun.github.io/2021/07/08/Java%E4%B8%ADtry%E3%80%81catch%E3%80%81finally%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/"/>
    <id>https://codingdgsun.github.io/2021/07/08/Java%E4%B8%ADtry%E3%80%81catch%E3%80%81finally%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/</id>
    <published>2021-07-08T05:50:10.000Z</published>
    <updated>2021-07-08T05:50:25.997Z</updated>
    
    <content type="html"><![CDATA[<p><strong>try、catch和finally</strong></p><ul><li>try块：用于捕获异常。<ul><li>后面可以有0个或多个catch块。</li><li>只能有0个或1个finally块。</li><li>try块后面，如果没有catch块，则后面必须有一个finally块。</li><li>执行代码捕获异常后，进入catch块，try中出现异常代码处后面的代码不会再继续执行。</li></ul></li><li>catch块：用于处理处理try中捕获的异常。<ul><li>可以有多个catch块，进入一个catch块后，执行完毕后，如果有finally块，则进入finally块。即使后面还有catch块，也不会再进入其他catch块。</li></ul></li><li>finally块：无论是否捕获或处理异常，finally块中的代码都会被执行。<ul><li>当try块中或者catch块中遇到return语句时，先执行完finally里面的代码后，再执行return返回语句。</li></ul></li></ul><hr><p><strong>可以有多个catch块，并且try块后面，只能有0个或1个finally块</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        System.out.println(&quot;try...&quot;);</span><br><span class="line">    &#125;catch (ArithmeticException e)&#123;</span><br><span class="line">        System.out.println(&quot;ArithmeticException...&quot;);</span><br><span class="line">    &#125;catch (NullPointerException e)&#123;</span><br><span class="line">        System.out.println(&quot;NullPointerException...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    finally &#123;</span><br><span class="line">        System.out.println(&quot;finally...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//输出结果：</span><br><span class="line">//try...</span><br><span class="line">//finally...</span><br></pre></td></tr></table></figure><hr><p><strong>try块后面，如果没有catch块，则后面必须有一个finally</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        System.out.println(&quot;try...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    finally &#123;</span><br><span class="line">        System.out.println(&quot;finally...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//输出结果：</span><br><span class="line">//try...</span><br><span class="line">//finally...</span><br></pre></td></tr></table></figure><hr><p><strong>执行代码捕获异常后，进入catch块，try中出现异常代码处后面的代码不会再继续执行</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        System.out.println(&quot;try...&quot;);</span><br><span class="line">        int a = 0;</span><br><span class="line">        String str = null;</span><br><span class="line">        System.out.println(str.toString());</span><br><span class="line">        a = a / 0;</span><br><span class="line">    &#125; catch (ArithmeticException e) &#123;</span><br><span class="line">        System.out.println(&quot;ArithmeticException...&quot;);</span><br><span class="line">    &#125; catch (NullPointerException e) &#123;</span><br><span class="line">        System.out.println(&quot;NullPointerException...&quot;);</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        System.out.println(&quot;finally...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//输出结果：</span><br><span class="line">//try...</span><br><span class="line">//NullPointerException...</span><br><span class="line">//finally...</span><br></pre></td></tr></table></figure><hr><p><strong>当try块中或者catch块中遇到return语句时，先执行完finally里面的代码后，再执行return返回语句。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        System.out.println(&quot;try...&quot;);</span><br><span class="line">        return;</span><br><span class="line">    &#125; catch (ArithmeticException e) &#123;</span><br><span class="line">        System.out.println(&quot;ArithmeticException...&quot;);</span><br><span class="line">    &#125; catch (NullPointerException e) &#123;</span><br><span class="line">        System.out.println(&quot;NullPointerException...&quot;);</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        System.out.println(&quot;finally...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//输出结果：</span><br><span class="line">//try...</span><br><span class="line">//finally...</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        System.out.println(&quot;try...&quot;);</span><br><span class="line">        int a = 0;</span><br><span class="line">        a = a / 0;</span><br><span class="line">    &#125; catch (ArithmeticException e) &#123;</span><br><span class="line">        System.out.println(&quot;ArithmeticException...&quot;);</span><br><span class="line">        return;</span><br><span class="line">    &#125; catch (NullPointerException e) &#123;</span><br><span class="line">        System.out.println(&quot;NullPointerException...&quot;);</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        System.out.println(&quot;finally...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//输出结果：</span><br><span class="line">//try...</span><br><span class="line">//ArithmeticException...</span><br><span class="line">//finally...</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;try、catch和finally&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;try块：用于捕获异常。&lt;ul&gt;
&lt;li&gt;后面可以有0个或多个catch块。&lt;/li&gt;
&lt;li&gt;只能有0个或1个finally块。&lt;/li&gt;
&lt;li&gt;try块后面，如果没有cat</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java中Error和Exception</title>
    <link href="https://codingdgsun.github.io/2021/07/08/Java%E4%B8%ADError%E5%92%8CException/"/>
    <id>https://codingdgsun.github.io/2021/07/08/Java%E4%B8%ADError%E5%92%8CException/</id>
    <published>2021-07-08T05:48:44.000Z</published>
    <updated>2021-07-08T05:52:25.882Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Error和Exception区别：</strong></p><ul><li>Error：程序无法处理的错误</li><li>Exception：程序本身可以处理的异常</li></ul><p><strong>PantUML语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A &lt;|-- B //B继承A</span><br><span class="line">C &lt;|... D //D实现了C</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line"></span><br><span class="line">interface Serializable&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">class Throwable&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">class Exception&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">class Error&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">class IOError&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">abstract class VirtualMachineError&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">class AWTError&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">class StackOverflowError&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">class OutOfMemoryError&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">class IOException&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">class RuntimeException&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">class ReflectiveOperationException&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">class ClassNotFoundException&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">class EOFException&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">class FileNotFoundException&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">class ArithmeticException&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">class MissingResourceException&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">class NullPointerException&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">class IllegalArgumentException&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">class IndexOutOfBoundsException&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">class ArrayIndexOutOfBoundsException&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">class UnknownEntityException&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">class UnknownTypeException&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">Serializable &lt;|.. Throwable</span><br><span class="line"></span><br><span class="line">Throwable &lt;|-- Exception</span><br><span class="line">Throwable &lt;|-- Error</span><br><span class="line"></span><br><span class="line">Error &lt;|-- IOError</span><br><span class="line">Error &lt;|-- VirtualMachineError</span><br><span class="line">Error &lt;|-- AWTError</span><br><span class="line"></span><br><span class="line">VirtualMachineError &lt;|-- StackOverflowError</span><br><span class="line">VirtualMachineError &lt;|-- OutOfMemoryError</span><br><span class="line"></span><br><span class="line">Exception &lt;|-- IOException</span><br><span class="line">Exception &lt;|-- RuntimeException</span><br><span class="line">Exception &lt;|-- ReflectiveOperationException</span><br><span class="line"></span><br><span class="line">ReflectiveOperationException &lt;|-- ClassNotFoundException</span><br><span class="line"></span><br><span class="line">IOException &lt;|-- EOFException</span><br><span class="line">IOException &lt;|-- FileNotFoundException</span><br><span class="line"></span><br><span class="line">RuntimeException &lt;|-- ArithmeticException</span><br><span class="line">RuntimeException &lt;|-- MissingResourceException</span><br><span class="line">RuntimeException &lt;|-- NullPointerException</span><br><span class="line">RuntimeException &lt;|-- IllegalArgumentException</span><br><span class="line">RuntimeException &lt;|-- IndexOutOfBoundsException</span><br><span class="line">RuntimeException &lt;|-- UnknownEntityException</span><br><span class="line"></span><br><span class="line">UnknownEntityException &lt;|-- UnknownTypeException</span><br><span class="line"></span><br><span class="line">IndexOutOfBoundsException &lt;|-- ArrayIndexOutOfBoundsException</span><br><span class="line"></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><p><strong>Java中异常类关系图，UML关系图如下所示</strong></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/24_01.58dx5wnt5e9s.png" alt="24_01"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;Error和Exception区别：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Error：程序无法处理的错误&lt;/li&gt;
&lt;li&gt;Exception：程序本身可以处理的异常&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;PantUML语法&lt;/strong&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java中的传递是值传递</title>
    <link href="https://codingdgsun.github.io/2021/07/07/Java%E4%B8%AD%E7%9A%84%E4%BC%A0%E9%80%92%E6%98%AF%E5%80%BC%E4%BC%A0%E9%80%92/"/>
    <id>https://codingdgsun.github.io/2021/07/07/Java%E4%B8%AD%E7%9A%84%E4%BC%A0%E9%80%92%E6%98%AF%E5%80%BC%E4%BC%A0%E9%80%92/</id>
    <published>2021-07-07T09:20:07.000Z</published>
    <updated>2021-07-07T09:20:34.927Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Java中的参数类型</strong></p><ul><li>形式参数，即形参</li><li>实际参数，即实参</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        int i = 0;</span><br><span class="line">        run(i);//变量 i 即实际参数</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">public static void run(int a) &#123;//变量 a 即形式参数</span><br><span class="line">    System.out.println(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Java中的两种参数传递情况</strong></p><ul><li>值传递：指在进行函数方法调用时，将实际参数复制一份到函数方法内，在函数方法内对参数进行的修改操作，将不会影响到实际参数，则称为【值传递】。</li><li>引用传递：指在进行函数方法调用时，将实际参数的地址引用直接传递到函数方法内，在函数方法内对参数进行的修改，将影响到实际参数，则称为【引用传递】。</li></ul><hr><p><strong>案例一：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        int i = 0;</span><br><span class="line">        run(i);//变量 i 即实际参数</span><br><span class="line">        System.out.println(i);//结果是：0</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">public static void run(int a) &#123;//变量 a 即形式参数</span><br><span class="line">    a = 10;</span><br><span class="line">    System.out.println(a);//结果是：10</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>变量i，初始值是：0，以实际参数传递给方法run后，在方法体内对变量进行了修改，最终再次输出变量i，依旧是原值：0。即，符合第一种参数传递情况：【值传递】。</strong></p><p><strong>案例二：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        String msg = &quot;hello world&quot;;</span><br><span class="line">        run(msg);</span><br><span class="line">        System.out.println(msg);//结果是：hello world</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">public static void run(String str)&#123;</span><br><span class="line">    str = new String(&quot;haha&quot;);//效果等同于：str = &quot;haha&quot;;</span><br><span class="line">    System.out.println(str);//结果是：haha</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>变量msg，初始值是：hello world，以实际参数传递给方法run后，在方法体内对变量进行了修改，最终再次输出变量msg，依旧是原值：hello world。即，符合第一种参数传递情况：【值传递】。</strong></p><p><strong>案例三：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        Student stu = new Student(&quot;张三&quot;, 7);</span><br><span class="line">        System.out.println(stu);//此案例输出结果：com.study.demo13.ArgsTest$Student@23fc625e</span><br><span class="line">        run(stu);</span><br><span class="line">        System.out.println(stu);//此案例输出结果：com.study.demo13.ArgsTest$Student@23fc625e</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">public static void run(Student student) &#123;</span><br><span class="line">    student = new Student();</span><br><span class="line">    student.setName(&quot;王五&quot;);</span><br><span class="line">    student.setAge(12);</span><br><span class="line">    System.out.println(student);//此案例输出结果：com.study.demo13.ArgsTest$Student@3f99bd52</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static class Student &#123;</span><br><span class="line">    public String name;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    public Student() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Student(String name, int age) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>对象stu，以实际参数传递给方法run后，在方法体内对对象进行了修改，最终再次输出对象stu，依旧是原对象的引用地址。即，符合第一种参数传递情况：【值传递】。</strong></p><hr><p><strong>总结：</strong><br><strong>Java中的参数传递是值传递。</strong></p><p>判断实参内容是否发生变化，判断依据是，主要看参数传递的是什么，如果参数传递的是引用地址，则查看执行方法函数，实参前后的地址是否发生变化。</p><p>案例三中，实参对象前后的引用地址没有变化，则传递的参数是值传递。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;Java中的参数类型&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;形式参数，即形参&lt;/li&gt;
&lt;li&gt;实际参数，即实参&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java中的反射</title>
    <link href="https://codingdgsun.github.io/2021/07/06/Java%E4%B8%AD%E7%9A%84%E5%8F%8D%E5%B0%84/"/>
    <id>https://codingdgsun.github.io/2021/07/06/Java%E4%B8%AD%E7%9A%84%E5%8F%8D%E5%B0%84/</id>
    <published>2021-07-06T05:59:27.000Z</published>
    <updated>2021-07-06T06:22:31.038Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Java反射机制，是在程序的运行过程中，对于任何一个类，都能够知道它的所有属性和方法。对于任意一个对象，都能够知道调用他的任意属性和方法。这种动态获取信息以及动态调用对象方法的功能称为Java语言的反射机制。</strong></p><p>如下代码示例：</p><ul><li>父类Animal</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">package com.study.reflection;</span><br><span class="line"></span><br><span class="line">public class Animal &#123;</span><br><span class="line">    public String name;</span><br><span class="line">    public int age;</span><br><span class="line"></span><br><span class="line">    public Animal() &#123;</span><br><span class="line">        super();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Animal(String name, int age) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void eat() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getInfo() &#123;</span><br><span class="line">        return &quot;name:&quot; + this.name + &quot;, age:&quot; + age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>子类Cat，继承Animal</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">package com.study.reflection;</span><br><span class="line"></span><br><span class="line">public class Cat extends Animal &#123;</span><br><span class="line">    public String color;</span><br><span class="line">    private String owner;</span><br><span class="line">    String sex;</span><br><span class="line"></span><br><span class="line">    public Cat() &#123;</span><br><span class="line">        super();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Cat(String name, int age, String color, String owner) &#123;</span><br><span class="line">        super(name, age);</span><br><span class="line">        this.color = color;</span><br><span class="line">        this.owner = owner;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Cat(String owner) &#123;</span><br><span class="line">        this.owner = owner;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getColor() &#123;</span><br><span class="line">        return color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setColor(String color) &#123;</span><br><span class="line">        this.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void mie() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void smile() &#123;</span><br><span class="line">        System.out.println(name + &quot;在笑&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void cry() &#123;</span><br><span class="line">        System.out.println(name + &quot;在哭&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;姓名：&quot; + this.name + &quot;, 年龄：&quot; + this.age + &quot;, 颜色：&quot; + color + &quot;, 主人：&quot; + owner;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试类TestReflect</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line">package com.study.reflection;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.Constructor;</span><br><span class="line">import java.lang.reflect.Field;</span><br><span class="line">import java.lang.reflect.InvocationTargetException;</span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line">public class TestReflect &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Class cat = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            cat = Class.forName(&quot;com.study.reflection.Cat&quot;);</span><br><span class="line">        &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //获取对象的所有公有（public）属性，例如：public String color;包括继承的父类中public修饰的属性</span><br><span class="line">        Field[] fields = cat.getFields();</span><br><span class="line">        for (Field f : fields) &#123;</span><br><span class="line">            //输出结果：</span><br><span class="line">            // public java.lang.String com.study.reflection.Cat.color</span><br><span class="line">            // public java.lang.String com.study.reflection.Animal.name</span><br><span class="line">            // public int com.study.reflection.Animal.age</span><br><span class="line">            System.out.println(f);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;==========================================================&quot;);</span><br><span class="line"></span><br><span class="line">        //获取对象所有属性（不管是public还是private或者没有修饰符的修饰的属性），但不包括继承的父类中的属性</span><br><span class="line">        Field[] declaredFields = cat.getDeclaredFields();</span><br><span class="line">        for (Field df : declaredFields) &#123;</span><br><span class="line">            //输出结果：</span><br><span class="line">            //public java.lang.String com.study.reflection.Cat.color</span><br><span class="line">            //private java.lang.String com.study.reflection.Cat.owner</span><br><span class="line">            //java.lang.String com.study.reflection.Cat.sex</span><br><span class="line">            System.out.println(df);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;==========================================================&quot;);</span><br><span class="line"></span><br><span class="line">        //获取对象的所有公共（public）方法;包括继承的父类中的public修饰的方法以及Object类中public修饰的方法</span><br><span class="line">        Method[] methods = cat.getMethods();</span><br><span class="line">        for (Method m : methods) &#123;</span><br><span class="line">            //输出结果：</span><br><span class="line">            //public java.lang.String com.study.reflection.Cat.toString()</span><br><span class="line">            //public void com.study.reflection.Cat.setColor(java.lang.String)</span><br><span class="line">            //public java.lang.String com.study.reflection.Cat.getColor()</span><br><span class="line">            //public void com.study.reflection.Cat.cry()</span><br><span class="line">            //public void com.study.reflection.Animal.eat()</span><br><span class="line">            //public java.lang.String com.study.reflection.Animal.getInfo()</span><br><span class="line">            //public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException</span><br><span class="line">            //public final void java.lang.Object.wait() throws java.lang.InterruptedException</span><br><span class="line">            //public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException</span><br><span class="line">            //public boolean java.lang.Object.equals(java.lang.Object)</span><br><span class="line">            //public native int java.lang.Object.hashCode()</span><br><span class="line">            //public final native java.lang.Class java.lang.Object.getClass()</span><br><span class="line">            //public final native void java.lang.Object.notify()</span><br><span class="line">            //public final native void java.lang.Object.notifyAll()</span><br><span class="line">            System.out.println(m);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;==========================================================&quot;);</span><br><span class="line"></span><br><span class="line">        //获取对象所有方法（不管是public还是private或者没有修饰符的修饰的方法），但不包括继承的父类中的方法</span><br><span class="line">        Method[] declaredMethods = cat.getDeclaredMethods();</span><br><span class="line">        for (Method dm : declaredMethods) &#123;</span><br><span class="line">            //输出结果：</span><br><span class="line">            //public java.lang.String com.study.reflection.Cat.toString()</span><br><span class="line">            //public void com.study.reflection.Cat.setColor(java.lang.String)</span><br><span class="line">            //public java.lang.String com.study.reflection.Cat.getColor()</span><br><span class="line">            //void com.study.reflection.Cat.mie()</span><br><span class="line">            //private void com.study.reflection.Cat.smile()</span><br><span class="line">            //public void com.study.reflection.Cat.cry()</span><br><span class="line">            System.out.println(dm);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;==========================================================&quot;);</span><br><span class="line"></span><br><span class="line">        //获取对象的所有公共（public）构造方法，但不包括继承的父类中的构造方法</span><br><span class="line">        Constructor[] constructors = cat.getConstructors();</span><br><span class="line">        for (Constructor c : constructors) &#123;</span><br><span class="line">            //输出结果：</span><br><span class="line">            //public com.study.reflection.Cat(java.lang.String)</span><br><span class="line">            //public com.study.reflection.Cat(java.lang.String,int,java.lang.String,java.lang.String)</span><br><span class="line">            //public com.study.reflection.Cat()</span><br><span class="line">            System.out.println(c);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;==========================================================&quot;);</span><br><span class="line"></span><br><span class="line">        //获取对象的所有构造方法，</span><br><span class="line">        Constructor[] declaredConstructors = cat.getDeclaredConstructors();</span><br><span class="line">        for (Constructor dc : declaredConstructors) &#123;</span><br><span class="line">            //输出结果：</span><br><span class="line">            //public com.study.reflection.Cat(java.lang.String)</span><br><span class="line">            //public com.study.reflection.Cat(java.lang.String,int,java.lang.String,java.lang.String)</span><br><span class="line">            //public com.study.reflection.Cat()</span><br><span class="line">            System.out.println(dc);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;==========================================================&quot;);</span><br><span class="line"></span><br><span class="line">        //Cat cat1 = (Cat) cat.newInstance();//此方法在Java9之后显示已过时</span><br><span class="line">        Constructor&lt;Cat&gt; constructor = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            //获取全参数构造函数</span><br><span class="line">            constructor = cat.getConstructor(String.class, int.class, String.class, String.class);</span><br><span class="line">        &#125; catch (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        Cat cat1 = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            //使用构造函数赋值初始化</span><br><span class="line">            cat1 = constructor.newInstance(&quot;花花&quot;, 2, &quot;白色&quot;, &quot;小明&quot;);</span><br><span class="line">        &#125; catch (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        //输出结果：</span><br><span class="line">        //姓名：花花, 年龄：2, 颜色：白色, 主人：小明</span><br><span class="line">        System.out.println(cat1);</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;==========================================================&quot;);</span><br><span class="line"></span><br><span class="line">        //获取指定方法，并执行，【获取的方法必须是public修饰的】</span><br><span class="line">        Method cry = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            //输出结果：</span><br><span class="line">            //花花在哭</span><br><span class="line">            cry = cat.getMethod(&quot;cry&quot;);//cry()方法</span><br><span class="line">        &#125; catch (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Object object = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            object = cry.invoke(cat1);//调用cry()方法</span><br><span class="line">        &#125; catch (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;Java反射机制，是在程序的运行过程中，对于任何一个类，都能够知道它的所有属性和方法。对于任意一个对象，都能够知道调用他的任意属性和方法。这种动态获取信息以及动态调用对象方法的功能称为Java语言的反射机制。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如下代码示例：&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java类中各个成员初始化顺序</title>
    <link href="https://codingdgsun.github.io/2021/07/05/Java%E7%B1%BB%E4%B8%AD%E5%90%84%E4%B8%AA%E6%88%90%E5%91%98%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%BA%E5%BA%8F/"/>
    <id>https://codingdgsun.github.io/2021/07/05/Java%E7%B1%BB%E4%B8%AD%E5%90%84%E4%B8%AA%E6%88%90%E5%91%98%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%BA%E5%BA%8F/</id>
    <published>2021-07-05T03:51:12.000Z</published>
    <updated>2021-07-05T03:51:59.639Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Java中各个成员初始化顺序</strong></p><ul><li>静态属性：static开头定义的属性</li><li>静态方法块：static{}包起来的代码块</li><li>main()方法入口执行</li><li>普通属性：非static定义的属性</li><li>普通方法快：{}包起来的代码块</li><li>无参构造函数：类名相同的方法</li><li>普通属性：非static定义的属性</li><li>普通方法快：{}包起来的代码块</li><li>带参数的参构造函数：类名相同的方法（参数列表）</li></ul><p><strong>其中，静态属性和静态方法块，按照先定义的代码先执行。同理，普通属性和普通方法块，按照先定义的代码先执行。</strong></p><hr><p><strong>具体代码如下：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">public class JavaLifeCycle &#123;</span><br><span class="line">    //静态属性</span><br><span class="line">    private static String staticField = getStaticField();</span><br><span class="line"></span><br><span class="line">    //静态方法块</span><br><span class="line">    static &#123;</span><br><span class="line">        System.out.println(&quot;初始化静态方法块 &quot; + staticField);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //普通属性</span><br><span class="line">    private String field = getField();</span><br><span class="line">    private String filed2 = getField2();</span><br><span class="line"></span><br><span class="line">    //普通方法块</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(&quot;初始化普通方法块 &quot; + field + &quot;-&quot; + filed2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //无参构造函数</span><br><span class="line">    public JavaLifeCycle() &#123;</span><br><span class="line">        System.out.println(&quot;初始化无参构造函数&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //带参数的构造函数</span><br><span class="line">    public JavaLifeCycle(String filed2) &#123;</span><br><span class="line">        this.filed2 = filed2;</span><br><span class="line">        System.out.println(&quot;初始化带参数的构造函数 &quot; + filed2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static String getStaticField() &#123;</span><br><span class="line">        System.out.println(&quot;初始化静态属性&quot;);</span><br><span class="line">        String staticFiled = &quot;Static Field Initial&quot;;</span><br><span class="line">        return staticFiled;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getField() &#123;</span><br><span class="line">        System.out.println(&quot;初始化普通属性 field&quot;);</span><br><span class="line">        String filed = &quot;Field Initial&quot;;</span><br><span class="line">        return filed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getField2() &#123;</span><br><span class="line">        System.out.println(&quot;初始化普通属性 field2&quot;);</span><br><span class="line">        String filed2 = &quot;Field2 Initial&quot;;</span><br><span class="line">        return filed2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //静态方法</span><br><span class="line">    public static void staticMethod() &#123;</span><br><span class="line">        System.out.println(&quot;初始化静态方法&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //普通方法</span><br><span class="line">    public void method() &#123;</span><br><span class="line">        System.out.println(&quot;初始化普通方法&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //主函数</span><br><span class="line">    public static void main(String[] argc) &#123;</span><br><span class="line">        System.out.println(&quot;开始执行main方法...&quot;);</span><br><span class="line">        JavaLifeCycle lifeCycle = new JavaLifeCycle();</span><br><span class="line">        lifeCycle.method();</span><br><span class="line">        System.out.println(&quot;====================&quot;);</span><br><span class="line">        JavaLifeCycle lifeCycle2 = new JavaLifeCycle(&quot;hello world&quot;);</span><br><span class="line">        lifeCycle2.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出结果如下：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">初始化静态属性</span><br><span class="line">初始化静态方法块 Static Field Initial</span><br><span class="line">开始执行main方法...</span><br><span class="line">初始化普通属性 field</span><br><span class="line">初始化普通属性 field2</span><br><span class="line">初始化普通代码块 Field Initial-Field2 Initial</span><br><span class="line">初始化无参构造函数</span><br><span class="line">初始化普通方法</span><br><span class="line">====================</span><br><span class="line">初始化普通属性 field</span><br><span class="line">初始化普通属性 field2</span><br><span class="line">初始化普通代码块 Field Initial-Field2 Initial</span><br><span class="line">初始化带参数的构造函数 hello world</span><br><span class="line">初始化普通方法</span><br></pre></td></tr></table></figure><hr><p><strong>总结：</strong></p><ul><li>静态属性和静态方法块在main方法前初始化</li><li>静态属性和静态方法块，在第一次new，即第一次初始化实例类前执行一次，之后new实例，不再执行</li><li>方法块在构造函数初始化之前执行</li><li>普通属性和普通方法块，在每一次new实例前执行一次</li><li>类中包含多个静态属性或静态方法块，按照先定义的代码先执行</li><li>类中包含多个普通属性或普通代码块，按照先定义的代码先执行</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;Java中各个成员初始化顺序&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静态属性：static开头定义的属性&lt;/li&gt;
&lt;li&gt;静态方法块：static{}包起来的代码块&lt;/li&gt;
&lt;li&gt;main()方法入口执行&lt;/li&gt;
&lt;li&gt;普通属性：非stati</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>网络基础知识</title>
    <link href="https://codingdgsun.github.io/2021/07/04/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>https://codingdgsun.github.io/2021/07/04/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</id>
    <published>2021-07-04T09:55:43.000Z</published>
    <updated>2021-07-04T09:56:35.955Z</updated>
    
    <content type="html"><![CDATA[<p>计算机网络的品种很多，根据各种不同的分类原则，可以得到各种不同类型的计算机网络。</p><p><strong>按照规模大小和延伸范围分类</strong>：</p><ul><li>局域网（LAN）</li><li>城域网（MAN）</li><li>广域网（WAN）</li></ul><p>Internet可以视为世界上最大的广域网。</p><p><strong>按照网络的拓扑结构来分类</strong>：</p><ul><li>星型网络</li><li>总线网络</li><li>环线网络</li><li>树型网络</li><li>星型环线网络</li></ul><p><strong>按照网络的传输介质来分类</strong>：</p><ul><li>双绞线网</li><li>同轴电缆网</li><li>光纤网</li><li>卫星网</li></ul><hr><p>计算机网络中实现通信必须有一些约定，这些约定被称为通信协议。<br>通信协议通常由三部分组成：</p><ul><li>语义部分，用于决定双方对话的类型</li><li>语法部分，用于决定双方对话的格式</li><li>变换规则，用于决定通信双方的应答关系</li></ul><p><strong>开放系统互联参考模型OSI（Open System Interconnection），从下到上将计算机网络分为：</strong></p><ul><li>物理层（最底层）</li><li>数据链路层</li><li>网络层</li><li>传输层</li><li>会话层</li><li>表示层</li><li>应用层（最上层）</li></ul><p><strong>IP（Internet Protocol）协议：互联网协议</strong><br><strong>TCP（Transmission Control Protocol）协议：传输控制协议</strong></p><p><strong>TCP/IP协议，即传输控制/网络协议，也叫作网络通讯协议。它是在网络的使用中的最基本的通信协议。从下到上将计算机网络分为：</strong></p><ul><li>网络接口层（包括：物理层、数据链路层）（最底层）</li><li>网络层</li><li>传输层</li><li>应用层（包括：会话层、表示层、应用层）（最上层）</li></ul><hr><p><strong>IP地址用于唯一地标识网络中的一个通信实体，这个实体既可以是一台主机，也可以是一台打印机，或者是路由器的某一个端口。</strong></p><p>IP地址是数字型的，是一个32位（32bit）整数，通常把它分成4个8位二进制数，每8位之间用圆点隔开，每个8位整数可以转换成一个0~255的十进制整数。</p><p><strong>端口是一个16位的整数，用于表示数据交给哪个通讯程序处理。因此，端口就是应用程序与外界交流的入口，他是一个抽象的软件结构，包括一些数据结构和I/O（基本输入/输出）缓冲区。</strong></p><p>可以把IP地址理解为某人的所在地方的地址（包括街道和门牌号），但仅有地址还是无法找到此人，还需要知道他所在的房号，即端口号。而计算机网络充当邮递员的角色。</p><p>当一个程序需要发送数据时，需要指定目的地的IP地址和端口号，计算机网络就可以将数据发送给该IP地址和端口所对应的程序。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;计算机网络的品种很多，根据各种不同的分类原则，可以得到各种不同类型的计算机网络。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;按照规模大小和延伸范围分类&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;局域网（LAN）&lt;/li&gt;
&lt;li&gt;城域网（MAN）&lt;/li&gt;
&lt;li&gt;广域网（WAN）</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java中的注解Annotation</title>
    <link href="https://codingdgsun.github.io/2021/07/03/Java%E4%B8%AD%E7%9A%84%E6%B3%A8%E8%A7%A3Annotation/"/>
    <id>https://codingdgsun.github.io/2021/07/03/Java%E4%B8%AD%E7%9A%84%E6%B3%A8%E8%A7%A3Annotation/</id>
    <published>2021-07-03T09:23:51.000Z</published>
    <updated>2021-07-03T09:27:55.938Z</updated>
    
    <content type="html"><![CDATA[<p><strong>基本Annotation</strong></p><ul><li>@Override</li><li>@Deprecated</li><li>@SuppressWarnings</li><li>@SafeVarargs</li></ul><hr><p><strong>@Override用来指定方法重载，它可以强制一个子类必须覆盖父类的方法。</strong></p><ul><li>主要是帮助我们避免一些低级错误，例如：父类中有个run()方法，子类中的方法名不小心写成了runn()，在程序编译时候会报错提示。</li><li>只能作用于方法，不能作用于其他程序元素。</li></ul><p><strong>@Deprecated用于表示某个元素（类、方法等）已过时，当其他程序使用已过时的类、方法时，编译器将会给出警告。</strong></p><ul><li>虽然出现警告，但不影响使用，使用还是可以使用的</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//父类，其中标记为test()方法是过时方法。</span><br><span class="line">public class SupperClass &#123;</span><br><span class="line">    @Deprecated</span><br><span class="line">    public void test()&#123;</span><br><span class="line">        System.out.println(&quot;我是父类过时方法test&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//子类调用是，编译会警告提示，方法已经过时。</span><br><span class="line">public class SonClass extends SupperClass&#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SonClass sonClass = new SonClass();</span><br><span class="line">        sonClass.test();//提示方法已过时      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>@SuppressWarnings指示被该Annotation修饰的程序元素（以及该程序的所有子元素）取消显示指定的编译器警告。</strong></p><ul><li>如果使用了带@Deprecated注释的方法，编译器将在调用此方法的地方出现警告信息。将@SuppressWarnings(“deprecation”)放在调用过时方法的那个类上，则警告信息去掉。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class SupperClass &#123;</span><br><span class="line">    @Deprecated</span><br><span class="line">    public void test()&#123;</span><br><span class="line">        System.out.println(&quot;我是父类过时方法test&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@SuppressWarnings(&quot;deprecation&quot;)//加上此注解，调用过时方法的警告提示消失</span><br><span class="line">public class SonClass extends SupperClass&#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SonClass sonClass = new SonClass();</span><br><span class="line">        sonClass.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SafeVarargs在声明具有模糊类型（比如：泛型）的可变参数的构造函数或方法时，Java编译器会报unchecked警告。</strong></p><ul><li>这类情况，如果确定声明的构造函数和方法的主体不会对其varargs参数执行潜在的不安全的操作，可使用@SafeVarargs进行标记，这样的话，Java编译器就不会报unchecked警告。</li><li>对于非static或非final声明的方法，不适用，会编译不通过。如果要抑制unchecked警告，可以使用@SuppressWarnings注解：@SuppressWarnings(“unchecked”)</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;基本Annotation&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;@Override&lt;/li&gt;
&lt;li&gt;@Deprecated&lt;/li&gt;
&lt;li&gt;@SuppressWarnings&lt;/li&gt;
&lt;li&gt;@SafeVarargs&lt;/li&gt;
&lt;/ul&gt;
&lt;hr</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java中的线程生命周期</title>
    <link href="https://codingdgsun.github.io/2021/07/02/Java%E4%B8%AD%E7%9A%84%E7%BA%BF%E7%A8%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>https://codingdgsun.github.io/2021/07/02/Java%E4%B8%AD%E7%9A%84%E7%BA%BF%E7%A8%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</id>
    <published>2021-07-02T03:12:54.000Z</published>
    <updated>2021-07-02T03:13:27.092Z</updated>
    
    <content type="html"><![CDATA[<h4 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h4><ul><li>新建（New）</li><li>就绪（Runnable）</li><li>运行（Running）</li><li>阻塞（Blocked）</li><li>死亡（Dead）</li></ul><hr><h4 id="新建和就绪状态"><a href="#新建和就绪状态" class="headerlink" title="新建和就绪状态"></a>新建和就绪状态</h4><h5 id="新建"><a href="#新建" class="headerlink" title="新建"></a>新建</h5><ul><li>当程序使用new关键字创建了一个线程后，该线程就处于新建状态，此时它和其他的Java对象一样，仅仅由Java虚拟机为其分配内存，并初始化其成员变量的值。此时的线程对象没有表现出任何线程的动态特征，程序不会执行线程的线程执行体。</li></ul><h5 id="就绪"><a href="#就绪" class="headerlink" title="就绪"></a>就绪</h5><ul><li>当线程对象调用了start()方法之后，该线程处于就绪状态，Java虚拟机会为其创建方法调用栈和程序计数器，处于这个状态中的线程并没有开始运行，只是表示该线程可以运行。至于该线程何时开始运行，取决于JVM里线程调度器的调度。</li></ul><p><strong>特别注意</strong></p><ul><li>启动线程使用start()方法，而不是run()方法。永远不要调用线程对象的run()方法。</li><li>调用start()方法来启动线程，系统会把run()方法当成线程执行体来处理。</li><li>但如果直接调用线程对象的run()方法，则run()方法立即就会被执行，而是在run()方法返回之前其他线程无法并发执行。也就是说，系统把线程对象当成一个普通对象，而run()方法也是一个普通方法，而不是线程执行体。</li></ul><hr><h4 id="运行和阻塞和就绪状态"><a href="#运行和阻塞和就绪状态" class="headerlink" title="运行和阻塞和就绪状态"></a>运行和阻塞和就绪状态</h4><h5 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h5><ul><li>如果处于就绪状态的线程获得了CPU，开始执行run()方法的线程执行体，则该线程处于运行状态。</li></ul><h5 id="阻塞"><a href="#阻塞" class="headerlink" title="阻塞"></a>阻塞</h5><ul><li>线程调用sleep()方法主动放弃所占用的处理器资源，线程进入阻塞状态。</li><li>线程调用了一个阻塞式IO方法，在该方法返回前，该线程被阻塞。</li><li>线程试图获得一个同步监听器，该同步监听器正被其他线程所持有，即，等待同步锁，该线程被阻塞。</li><li>线程在等待某个通知（notify）</li><li>程序调用了线程的suspend()方法将该线程挂起。但这个方法容易导致死锁，所以应该尽量避免使用该方法。</li></ul><h5 id="就绪-1"><a href="#就绪-1" class="headerlink" title="就绪"></a>就绪</h5><ul><li>sleep()时间到</li><li>IO方法返回</li><li>获得同步锁</li><li>收到通知</li><li>resume()</li></ul><hr><h4 id="线程死亡"><a href="#线程死亡" class="headerlink" title="线程死亡"></a>线程死亡</h4><ul><li>线程run()或者call()方法执行完成，线程正常结束。</li><li>线程抛出一个未捕获的Exception或Error。</li><li>线程直接调用stop()方法来结束该线程，该方法容易导致死锁，通常不推荐使用。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;线程的生命周期&quot;&gt;&lt;a href=&quot;#线程的生命周期&quot; class=&quot;headerlink&quot; title=&quot;线程的生命周期&quot;&gt;&lt;/a&gt;线程的生命周期&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;新建（New）&lt;/li&gt;
&lt;li&gt;就绪（Runnable）&lt;/li&gt;
&lt;li&gt;运行（Ru</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java中的线程创建和启动</title>
    <link href="https://codingdgsun.github.io/2021/07/02/Java%E4%B8%AD%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%88%9B%E5%BB%BA%E5%92%8C%E5%90%AF%E5%8A%A8/"/>
    <id>https://codingdgsun.github.io/2021/07/02/Java%E4%B8%AD%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%88%9B%E5%BB%BA%E5%92%8C%E5%90%AF%E5%8A%A8/</id>
    <published>2021-07-02T03:07:50.000Z</published>
    <updated>2021-07-02T03:08:14.778Z</updated>
    
    <content type="html"><![CDATA[<p>Java使用Thread类代表线程，所有的线程对象都必须是Thread类或者其子类的实例。每个线程的作用是完成一定的任务，实际上就是执行一段程序流（一段顺序执行的代码）。Java使用线程执行体来代表这段程序流。</p><hr><h4 id="继承Thread类创建线程类"><a href="#继承Thread类创建线程类" class="headerlink" title="继承Thread类创建线程类"></a>继承Thread类创建线程类</h4><p>通过继承Thread类来创建并启动多线程的步骤如下：</p><ul><li>定义Thread类的子类，并重写该类的run()方法，该run()方法的方法体就代表了线程需要完成的任务。因此把run()方法称为线程执行体。</li><li>创建Thread子类的实例，即创建了线程对象。</li><li>调用线程对象的start()方法来启动该线程。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">public class MyThread extends Thread &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        for (int i = 1; i &lt;= 5; i++) &#123;</span><br><span class="line">            //返回当前线程的名字</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + &quot; &quot; + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        for (int i = 1; i &lt;= 6; i++) &#123;</span><br><span class="line">            //获取当前线程的名字</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + &quot; &quot; + i);</span><br><span class="line">            if (i == 3) &#123;</span><br><span class="line">                //创建第一个线程</span><br><span class="line">                MyThread thread1 = new MyThread();</span><br><span class="line">                //启动第一个线程</span><br><span class="line">                thread1.start();</span><br><span class="line"></span><br><span class="line">                //创建第二个线程</span><br><span class="line">                MyThread thread2 = new MyThread();</span><br><span class="line">                //启动第二个线程</span><br><span class="line">                thread2.start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">    //输出结果：</span><br><span class="line">    main 1</span><br><span class="line">    main 2</span><br><span class="line">    main 3</span><br><span class="line">    main 4</span><br><span class="line">    main 5</span><br><span class="line">    main 6</span><br><span class="line">    Thread-1 1</span><br><span class="line">    Thread-0 1</span><br><span class="line">    Thread-1 2</span><br><span class="line">    Thread-0 2</span><br><span class="line">    Thread-1 3</span><br><span class="line">    Thread-0 3</span><br><span class="line">    Thread-1 4</span><br><span class="line">    Thread-0 4</span><br><span class="line">    Thread-1 5</span><br><span class="line">    Thread-0 5</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"> //或者</span><br><span class="line"></span><br><span class="line"> /*</span><br><span class="line">    //输出结果：</span><br><span class="line">    main 1</span><br><span class="line">    main 2</span><br><span class="line">    main 3</span><br><span class="line">    main 4</span><br><span class="line">    main 5</span><br><span class="line">    main 6</span><br><span class="line">    Thread-0 1</span><br><span class="line">    Thread-1 1</span><br><span class="line">    Thread-0 2</span><br><span class="line">    Thread-1 2</span><br><span class="line">    Thread-0 3</span><br><span class="line">    Thread-1 3</span><br><span class="line">    Thread-0 4</span><br><span class="line">    Thread-1 4</span><br><span class="line">    Thread-0 5</span><br><span class="line">    Thread-1 5</span><br><span class="line">*/</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="其中，第一个线程和第二个线程的执行顺序，每次运行先后顺序可能不一定相同，得根据虚拟机的线程调度器的调度。"><a href="#其中，第一个线程和第二个线程的执行顺序，每次运行先后顺序可能不一定相同，得根据虚拟机的线程调度器的调度。" class="headerlink" title="其中，第一个线程和第二个线程的执行顺序，每次运行先后顺序可能不一定相同，得根据虚拟机的线程调度器的调度。"></a>其中，第一个线程和第二个线程的执行顺序，每次运行先后顺序可能不一定相同，得根据虚拟机的线程调度器的调度。</h5><hr><h4 id="实现Runnable接口创建线程类"><a href="#实现Runnable接口创建线程类" class="headerlink" title="实现Runnable接口创建线程类"></a>实现Runnable接口创建线程类</h4><p>实现Runnable接口来创建并启动多线程的步骤如下：</p><ul><li>定义Runnable接口的实现类，并重写该接口的run()方法，该run()方法的方法体同样是该线程的线程执行体。</li><li>创建Runnable实现类的实例，并以此实例作为Thread的target来创建Thread对象，该Thread对象才是真正的线程对象。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">public class MyThread implements Runnable &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        for (int i = 1; i &lt;= 5; i++) &#123;</span><br><span class="line">            //返回当前线程的名字</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + &quot; &quot; + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        for (int i = 1; i &lt;= 6; i++) &#123;</span><br><span class="line">            //获取当前线程的名字</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + &quot; &quot; + i);</span><br><span class="line">            if (i == 3) &#123;</span><br><span class="line">                //创建Runnable的实例：MyThread</span><br><span class="line">                MyThread myThread = new MyThread();</span><br><span class="line"></span><br><span class="line">                //创建第一个线程，并将Runnable的实例：MyThread，作为Thread的target来创建Thread对象</span><br><span class="line">                Thread thread1 = new Thread(myThread, &quot;第一个线程&quot;);</span><br><span class="line">                //启动第一个线程</span><br><span class="line">                thread1.start();</span><br><span class="line"></span><br><span class="line">                //创建第二个线程</span><br><span class="line">                Thread thread2 = new Thread(myThread, &quot;第二个线程&quot;);</span><br><span class="line">                //启动第二个线程</span><br><span class="line">                thread2.start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> /*</span><br><span class="line">    //输出结果：</span><br><span class="line">    main 1</span><br><span class="line">    main 2</span><br><span class="line">    main 3</span><br><span class="line">    main 4</span><br><span class="line">    main 5</span><br><span class="line">    main 6</span><br><span class="line">    第一个线程 1</span><br><span class="line">    第二个线程 1</span><br><span class="line">    第一个线程 2</span><br><span class="line">    第二个线程 2</span><br><span class="line">    第一个线程 3</span><br><span class="line">    第二个线程 3</span><br><span class="line">    第一个线程 4</span><br><span class="line">    第二个线程 4</span><br><span class="line">    第一个线程 5</span><br><span class="line">    第二个线程 5</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">//或者</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">    //输出结果：</span><br><span class="line">    main 1</span><br><span class="line">    main 2</span><br><span class="line">    main 3</span><br><span class="line">    main 4</span><br><span class="line">    main 5</span><br><span class="line">    main 6</span><br><span class="line">    第二个线程 1</span><br><span class="line">    第一个线程 1</span><br><span class="line">    第二个线程 2</span><br><span class="line">    第一个线程 2</span><br><span class="line">    第二个线程 3</span><br><span class="line">    第一个线程 3</span><br><span class="line">    第二个线程 4</span><br><span class="line">    第一个线程 4</span><br><span class="line">    第二个线程 5</span><br><span class="line">    第一个线程 5</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h5 id="其中，第一个线程和第二个线程的执行顺序，每次运行先后顺序可能不一定相同，得根据虚拟机的线程调度器的调度。-1"><a href="#其中，第一个线程和第二个线程的执行顺序，每次运行先后顺序可能不一定相同，得根据虚拟机的线程调度器的调度。-1" class="headerlink" title="其中，第一个线程和第二个线程的执行顺序，每次运行先后顺序可能不一定相同，得根据虚拟机的线程调度器的调度。"></a>其中，第一个线程和第二个线程的执行顺序，每次运行先后顺序可能不一定相同，得根据虚拟机的线程调度器的调度。</h5>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Java使用Thread类代表线程，所有的线程对象都必须是Thread类或者其子类的实例。每个线程的作用是完成一定的任务，实际上就是执行一段程序流（一段顺序执行的代码）。Java使用线程执行体来代表这段程序流。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;继承Thread类创建线程类</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java中的程序、进程、线程</title>
    <link href="https://codingdgsun.github.io/2021/07/01/Java%E4%B8%AD%E7%9A%84%E7%A8%8B%E5%BA%8F%E3%80%81%E8%BF%9B%E7%A8%8B%E3%80%81%E7%BA%BF%E7%A8%8B/"/>
    <id>https://codingdgsun.github.io/2021/07/01/Java%E4%B8%AD%E7%9A%84%E7%A8%8B%E5%BA%8F%E3%80%81%E8%BF%9B%E7%A8%8B%E3%80%81%E7%BA%BF%E7%A8%8B/</id>
    <published>2021-07-01T08:47:35.000Z</published>
    <updated>2021-07-01T08:48:01.200Z</updated>
    
    <content type="html"><![CDATA[<h4 id="程序、进程、线程的关系"><a href="#程序、进程、线程的关系" class="headerlink" title="程序、进程、线程的关系"></a>程序、进程、线程的关系</h4><ul><li>程序：操作系统中通常都支持同时运行多个任务，一个任务就是一个程序。程序只是一个静态的指令集合。</li><li>进程：每个运行中的程序，就是一个进程。进程是一个正在系统中活动的指令集合。</li><li>线程：当一个程序运行时，内部可能包含了多个顺序执行流，每个顺序执行流就是一个线程。</li></ul><hr><h4 id="并行性和并发性"><a href="#并行性和并发性" class="headerlink" title="并行性和并发性"></a>并行性和并发性</h4><ul><li>并行性：指在同一时刻，有多条指令在多个处理器上同时执行。</li><li>并发性：指在同一时刻，只能有一条指令执行，但多个进程指令被快速轮换执行，使得宏观上具有多个进程同时执行的效果。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;程序、进程、线程的关系&quot;&gt;&lt;a href=&quot;#程序、进程、线程的关系&quot; class=&quot;headerlink&quot; title=&quot;程序、进程、线程的关系&quot;&gt;&lt;/a&gt;程序、进程、线程的关系&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;程序：操作系统中通常都支持同时运行多个任务，一个任务就是</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java中的IO流</title>
    <link href="https://codingdgsun.github.io/2021/07/01/Java%E4%B8%AD%E7%9A%84IO%E6%B5%81/"/>
    <id>https://codingdgsun.github.io/2021/07/01/Java%E4%B8%AD%E7%9A%84IO%E6%B5%81/</id>
    <published>2021-07-01T07:19:34.000Z</published>
    <updated>2021-07-01T07:25:04.969Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Java中的IO流分类"><a href="#Java中的IO流分类" class="headerlink" title="Java中的IO流分类"></a>Java中的IO流分类</h4><ul><li>输入IO流<ul><li>输入字节流（<strong>InputStream</strong>）<ul><li>处理流<ul><li>缓冲流（<strong>BufferedInputStream</strong>）</li><li>转换流</li><li>数据流（<strong>DataInputStream</strong>）</li></ul></li><li>标准流（<strong>System.in</strong>（<strong>InputStream</strong>））</li></ul></li><li>输入字符流（<strong>Reader</strong>）<ul><li>处理流<ul><li>缓冲流（<strong>BufferedReader</strong>）</li><li>转换流（<strong>InputStreamReader</strong>）</li><li>数据流</li></ul></li><li>标准流</li></ul></li></ul></li></ul><h4 id="UML关系图如下所示"><a href="#UML关系图如下所示" class="headerlink" title="UML关系图如下所示"></a>UML关系图如下所示</h4><h5 id="PantUML语法"><a href="#PantUML语法" class="headerlink" title="PantUML语法"></a>PantUML语法</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A &lt;|-- B //B继承A</span><br><span class="line">C &lt;|... D //D实现了C</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line"></span><br><span class="line">abstract class InputStream&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class BufferedInputStream&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class FilterInputStream&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class DataInputStream&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface DataInput&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">abstract class Reader&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class BufferedReader&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class InputStreamReader&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FilterInputStream &lt;|-- BufferedInputStream</span><br><span class="line">InputStream &lt;|-- FilterInputStream</span><br><span class="line"></span><br><span class="line">FilterInputStream &lt;|-- DataInputStream</span><br><span class="line">DataInput &lt;|.. DataInputStream</span><br><span class="line"></span><br><span class="line">Reader &lt;|-- BufferedReader</span><br><span class="line"></span><br><span class="line">Reader &lt;|-- InputStreamReader</span><br><span class="line"></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/15_01.6lnr0bveo29s.png" alt="15_01"></p><hr><ul><li>输出IO流<ul><li>输出字节流（<strong>OutputStream</strong>）<ul><li>处理流<ul><li>缓冲流（<strong>BufferedOutputStream</strong>）</li><li>转换流</li><li>数据流（<strong>DataOutputStream</strong>）</li></ul></li><li>标准流（<strong>System.out</strong>（<strong>PrintStream</strong>））</li></ul></li><li>输出字符流（<strong>Writer</strong>）<ul><li>处理流<ul><li>缓冲流（<strong>BufferedWriter</strong>）</li><li>转换流（<strong>OutputStreamWriter</strong>）</li><li>数据流</li></ul></li><li>标准流（<strong>PrintWriter</strong>）</li></ul></li></ul></li></ul><h4 id="UML关系图如下所示-1"><a href="#UML关系图如下所示-1" class="headerlink" title="UML关系图如下所示"></a>UML关系图如下所示</h4><h5 id="PantUML语法-1"><a href="#PantUML语法-1" class="headerlink" title="PantUML语法"></a>PantUML语法</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A &lt;|-- B //B继承A</span><br><span class="line">C &lt;|... D //D实现了C</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line"></span><br><span class="line">abstract class OutputStream&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">class BufferedOutputStream&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">class FilterOutputStream&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">class DataOutputStream&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">class PrintStream&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">abstract class Writer&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">class BufferedWriter&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">class OutputStreamWriter&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">class PrintWriter&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">FilterOutputStream &lt;|-- BufferedOutputStream</span><br><span class="line">OutputStream &lt;|-- FilterOutputStream</span><br><span class="line"></span><br><span class="line">FilterOutputStream &lt;|-- DataOutputStream</span><br><span class="line">DataOutput &lt;|.. DataOutputStream</span><br><span class="line"></span><br><span class="line">FilterOutputStream &lt;|-- PrintStream</span><br><span class="line"></span><br><span class="line">Writer &lt;|-- BufferedWriter</span><br><span class="line"></span><br><span class="line">Writer &lt;|-- OutputStreamWriter</span><br><span class="line"></span><br><span class="line">Writer &lt;|-- PrintWriter</span><br><span class="line"></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/15_02.xnt901yzxr4.png" alt="15_02"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Java中的IO流分类&quot;&gt;&lt;a href=&quot;#Java中的IO流分类&quot; class=&quot;headerlink&quot; title=&quot;Java中的IO流分类&quot;&gt;&lt;/a&gt;Java中的IO流分类&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;输入IO流&lt;ul&gt;
&lt;li&gt;输入字节流（&lt;strong&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java中Collections和Arrays类</title>
    <link href="https://codingdgsun.github.io/2021/06/30/Java%E4%B8%ADCollections%E5%92%8CArrays%E7%B1%BB/"/>
    <id>https://codingdgsun.github.io/2021/06/30/Java%E4%B8%ADCollections%E5%92%8CArrays%E7%B1%BB/</id>
    <published>2021-06-30T15:28:42.000Z</published>
    <updated>2021-06-30T15:29:11.123Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h4><ul><li><p>Collections是个java.util下的专用静态类，它包含有各种有关集合操作的静态方法。提供一系列静态方法实现对各种集合的搜索、排序、线程安全化等操作.</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    List list = new ArrayList();</span><br><span class="line">    list.add(17);</span><br><span class="line">    list.add(11);</span><br><span class="line">    list.add(65);</span><br><span class="line">    list.add(36);</span><br><span class="line"></span><br><span class="line">    Collections.sort(list);</span><br><span class="line"></span><br><span class="line">    System.out.println(list);//[11, 17, 36, 65]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h4><ul><li><p>Arrays是个java.util下的专用静态类，它包含有各种有关操作数组 ，提供搜索、排序、复制等静态方法。</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    int[] array = new int[]&#123;11, 4, 23, 16, 3, 1, 4&#125;;</span><br><span class="line"></span><br><span class="line">    Arrays.sort(array);</span><br><span class="line">    System.out.println(Arrays.toString(array));//[1, 3, 4, 4, 11, 16, 23]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Collections&quot;&gt;&lt;a href=&quot;#Collections&quot; class=&quot;headerlink&quot; title=&quot;Collections&quot;&gt;&lt;/a&gt;Collections&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Collections是个java.util下的专</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java中的集合</title>
    <link href="https://codingdgsun.github.io/2021/06/30/Java%E4%B8%AD%E7%9A%84%E9%9B%86%E5%90%88/"/>
    <id>https://codingdgsun.github.io/2021/06/30/Java%E4%B8%AD%E7%9A%84%E9%9B%86%E5%90%88/</id>
    <published>2021-06-30T07:05:52.000Z</published>
    <updated>2021-06-30T07:45:53.975Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Java集合体系"><a href="#Java集合体系" class="headerlink" title="Java集合体系"></a>Java集合体系</h4><ul><li>Set（接口）：代表无序、不可重复的集合</li><li>List（接口）：代表有序、重复的集合</li><li>Map（接口）：代表具有映射关系的集合</li><li>Queue（接口）：代表队列集合</li></ul><h4 id="集合类和数组区别"><a href="#集合类和数组区别" class="headerlink" title="集合类和数组区别"></a>集合类和数组区别</h4><ul><li>数组元素既可以是基本类型的值，也可以是对象（实际上保存的是对象的引用变量）。</li><li>集合里只能保存对象（实际上保存的是对象的引用变量，但通常习惯认为集合里保存的是对象）</li></ul><p>Java的集合类主要由两个<strong>接口</strong>派生而出，他们是Java集合框架的根接口，这两个接口又包含了一些子接口或实现类。</p><ul><li>Collection（接口）</li><li>Map（接口）</li></ul><h4 id="UML关系图如下所示"><a href="#UML关系图如下所示" class="headerlink" title="UML关系图如下所示"></a>UML关系图如下所示</h4><h5 id="PantUML语法"><a href="#PantUML语法" class="headerlink" title="PantUML语法"></a>PantUML语法</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A &lt;|-- B //B继承A</span><br><span class="line">C &lt;|... D //D实现了C</span><br></pre></td></tr></table></figure><h4 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">  @startuml</span><br><span class="line"></span><br><span class="line">interface Iterable&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">interface Collection&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">interface Set&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">interface Queue&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">interface List&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">interface SortedSet&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">class HashSet&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">abstract AbstractSet&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">abstract AbstractCollection&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">class ArrayList&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">abstract class AbstractList&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">class Vector&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">interface Deque&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">class PriorityQueue&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">abstract class AbstractQueue&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">class TreeSet&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">interface NavigableSet&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">class LinkedHashSet&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">class LinkedList&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">abstract class AbstractSequentialList&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">class Stack&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">class ArrayDeque&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">Iterable &lt;|-- Collection</span><br><span class="line">Collection &lt;|-- Set</span><br><span class="line">Collection &lt;|-- Queue</span><br><span class="line">Collection &lt;|-- List</span><br><span class="line"></span><br><span class="line">Set &lt;|-- SortedSet</span><br><span class="line"></span><br><span class="line">AbstractSet &lt;|-- HashSet</span><br><span class="line">Set &lt;|.. HashSet</span><br><span class="line"></span><br><span class="line">AbstractCollection &lt;|-- AbstractSet</span><br><span class="line">Set &lt;|.. AbstractSet</span><br><span class="line"></span><br><span class="line">Collection &lt;|.. AbstractCollection</span><br><span class="line"></span><br><span class="line">AbstractList &lt;|-- ArrayList</span><br><span class="line">List &lt;|.. ArrayList</span><br><span class="line"></span><br><span class="line">AbstractCollection &lt;|-- AbstractList</span><br><span class="line">List &lt;|.. AbstractList</span><br><span class="line"></span><br><span class="line">AbstractList &lt;|-- Vector</span><br><span class="line">List &lt;|.. Vector</span><br><span class="line"></span><br><span class="line">Queue &lt;|-- Deque</span><br><span class="line"></span><br><span class="line">AbstractQueue &lt;|-- PriorityQueue</span><br><span class="line"></span><br><span class="line">AbstractCollection &lt;|-- AbstractQueue</span><br><span class="line">Queue &lt;|.. AbstractQueue</span><br><span class="line"></span><br><span class="line">AbstractSet &lt;|-- TreeSet</span><br><span class="line">NavigableSet &lt;|.. TreeSet</span><br><span class="line"></span><br><span class="line">SortedSet &lt;|--  NavigableSet</span><br><span class="line"></span><br><span class="line">HashSet &lt;|-- LinkedHashSet</span><br><span class="line">Set &lt;|.. LinkedHashSet</span><br><span class="line"></span><br><span class="line">AbstractSequentialList &lt;|-- LinkedList</span><br><span class="line">List &lt;|.. LinkedList</span><br><span class="line"></span><br><span class="line">AbstractList &lt;|-- AbstractSequentialList</span><br><span class="line"></span><br><span class="line">Vector &lt;|-- Stack</span><br><span class="line"></span><br><span class="line">AbstractCollection &lt;|-- ArrayDeque</span><br><span class="line">Deque &lt;|.. ArrayDeque</span><br><span class="line"></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/13_01.6h5a8whbks1s.png" alt="13_01"></p><h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line"></span><br><span class="line">interface Map&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">class HashMap&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">abstract class AbstractMap&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">class Hashtable&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">abstract class Dictionary&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">interface SortedMap&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">class LinkedHashMap&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">class Properties&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">class TreeMap&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">interface NavigableMap&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">AbstractMap &lt;|-- HashMap</span><br><span class="line">Map &lt;|.. HashMap</span><br><span class="line"></span><br><span class="line">Map &lt;|.. AbstractMap</span><br><span class="line"></span><br><span class="line">Dictionary &lt;|-- Hashtable</span><br><span class="line">Map &lt;|.. Hashtable</span><br><span class="line"></span><br><span class="line">Map &lt;|-- SortedMap</span><br><span class="line"></span><br><span class="line">HashMap &lt;|-- LinkedHashMap</span><br><span class="line">Map &lt;|.. LinkedHashMap</span><br><span class="line"></span><br><span class="line">Hashtable &lt;|-- Properties</span><br><span class="line"></span><br><span class="line">AbstractMap &lt;|-- TreeMap</span><br><span class="line">NavigableMap &lt;|.. TreeMap</span><br><span class="line"></span><br><span class="line">SortedMap &lt;|-- NavigableMap</span><br><span class="line"></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/13_02.1jocknjwceww.png" alt="13_02"></p><p>对于Set、List、Queue、Map四种集合，最常用的分别是：<strong>HashSet</strong>、<strong>TreeSet</strong>、<strong>ArrayList</strong>、<strong>LinkedList</strong>、<strong>ArrayDeque</strong>、<strong>HashMap</strong>、<strong>TreeMap</strong>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Java集合体系&quot;&gt;&lt;a href=&quot;#Java集合体系&quot; class=&quot;headerlink&quot; title=&quot;Java集合体系&quot;&gt;&lt;/a&gt;Java集合体系&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Set（接口）：代表无序、不可重复的集合&lt;/li&gt;
&lt;li&gt;List（接口）：代</summary>
      
    
    
    
    
  </entry>
  
</feed>
