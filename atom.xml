<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CodingDGSun&#39;s Blog</title>
  
  
  <link href="https://codingdgsun.github.io/atom.xml" rel="self"/>
  
  <link href="https://codingdgsun.github.io/"/>
  <updated>2021-12-22T07:54:37.769Z</updated>
  <id>https://codingdgsun.github.io/</id>
  
  <author>
    <name>CodingDGSun</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java中稀疏数组的使用</title>
    <link href="https://codingdgsun.github.io/2021/12/22/Java%E4%B8%AD%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://codingdgsun.github.io/2021/12/22/Java%E4%B8%AD%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2021-12-22T07:54:13.000Z</published>
    <updated>2021-12-22T07:54:37.769Z</updated>
    
    <content type="html"><![CDATA[<h4 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a>稀疏数组</h4><p>当一个数组中大部分元素是0，或者是一个相同的值时，可以使用稀疏数组来保存该数组。并且稀疏数组，行数为：原来数组非0元素个数+1；列数为：3。即：稀疏数组列数总是3。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">原数组总行数                原数组总列数               原数组非0元素个数</span><br><span class="line">原数组非0元素行索引         原数组非0元素列索引         原数组非0元素值</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br></pre></td></tr></table></figure><p>稀疏数组，第一行（即：0行），第一列存储原数组的总行数，第二列存储原数组的总列数，第三列存储非零元素的数量； 其他行结构相同，每一行存储一条非0元素信息。</p><blockquote><p>代码如下</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">       System.out.println(&quot;原来数组为：&quot;);</span><br><span class="line">       int[][] array1 = new int[5][6];</span><br><span class="line">       array1[1][3] = 4;</span><br><span class="line">       array1[3][4] = 6;</span><br><span class="line">       int sum = 0;//非0的元素个数</span><br><span class="line">       for (int[] arrays : array1) &#123;</span><br><span class="line">           for (int array : arrays) &#123;</span><br><span class="line">               System.out.print(array + &quot;\t&quot;);</span><br><span class="line">               if (array != 0) &#123;</span><br><span class="line">                   sum++;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           System.out.println();</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println(&quot;原来数组中，非0的元素个数为：&quot; + sum);</span><br><span class="line"></span><br><span class="line">       System.out.println(&quot;稀疏数组为：&quot;);</span><br><span class="line">       int[][] array2 = new int[sum + 1][3];//稀疏数组，sum+1行，3列</span><br><span class="line"></span><br><span class="line">       array2[0][0] = array1.length;//稀疏数组第一行第一列：原数组行数</span><br><span class="line">       array2[0][1] = array1[0].length;//稀疏数组第一行第二列：原数组列数</span><br><span class="line">       array2[0][2] = sum;//稀疏数组第一行第三列：原数组中非0的元素个数</span><br><span class="line"></span><br><span class="line">       int count = 0;//非0的元素个数，即稀疏数组所在行索引</span><br><span class="line">       for (int i = 0; i &lt; array1.length; i++) &#123;</span><br><span class="line">           for (int j = 0; j &lt; array1[i].length; j++) &#123;</span><br><span class="line">               if (array1[i][j] != 0) &#123;</span><br><span class="line">                   count++;//稀疏数组所在行索引</span><br><span class="line">                   array2[count][0] = i;//稀疏数组第count行第一列，是原数组非0的元素的所在行索引</span><br><span class="line">                   array2[count][1] = j;//稀疏数组第count行第二列，是原数组非0的元素的所在列索引</span><br><span class="line">                   array2[count][2] = array1[i][j];//稀疏数组第count行第三列，是原数组非0的元素值</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       printArray(array2);//输出稀疏数组</span><br><span class="line"></span><br><span class="line">       System.out.println(&quot;将稀疏数组还原成正常数组为：&quot;);</span><br><span class="line"></span><br><span class="line">       //定义二维数组，稀疏数组第一行第一列：原数组行数，第一行第二列：原数组列数</span><br><span class="line">       int[][] array3 = new int[array2[0][0]][array2[0][1]];//数组初始化后，每个元素都为0</span><br><span class="line">       for (int i = 1; i &lt; array2.length; i++) &#123;</span><br><span class="line">           //从稀疏数组，第二行开始遍历，即 i 为1</span><br><span class="line">           array3[array2[i][0]][array2[i][1]] = array2[i][2];//稀疏数组第i行第一列是原数组非0元素的行索引，第i行第二列是原数组非0元素的列索引，第i行第三列的值是原数组的元素值</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       printArray(array3);//输出还原后的数组</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   private static void printArray(int[][] arrays) &#123;</span><br><span class="line">       for (int[] array : arrays) &#123;</span><br><span class="line">           for (int num : array) &#123;</span><br><span class="line">               System.out.print(num + &quot;\t&quot;);</span><br><span class="line">           &#125;</span><br><span class="line">           System.out.println();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果如下</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">原来数组为：</span><br><span class="line">000000</span><br><span class="line">000400</span><br><span class="line">000000</span><br><span class="line">000060</span><br><span class="line">000000</span><br><span class="line">原来数组中，非0的元素个数为：2</span><br><span class="line">稀疏数组为：</span><br><span class="line">562</span><br><span class="line">134</span><br><span class="line">346</span><br><span class="line">将稀疏数组还原成正常数组为：</span><br><span class="line">000000</span><br><span class="line">000400</span><br><span class="line">000000</span><br><span class="line">000060</span><br><span class="line">000000</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;稀疏数组&quot;&gt;&lt;a href=&quot;#稀疏数组&quot; class=&quot;headerlink&quot; title=&quot;稀疏数组&quot;&gt;&lt;/a&gt;稀疏数组&lt;/h4&gt;&lt;p&gt;当一个数组中大部分元素是0，或者是一个相同的值时，可以使用稀疏数组来保存该数组。并且稀疏数组，行数为：原来数组非0元素个数+</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Markdown语法入门</title>
    <link href="https://codingdgsun.github.io/2021/12/21/Markdown%E8%AF%AD%E6%B3%95%E5%85%A5%E9%97%A8/"/>
    <id>https://codingdgsun.github.io/2021/12/21/Markdown%E8%AF%AD%E6%B3%95%E5%85%A5%E9%97%A8/</id>
    <published>2021-12-21T03:00:46.000Z</published>
    <updated>2021-12-21T03:01:05.016Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Markdown-是一种轻量级标记语言"><a href="#Markdown-是一种轻量级标记语言" class="headerlink" title="Markdown 是一种轻量级标记语言"></a>Markdown 是一种轻量级标记语言</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><hr><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">**加粗**</span><br><span class="line">*斜体*</span><br><span class="line">***加粗且斜体***</span><br><span class="line">~~删除线~~~</span><br></pre></td></tr></table></figure><p><strong>加粗</strong><br><em>斜体</em><br><em><strong>加粗且斜体</strong></em><br>~~删除线~~~</p><hr><h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">***</span><br></pre></td></tr></table></figure><hr><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![图片名称](图片本地地址，或网络的地址都可以)</span><br></pre></td></tr></table></figure><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fpic1.zhimg.com%2Fv2-45e8fd517c0481f4961ab1e1e1abc5a6_1440w.jpg%3Fsource%3D172ae18b&refer=http%3A%2F%2Fpic1.zhimg.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1642426623&t=bf6345b71ce36b1ba82541d1d3b2b68f" alt="Markdown"></p><hr><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[超链接名称](超链接地址)</span><br></pre></td></tr></table></figure><p><a href="http://localhost/">网站</a></p><hr><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. a</span><br><span class="line">2. b</span><br><span class="line">3. c</span><br><span class="line"></span><br><span class="line">- A</span><br><span class="line">- B</span><br><span class="line">- C</span><br></pre></td></tr></table></figure><ol><li>a</li><li>b</li><li>c</li></ol><ul><li>A</li><li>B</li><li>C</li></ul><hr><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">|序号|姓名|年龄|</span><br><span class="line">|:--|:--:|:--|</span><br><span class="line">|1|张三|14|</span><br><span class="line">|2|李四|3|</span><br><span class="line"></span><br><span class="line">-:  右对齐</span><br><span class="line">:-  左对齐</span><br><span class="line">:-: 居中对齐</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">序号</th><th align="center">姓名</th><th align="right">年龄</th></tr></thead><tbody><tr><td align="left">1</td><td align="center">张三阿</td><td align="right">14</td></tr><tr><td align="left">2</td><td align="center">李四</td><td align="right">3</td></tr></tbody></table><hr><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用```来表示</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是代码块</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Markdown-是一种轻量级标记语言&quot;&gt;&lt;a href=&quot;#Markdown-是一种轻量级标记语言&quot; class=&quot;headerlink&quot; title=&quot;Markdown 是一种轻量级标记语言&quot;&gt;&lt;/a&gt;Markdown 是一种轻量级标记语言&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Dockerfile创建Ubuntu镜像实践</title>
    <link href="https://codingdgsun.github.io/2021/12/17/Dockerfile%E5%88%9B%E5%BB%BAUbuntu%E9%95%9C%E5%83%8F%E5%AE%9E%E8%B7%B5/"/>
    <id>https://codingdgsun.github.io/2021/12/17/Dockerfile%E5%88%9B%E5%BB%BAUbuntu%E9%95%9C%E5%83%8F%E5%AE%9E%E8%B7%B5/</id>
    <published>2021-12-17T09:05:03.000Z</published>
    <updated>2021-12-17T09:05:23.333Z</updated>
    
    <content type="html"><![CDATA[<h4 id="手动安装Linux命令"><a href="#手动安装Linux命令" class="headerlink" title="手动安装Linux命令"></a>手动安装Linux命令</h4><blockquote><p>下载Ubuntu镜像</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull ubuntu</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/70-01.4yov6xx7o6w0.jpg" alt="70-01"></p><blockquote><p>启动一个ubuntu容器</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name myubuntu01 ba6acccedd29 /bin/bash</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/70-02.43tp7fm8hd00.jpg" alt="70-02"></p><blockquote><p>查看Ubuntu版本</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/issue</span><br><span class="line">//Ubuntu 20.04.3 LTS \n \l</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/70-03.1q0hnpcvbta8.jpg" alt="70-03"></p><blockquote><p>查看ubuntu中基本命令，都无法使用</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim     //文本编辑</span><br><span class="line">ifconfig        //显示或配置网络设备</span><br><span class="line">ping        //因特网包探索器，用于测试网络连接量的程序</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/70-04.5hvhqx3ey2g0.jpg" alt="70-04"></p><blockquote><p>手动安装命令</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apt-get update      //更新源列表</span><br><span class="line">apt-get install -y  vim     //安装文本编辑命令 </span><br><span class="line">apt-get install -y  net-tools       //安装显示或配置网络设备命令</span><br><span class="line">apt-get install -y  iputils-ping        //安装ping命令</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/70-05.3302urfwk3e0.jpg" alt="70-05"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/70-06.6m88b9e9br80.jpg" alt="70-06"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/70-07.14p5s1l8sf9c.jpg" alt="70-07"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/70-08.7048bjcko600.jpg" alt="70-08"></p><blockquote><p>命令安装成功，测试没问题</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/70-09.2bhq7xbjgvi8.jpg" alt="70-09"></p><h4 id="使用Dockerfile创建Ubuntu镜像"><a href="#使用Dockerfile创建Ubuntu镜像" class="headerlink" title="使用Dockerfile创建Ubuntu镜像"></a>使用Dockerfile创建Ubuntu镜像</h4><blockquote><p>编写dockerfile</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu</span><br><span class="line">MAINTAINER sunjiedgsun</span><br><span class="line"></span><br><span class="line">ENV MYPATH /usr/local</span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line"></span><br><span class="line">RUN apt-get update</span><br><span class="line">RUN apt-get install -y  vim </span><br><span class="line">RUN apt-get install -y  net-tools</span><br><span class="line">RUN apt-get install -y  iputils-ping</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line">CMD /bin/bash</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/70-10.6nb80ka5j0k0.jpg" alt="70-10"></p><blockquote><p>生成镜像</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -f dockerfile01 -t myubuntu:1.0.0 .</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/70-11.7j2s7jpznsg0.jpg" alt="70-11"></p><blockquote><p>查看镜像的创建历史过程</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker history bb9803c8b55a</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/70-12.6orb5wqdwck0.jpg" alt="70-12"></p><blockquote><p>使用刚刚生成的镜像，启动一个容器，并测试相关命令，都可以使用</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name myubuntu02 bb9803c8b55a /bin/bash</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/70-13.4kzrbbj4chi0.jpg" alt="70-13"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;手动安装Linux命令&quot;&gt;&lt;a href=&quot;#手动安装Linux命令&quot; class=&quot;headerlink&quot; title=&quot;手动安装Linux命令&quot;&gt;&lt;/a&gt;手动安装Linux命令&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;下载Ubuntu镜像&lt;/p&gt;
&lt;/bloc</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Dockerfile创建CentOS镜像实践</title>
    <link href="https://codingdgsun.github.io/2021/12/17/Dockerfile%E5%88%9B%E5%BB%BACentOS%E9%95%9C%E5%83%8F%E5%AE%9E%E8%B7%B5/"/>
    <id>https://codingdgsun.github.io/2021/12/17/Dockerfile%E5%88%9B%E5%BB%BACentOS%E9%95%9C%E5%83%8F%E5%AE%9E%E8%B7%B5/</id>
    <published>2021-12-17T06:50:42.000Z</published>
    <updated>2021-12-17T06:51:49.080Z</updated>
    
    <content type="html"><![CDATA[<h4 id="手动安装Linux命令"><a href="#手动安装Linux命令" class="headerlink" title="手动安装Linux命令"></a>手动安装Linux命令</h4><blockquote><p>下载CentOS镜像</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull centos</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/69-01.124zxox9s19s.jpg" alt="69-01"></p><blockquote><p>启动一个centos容器</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name mycentos01 5d0da3dc9764 /bin/bash</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/69-02.3aaz7q304tk0.jpg" alt="69-02"></p><blockquote><p>查看CentOS版本</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/redhat-release</span><br><span class="line">//CentOS Linux release 8.4.2105</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/69-03.4fz2s5vnsom0.jpg" alt="69-03"></p><blockquote><p>查看centos中基本命令，都无法使用</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">clear       //清屏</span><br><span class="line">vim     //文本编辑</span><br><span class="line">ifconfig        //显示或配置网络设备</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/69-04.3kwq167clcm0.jpg" alt="69-04"></p><blockquote><p>手动安装命令</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum -y install vim      //安装文本编辑命令</span><br><span class="line">yum install -y  net-tools       //安装显示或配置网络设备命令</span><br><span class="line">yum install -y  ncurses     //安装清屏命令</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/69-05.77cgz1pbvrg0.jpg" alt="69-05"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/69-06.4pk3fbnmfkm0.jpg" alt="69-06"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/69-07.4acqey7hqsc0.jpg" alt="69-07"></p><blockquote><p>命令安装成功，测试没问题</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/69-08.3qfmc23gpu00.jpg" alt="69-08"></p><h4 id="使用Dockerfile创建CentOS镜像"><a href="#使用Dockerfile创建CentOS镜像" class="headerlink" title="使用Dockerfile创建CentOS镜像"></a>使用Dockerfile创建CentOS镜像</h4><blockquote><p>编写dockerfile</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">MAINTAINER sunjiedgsun</span><br><span class="line"></span><br><span class="line">ENV MYPATH /usr/local</span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line"></span><br><span class="line">RUN yum -y install vim</span><br><span class="line">RUN yum install -y  net-tools</span><br><span class="line">RUN yum install -y  ncurses</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line">CMD /bin/bash</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/69-09.3gcdx61wjme0.jpg" alt="69-09"></p><blockquote><p>生成镜像</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -f dockerfile01 -t mycentos:1.0.0 .</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/69-10.2dd2spwy4h8g.jpg" alt="69-10"></p><blockquote><p>查看镜像的创建历史过程</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker history 1bf47dff9310</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/69-11.4u89s3c2lgc0.jpg" alt="69-11"></p><blockquote><p>使用刚刚生成的镜像，启动一个容器，并测试相关命令，都可以使用</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/69-12.4qod7jpumag0.jpg" alt="69-12"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;手动安装Linux命令&quot;&gt;&lt;a href=&quot;#手动安装Linux命令&quot; class=&quot;headerlink&quot; title=&quot;手动安装Linux命令&quot;&gt;&lt;/a&gt;手动安装Linux命令&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;下载CentOS镜像&lt;/p&gt;
&lt;/bloc</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Dockerfile使用入门</title>
    <link href="https://codingdgsun.github.io/2021/12/16/Dockerfile%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/"/>
    <id>https://codingdgsun.github.io/2021/12/16/Dockerfile%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/</id>
    <published>2021-12-16T03:04:41.000Z</published>
    <updated>2021-12-16T03:05:06.355Z</updated>
    
    <content type="html"><![CDATA[<h4 id="使用Dockerfile生成镜像，并挂载数据卷"><a href="#使用Dockerfile生成镜像，并挂载数据卷" class="headerlink" title="使用Dockerfile生成镜像，并挂载数据卷"></a>使用Dockerfile生成镜像，并挂载数据卷</h4><blockquote><p>编写Dockerfile <strong>注意：命令单词全部大写</strong></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu</span><br><span class="line">VOLUME [&quot;volume1&quot;,&quot;volume2&quot;]</span><br><span class="line">CMD echo &quot;------Done------&quot;</span><br><span class="line">CMD /bin/bash</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/68-01.3dvklj7txhc0.jpg" alt="68-01"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/68-02.1ubrnna0l29s.jpg" alt="68-02"></p><blockquote><p>查看docker build帮助</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker build --help     //查看docker build帮助</span><br><span class="line">        -f //dockerfile文件路径</span><br><span class="line">        -t //镜像别名:版本号</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/68-03.6jkmekwse7c0.jpg" alt="68-03"></p><blockquote><p>生成镜像并挂载数据卷</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -f /Users/sunjie/Desktop/test-dockerfile/dockerfile01 -t my_ubuntu:1.0.0 .     //执行dockerfile生成镜像</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/68-04.n21idggknn.jpg" alt="68-04"></p><blockquote><p>启动一个容器</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it bbef8a39891f /bin/bash</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/68-05.6ts5ux1loy0.jpg" alt="68-05"></p><blockquote><p>在容器一个挂载卷中，新建文件</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/68-06.5eaen268b640.jpg" alt="68-06"></p><blockquote><p>查看容器元数据，挂载卷的外面主机的目录</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect 1c259b42fc70</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/68-07.6xkk78bsm4w0.jpg" alt="68-07"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/68-08.yujnn6h6wdc.jpg" alt="68-08"></p><blockquote><p>查看外面物理主机相应目录内容，<strong>注意，在Mac上，此处有坑</strong></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /var/lib/docker/volumes/568d0c3e0d3267bbace8e99c0a75b1d0e2037a919b2e629861727d5889624582/_data</span><br><span class="line">//提示找不到目录或文件 no such file or directory: /var/lib/docker/volumes/568d0c3e0d3267bbace8e99c0a75b1d0e2037a919b2e629861727d5889624582/_data</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/68-09.6ywhjmcdo48.jpg" alt="68-09"></p><blockquote><p>解决方案</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --privileged --pid=host debian nsenter -t 1 -m -u -n -i sh               //执行此命令</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/68-10.4xs9w8ulqdk0.jpg" alt="68-10"></p><blockquote><p>跳转目录，找到物理主机相应目录内容</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/68-11.3ddngmrel9k0.jpg" alt="68-11"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;使用Dockerfile生成镜像，并挂载数据卷&quot;&gt;&lt;a href=&quot;#使用Dockerfile生成镜像，并挂载数据卷&quot; class=&quot;headerlink&quot; title=&quot;使用Dockerfile生成镜像，并挂载数据卷&quot;&gt;&lt;/a&gt;使用Dockerfile生成镜像，</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>关于MySQL的容器数据卷挂载实践</title>
    <link href="https://codingdgsun.github.io/2021/12/15/%E5%85%B3%E4%BA%8EMySQL%E7%9A%84%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E5%8D%B7%E6%8C%82%E8%BD%BD%E5%AE%9E%E8%B7%B5/"/>
    <id>https://codingdgsun.github.io/2021/12/15/%E5%85%B3%E4%BA%8EMySQL%E7%9A%84%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E5%8D%B7%E6%8C%82%E8%BD%BD%E5%AE%9E%E8%B7%B5/</id>
    <published>2021-12-15T14:38:29.000Z</published>
    <updated>2021-12-15T14:42:01.338Z</updated>
    
    <content type="html"><![CDATA[<h4 id="关于MySQL的容器数据卷挂载实践"><a href="#关于MySQL的容器数据卷挂载实践" class="headerlink" title="关于MySQL的容器数据卷挂载实践"></a>关于MySQL的容器数据卷挂载实践</h4><blockquote><p>下载mysql 5.7 镜像</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:5.7       //下载mysql 5.7 镜像</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/67-01.56e1j9bgf9c0.jpg" alt="67-01"></p><blockquote><p>启动mysql容器，并挂载相应目录</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3307:3306 -v /Users/sunjie/Desktop/conf:/etc/mysql/conf.d -v /Users/sunjie/Desktop/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=112233 --name=&quot;mysql01&quot; mysql:5.7        </span><br><span class="line">//后台方式运行mysql:5.7，数据库密码为：112233，容器别名：mysql01</span><br><span class="line">//外部主机端口3307映射到容器中的3306端口</span><br><span class="line">//将外部主机/Users/sunjie/Desktop/conf目录与容器中/etc/mysql/conf.d目录进行映射</span><br><span class="line">//将外部主机/Users/sunjie/Desktop/data目录与容器中/var/lib/mysql目录进行映射</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/67-02.2ybibjxtvri0.jpg" alt="67-02"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/67-03.5j2bozfhkeo0.jpg" alt="67-03"></p><blockquote><p>使用MySQLWorkBench连接容器中的MySQL</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/67-04.zpgoz962fhc.jpg" alt="67-04"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/67-05.t7wnloqcc74.jpg" alt="67-05"></p><blockquote><p>在容器数据库中新建一个数据库</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/67-06.29c4zr7v9f6s.jpg" alt="67-06"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/67-07.30dge6b7x6w0.jpg" alt="67-07"></p><blockquote><p>外部主机数据文件夹和容器内数据文件夹对比</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/67-08.4svc28syc4q0.jpg" alt="67-08"></p><blockquote><p>删除容器后，外部主机数据文件夹还在，没有丢失</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/67-09.teelti240ls.jpg" alt="67-09"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;关于MySQL的容器数据卷挂载实践&quot;&gt;&lt;a href=&quot;#关于MySQL的容器数据卷挂载实践&quot; class=&quot;headerlink&quot; title=&quot;关于MySQL的容器数据卷挂载实践&quot;&gt;&lt;/a&gt;关于MySQL的容器数据卷挂载实践&lt;/h4&gt;&lt;blockquote&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Docker容器数据卷挂载使用</title>
    <link href="https://codingdgsun.github.io/2021/12/15/Docker%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E5%8D%B7%E6%8C%82%E8%BD%BD%E4%BD%BF%E7%94%A8/"/>
    <id>https://codingdgsun.github.io/2021/12/15/Docker%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E5%8D%B7%E6%8C%82%E8%BD%BD%E4%BD%BF%E7%94%A8/</id>
    <published>2021-12-15T05:48:05.000Z</published>
    <updated>2021-12-15T05:48:23.958Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Docker容器数据卷挂载使用"><a href="#Docker容器数据卷挂载使用" class="headerlink" title="Docker容器数据卷挂载使用"></a>Docker容器数据卷挂载使用</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --help       //查看运行容器帮助</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/66-01.1y8h1empy8zk.jpg" alt="66-01"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/66-02.1x0uqgq56uao.jpg" alt="66-02"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -v /Users/sunjie/Desktop:/home tomcat        //以交互方式运行tomcat容器，并将外部主机的/Users/sunjie/Desktop与tomcat容器的/home目录进行映射</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/66-03.1fecntektuhs.jpg" alt="66-03"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it 7ff84fa6ad4c /bin/bash      //进入容器查看目录内容</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/66-04.6m1c6lqzi3o0.jpg" alt="66-04"></p><p>查看外部主机目录内容<br><br><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/66-05.9j9f4415o6w.jpg" alt="66-05"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect 7ff84fa6ad4c     //查看容器元数据信息，确认数据卷挂载是否成功</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/66-06.5r5oh1rfc3c0.jpg" alt="66-06"></p><p>在容器内目录创建文件，在外部主机目录可以查看到<br><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/66-07.68frwx2oa8g0.jpg" alt="66-07"></p><p>在外部主机目录创建文件，在容器内目录可以查看到<br><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/66-08.10jzjvl3dlow.jpg" alt="66-08"></p><p><strong>注意</strong>删除容器后，外部主机挂载目录里面的文件还在，没有丢失<br><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/66-09.54b0gxmwwt00.jpg" alt="66-09"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Docker容器数据卷挂载使用&quot;&gt;&lt;a href=&quot;#Docker容器数据卷挂载使用&quot; class=&quot;headerlink&quot; title=&quot;Docker容器数据卷挂载使用&quot;&gt;&lt;/a&gt;Docker容器数据卷挂载使用&lt;/h4&gt;&lt;figure class=&quot;highli</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>提交Docker镜像</title>
    <link href="https://codingdgsun.github.io/2021/12/15/%E6%8F%90%E4%BA%A4Docker%E9%95%9C%E5%83%8F/"/>
    <id>https://codingdgsun.github.io/2021/12/15/%E6%8F%90%E4%BA%A4Docker%E9%95%9C%E5%83%8F/</id>
    <published>2021-12-15T02:53:31.000Z</published>
    <updated>2021-12-15T02:57:42.417Z</updated>
    
    <content type="html"><![CDATA[<h4 id="提交Docker镜像"><a href="#提交Docker镜像" class="headerlink" title="提交Docker镜像"></a>提交Docker镜像</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull tomcat      //下载tomcat镜像</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/65-01.323ona7ue4s0.jpg" alt="65-01"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name=&quot;MyTomcat&quot; -p 8888:8080 tomcat     //后台方式，以外部主机端口8888映射容器端口8080，运行Tomcat，容器别名为MyTomcat</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-11.1qdl3qsvqekg.jpg" alt="63-09"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl localhost:8888     //测试访问显示404</span><br></pre></td></tr></table></figure><p><strong>此处要注意，【有坑】！</strong></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-07.6m9lxsdxl0o0.jpg" alt="63-10"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-08.3pbn6nqzv5q0.jpg" alt="63-11"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it 2dd5319e4047 /bin/bash      //进入容器</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-12.1399pww3sdyo.jpg" alt="63-12"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -r webapps.dist/* webapps      //将webapps.dist目录下的所以文件，拷贝到webapps目录</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-13.3fqizw1cu620.jpg" alt="63-13"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl localhost:8888     //测试访问显示正常</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-14.3400o668a420.jpg" alt="63-14"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-15.6jo9k4icxgg0.jpg" alt="63-15"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker commit --help        //查看commit帮助</span><br><span class="line">        -a 作者</span><br><span class="line">        -m 提交的信息内容</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/65-02.5iznzj4pifw0.jpg" alt="65-02"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit -a &quot;codingdgsun&quot; -m &quot;Init tomcat webapps&quot; 27db1b0306bd mytomcat:1.0.0     //提交镜像，作者：codingdgsun；提交的备注信息：Init tomcat webapps；提交的镜像ID：27db1b0306bd；镜像的别名：mytomcat；版本号：1.0.0</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/65-03.2vpvb28nu7c0.jpg" alt="65-03">-</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;提交Docker镜像&quot;&gt;&lt;a href=&quot;#提交Docker镜像&quot; class=&quot;headerlink&quot; title=&quot;提交Docker镜像&quot;&gt;&lt;/a&gt;提交Docker镜像&lt;/h4&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;tabl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>可视化图形工具Portainer</title>
    <link href="https://codingdgsun.github.io/2021/12/14/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%9B%BE%E5%BD%A2%E5%B7%A5%E5%85%B7Portainer/"/>
    <id>https://codingdgsun.github.io/2021/12/14/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%9B%BE%E5%BD%A2%E5%B7%A5%E5%85%B7Portainer/</id>
    <published>2021-12-14T13:46:22.000Z</published>
    <updated>2021-12-14T14:02:13.609Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Portainer是一个可视化的容器镜像的图形管理工具，利用Portainer可以轻松构建，管理和维护Docker环境。-而且完全免费，基于容器化的安装方式，方便高效部署。"><a href="#Portainer是一个可视化的容器镜像的图形管理工具，利用Portainer可以轻松构建，管理和维护Docker环境。-而且完全免费，基于容器化的安装方式，方便高效部署。" class="headerlink" title="Portainer是一个可视化的容器镜像的图形管理工具，利用Portainer可以轻松构建，管理和维护Docker环境。 而且完全免费，基于容器化的安装方式，方便高效部署。"></a>Portainer是一个可视化的容器镜像的图形管理工具，利用Portainer可以轻松构建，管理和维护Docker环境。 而且完全免费，基于容器化的安装方式，方便高效部署。</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8888:9000 --restart=always -v /var/run/docker.sock:/var/run/docker.sock --privileged=true portainer/portainer        //下载并运行portainer</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/64-01.30x8vniw5v80.jpg" alt="64-01"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localhost:8888       //测试查看网站</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/64-02.u4lhwlblly8.jpg" alt="64-02"></p><p>创建用户，进行登录<br><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/64-03.4hu89qjd0740.jpg" alt="64-03"></p><p>选择查看管理本地容器<br><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/64-04.rua4hm0lfyo.jpg" alt="64-04"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/64-05.4ku8t6ys1ts0.jpg" alt="64-05"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Portainer是一个可视化的容器镜像的图形管理工具，利用Portainer可以轻松构建，管理和维护Docker环境。-而且完全免费，基于容器化的安装方式，方便高效部署。&quot;&gt;&lt;a href=&quot;#Portainer是一个可视化的容器镜像的图形管理工具，利用Port</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Docker上部署服务应用</title>
    <link href="https://codingdgsun.github.io/2021/12/14/Docker%E4%B8%8A%E9%83%A8%E7%BD%B2%E6%9C%8D%E5%8A%A1%E5%BA%94%E7%94%A8/"/>
    <id>https://codingdgsun.github.io/2021/12/14/Docker%E4%B8%8A%E9%83%A8%E7%BD%B2%E6%9C%8D%E5%8A%A1%E5%BA%94%E7%94%A8/</id>
    <published>2021-12-14T08:28:52.000Z</published>
    <updated>2021-12-14T14:02:13.608Z</updated>
    
    <content type="html"><![CDATA[<h2 id="部署Nginx"><a href="#部署Nginx" class="headerlink" title="部署Nginx"></a>部署Nginx</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx       //下载Nginx镜像</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-01.6lb8u4ioxio0.jpg" alt="63-01"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name=&quot;MyNginx01&quot; -p 3090:80 nginx       //后台方式，以外部主机端口3090映射容器端口80，运行Nginx，容器别名为MyNginx01</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-02.45f082l2slc0.jpg" alt="63-02"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl localhost:3090     //在外部主机测试容器Nginx服务</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-03.3ujm0wohg6o0.jpg" alt="63-03"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-04.4trfmw30td40.jpg" alt="63-04"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it 53c01c475a1e /bin/bash      //进入容器</span><br><span class="line">whereis nginx       //查看Nginx所在位置</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-05.1sjgyqmw68m8.jpg" alt="63-05"></p><h2 id="部署Tomcat"><a href="#部署Tomcat" class="headerlink" title="部署Tomcat"></a>部署Tomcat</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --rm -p 8888:8080 tomcat:9.0     //交互方式，以外部主机端口8888映射容器端口8080，运行Tomcat。用完后，退出容器后，立即删除镜像，一般用于测试使用。</span><br><span class="line"></span><br><span class="line">ctrl + c        //退出，查看镜像，确实消失了</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-06.31g5gnccgno0.jpg" alt="63-06"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-09.3w2ulr3ovra0.jpg" alt="63-07"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull tomcat      //下载Tomcat镜像</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-10.1ucnk4ni1ssg.jpg" alt="63-08"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name=&quot;MyTomcat&quot; -p 8888:8080 tomcat     //后台方式，以外部主机端口8888映射容器端口8080，运行Tomcat，容器别名为MyTomcat</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-11.1qdl3qsvqekg.jpg" alt="63-09"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl localhost:8888     //测试访问显示404</span><br></pre></td></tr></table></figure><p><strong>此处要注意，【有坑】！</strong></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-07.6m9lxsdxl0o0.jpg" alt="63-10"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-08.3pbn6nqzv5q0.jpg" alt="63-11"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it 2dd5319e4047 /bin/bash      //进入容器</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-12.1399pww3sdyo.jpg" alt="63-12"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -r webapps.dist/* webapps      //将webapps.dist目录下的所以文件，拷贝到webapps目录</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-13.3fqizw1cu620.jpg" alt="63-13"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl localhost:8888     //测试访问显示正常</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-14.3400o668a420.jpg" alt="63-14"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-15.6jo9k4icxgg0.jpg" alt="63-15"></p><h2 id="部署Elasticsearch"><a href="#部署Elasticsearch" class="headerlink" title="部署Elasticsearch"></a>部署Elasticsearch</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name=&quot;MyElasticsearch&quot; -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; elasticsearch:7.6.2        //下载并运行elasticsearch</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-16.1j0te7c7txhc.jpg" alt="63-16"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker stats        //监控查看docker内存情况</span><br><span class="line"></span><br><span class="line">docker stats 容器Id       //监控查看指定docker内存情况</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-17.4l71mepu05m0.jpg" alt="63-17"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localhost:9200      //测试Elasticsearch</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-18.3kao0obf7060.jpg" alt="63-18"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop 17079ad436b2        //停止容器</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-19.6launorxf040.jpg" alt="63-19"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name=&quot;MyElasticsearch02&quot; -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; -e ES_JAVA_OPTS=&quot;-Xms64m -Xmx512m&quot; elasticsearch:7.6.2        //设置Elasticsearch内存限制，-e ES_JAVA_OPTS=&quot;-Xms64m -Xmx512m&quot;，最大内存512MB,最小64MB；容器别名：MyElasticsearch02</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-20.1g67t9f8xbsw.jpg" alt="63-20"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-21.59hlonf64v40.jpg" alt="63-21"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl localhost:9200     //测试正常</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-22.5husxnf3wlc0.jpg" alt="63-22"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;部署Nginx&quot;&gt;&lt;a href=&quot;#部署Nginx&quot; class=&quot;headerlink&quot; title=&quot;部署Nginx&quot;&gt;&lt;/a&gt;部署Nginx&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Docker使用入门</title>
    <link href="https://codingdgsun.github.io/2021/12/13/Docker%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/"/>
    <id>https://codingdgsun.github.io/2021/12/13/Docker%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/</id>
    <published>2021-12-13T06:43:08.000Z</published>
    <updated>2021-12-13T06:43:51.562Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker官网地址"><a href="#Docker官网地址" class="headerlink" title="Docker官网地址"></a>Docker官网地址</h2><p><a href="https://www.docker.com/">https://www.docker.com</a></p><h2 id="docker镜像常用命令"><a href="#docker镜像常用命令" class="headerlink" title="docker镜像常用命令"></a>docker镜像常用命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker version      //查看版本</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-01.415zr53dpts0.jpg" alt="62-01"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker --help       //查看帮助</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-02.kfqlz8jhytc.jpg" alt="62-02"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images --help        //查看镜像帮助</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-03.1coruy66sf5s.jpg" alt="62-03"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search --help        //查看搜索帮助</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-04.26y2x6k0v5es.jpg" alt="62-04"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search mysql     //搜索镜像，比如：mysql</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-05.36pznh0szjk0.jpg" alt="62-05"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search mysql --filter=STARTs=6000        //过滤搜索STARS大于6000的镜像</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-06.3j9g4c8p9hw0.jpg" alt="62-06"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull --help      //查看下载镜像帮助</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-07.2a0r639sx0kk.jpg" alt="62-07"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql       //下载最新镜像mysql</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-08.296iy0qqxzk0.jpg" alt="62-08"></p><p>查看<a href="https://registry.hub.docker.com/">dockerhub</a>里面的镜像版本</p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-09.5d9z3ljbxfk0.jpg" alt="62-09"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:5.7       //下载指定版本的镜像mysql，版本需在dockerhub里面存在</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-10.72nb66io24w0.jpg" alt="62-10"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-11.6k38cqtn7fk0.jpg" alt="62-11"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images       //查看镜像</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-12.92oza0qzxb.jpg" alt="62-12"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi --help      //查看删除镜像帮助</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-13.2rnnf6ca5920.jpg" alt="62-13"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images -aq       //查看所有镜像的ID</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-14.1s3bmszpg8hs.jpg" alt="62-14"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi [imageId]     //删除指定镜像</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-15.6qrs2dvzrrk0.jpg" alt="62-15"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi -f $(docker images -aq)      //删除所有镜像</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-16.2w5btq7eqa80.jpg" alt="62-16"></p><h2 id="docker容器常用命令"><a href="#docker容器常用命令" class="headerlink" title="docker容器常用命令"></a>docker容器常用命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull centos      //下载一个centos镜像</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-17.6nvpbax9gkg0.jpg" alt="62-17"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run [可选参数] image     //新建容器并启动</span><br><span class="line"></span><br><span class="line">--name=&quot;容器别名&quot;       //给容器起个别名</span><br><span class="line">-d      //后台运行</span><br><span class="line">-it     //使用交互方式运行</span><br><span class="line">-p      //指定容器端口</span><br><span class="line">    -p ip:主机端口:容器端口</span><br><span class="line">    -p 主机端口:容器端口</span><br><span class="line">    -p 容器端口</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-18.5ru73rw16i80.jpg" alt="62-18"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit        //退出容器并停止容器</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-19.579ju8xo2p40.jpg" alt="62-19"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker ps       //列出当前正在运行的容器</span><br><span class="line"></span><br><span class="line">        -a      //列出当前正在运行的容器和历史上运行过的容器</span><br><span class="line">        -n=?    //显示最近创建的容器</span><br><span class="line">        -q      //只显示容器的编号</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-20.23qkzey7f6v4.jpg" alt="62-20"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + p + q        //退出容器但不停止容器</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-21.g6mlfuvvodc.jpg" alt="62-21"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker rm 容器Id        //删除指定容器，但正在运行的，不能删除；如果强制删除需加参数 rm -f</span><br><span class="line">docker rm -f $(docker ps -aq)       //删除所有容器</span><br><span class="line"></span><br><span class="line">docker ps -aq |xargs docker rm//删除所有容器</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-22.750rz3gz2qc0.jpg" alt="62-22"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-23.6wfi24o9a500.jpg" alt="62-23"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-24.3h51fhghx0y0.jpg" alt="62-24"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器Id     //启动停止的容器</span><br><span class="line">docker restart 容器Id     //重启容器</span><br><span class="line">docker stop 容器Id     //停止正在运行的容器</span><br><span class="line">docker kill 容器Id     //强制停止容器</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-25.201y9mdlf9i8.jpg" alt="62-25"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-26.691txesdw5o0.jpg" alt="62-26"></p><h2 id="docker其他命令"><a href="#docker其他命令" class="headerlink" title="docker其他命令"></a>docker其他命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d 镜像      //启动一个镜像；如果容器启动后，发现没有提供服务，就会立即停止</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-27.6d9yhut1vac0.jpg" alt="62-27"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name=&quot;myCentOS&quot; centos /bin/bash  -c &quot;while true; do echo helloworld;sleep 1;done&quot;      //后台运行一个输出服务程序</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-28.6fht91dgbyo0.jpg" alt="62-28"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -tf --tail 5 容器Id       //查看镜像程序日志</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-29.530xjr8n1as0.jpg" alt="62-29"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker top 容器Id     //查看容器内部的进程信息</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-30.44tce0hx0y20.jpg" alt="62-30"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect 容器Id       //查看容器的元数据</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-31.6cqxfsjsdeo.jpg" alt="62-31"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it 容器Id /bin/bash      //进入正在运行的容器，开启一个新的终端，可以在里面进行操作</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-32.21365yeowiow.jpg" alt="62-32"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker attach 容器Id        //进入容器正在执行的终端，不会启动新的进程</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-33.xtthcqm0we8.jpg" alt="62-33"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-34.5ybgibnh4d80.jpg" alt="62-34"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp 447ff6c195c3:/home/helloworld.txt /Users/sunjie/Desktop       //将容器里面的文件拷贝到宿主机</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/62-35.6qotq3sog340.jpg" alt="62-35"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Docker官网地址&quot;&gt;&lt;a href=&quot;#Docker官网地址&quot; class=&quot;headerlink&quot; title=&quot;Docker官网地址&quot;&gt;&lt;/a&gt;Docker官网地址&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.docker.com/&quot;&gt;http</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Windows上Dos命令操作文件及文件夹</title>
    <link href="https://codingdgsun.github.io/2021/07/29/Windows%E4%B8%8ADos%E5%91%BD%E4%BB%A4%E6%93%8D%E4%BD%9C%E6%96%87%E4%BB%B6%E5%8F%8A%E6%96%87%E4%BB%B6%E5%A4%B9/"/>
    <id>https://codingdgsun.github.io/2021/07/29/Windows%E4%B8%8ADos%E5%91%BD%E4%BB%A4%E6%93%8D%E4%BD%9C%E6%96%87%E4%BB%B6%E5%8F%8A%E6%96%87%E4%BB%B6%E5%A4%B9/</id>
    <published>2021-07-29T05:42:43.000Z</published>
    <updated>2021-07-29T05:43:01.791Z</updated>
    
    <content type="html"><![CDATA[<h2 id="打开cmd命令提示符窗口"><a href="#打开cmd命令提示符窗口" class="headerlink" title="打开cmd命令提示符窗口"></a>打开cmd命令提示符窗口</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><ul><li>键盘Windows键 + R键，两个键一起按，打开“运行”窗口</li><li>在打开的“运行”窗口中输入“cmd”，再按下键盘“回车”键即可<br><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/01%E8%BF%90%E8%A1%8C.4ixiloh5ka68.jpg" alt="01运行"></li></ul><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><ul><li>在电脑桌面空白处，按住键盘Shift键+鼠标右键，两个键一起按,右击后选择“在此处打开窗口命令”</li></ul><hr><p>新建文件夹“a”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">md a</span><br></pre></td></tr></table></figure><p>删除文件夹“a”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rd a</span><br></pre></td></tr></table></figure><p>新建空的文本文件“a.txt”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy nul a.txt</span><br></pre></td></tr></table></figure><p>新建有内容的文本文件“b.txt”，并在结尾处，按回车键，之后输入“你好”内容，按“Ctrl+Z”键盘组合键结束</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">copy con b.txt</span><br><span class="line">你好</span><br></pre></td></tr></table></figure><p>查看文本文件“b.txt”内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type b.txt</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/29_01.5vrzh34pd4lc.png" alt="29_01"></p><hr><p>删除文件夹“aa”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rd aa /s</span><br></pre></td></tr></table></figure><p>删除文件“a.txt”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">del a.txt</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/29_02.1cbz1kzfvelc.jpg" alt="29_02"></p><hr><p>拷贝文件“b.txt”到指定目录“aa”下，并重命名为“1.txt”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy b.txt aa\1.txt</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/29_03.rbrps1t6fc0.jpg" alt="29_03"></p><hr><p>删除文件夹“aa”下的所有文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">del aa</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/29_04.6aql0881i8w0.jpg" alt="29_04"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;打开cmd命令提示符窗口&quot;&gt;&lt;a href=&quot;#打开cmd命令提示符窗口&quot; class=&quot;headerlink&quot; title=&quot;打开cmd命令提示符窗口&quot;&gt;&lt;/a&gt;打开cmd命令提示符窗口&lt;/h2&gt;&lt;h3 id=&quot;方法一&quot;&gt;&lt;a href=&quot;#方法一&quot; class</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java输出日历</title>
    <link href="https://codingdgsun.github.io/2021/07/18/Java%E8%BE%93%E5%87%BA%E6%97%A5%E5%8E%86/"/>
    <id>https://codingdgsun.github.io/2021/07/18/Java%E8%BE%93%E5%87%BA%E6%97%A5%E5%8E%86/</id>
    <published>2021-07-18T00:18:55.000Z</published>
    <updated>2021-07-18T00:19:13.532Z</updated>
    
    <content type="html"><![CDATA[<p><strong>使用键盘输入日期，输出当月日历</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        Scanner sc = new Scanner(System.in);</span><br><span class="line">        System.out.println(&quot;请输入日期，比如：2021-06-18&quot;);</span><br><span class="line">        String strDate = sc.next();//接收用户输入的日期</span><br><span class="line">        //System.out.println(&quot;日期是：&quot; + strDate);//输出日期</span><br><span class="line">        System.out.println(&quot;日\t一\t二\t三\t四\t五\t六&quot;);</span><br><span class="line">        java.sql.Date date = java.sql.Date.valueOf(strDate);//将字符串日期strDate转换成java.sql.Date</span><br><span class="line">        Calendar calendar = Calendar.getInstance();//声明日历类，方式一</span><br><span class="line">        //Calendar calendar = new GregorianCalendar();//声明日历类，方式二</span><br><span class="line">        calendar.setTime(date);//设置日期</span><br><span class="line">        //System.out.println(calendar);</span><br><span class="line">        int maxDate = calendar.getActualMaximum(Calendar.DATE);//获取当月最大天数，比如6月有30天，7月有31天</span><br><span class="line">        int day = calendar.get(Calendar.DATE);//获取当前日</span><br><span class="line">        calendar.set(Calendar.DATE, 1);//设置当前日为1号</span><br><span class="line">        int num = calendar.get(Calendar.DAY_OF_WEEK);//获取1号是一周中的第几天，比如周日是一周中的第1天</span><br><span class="line">        int count = num - 1;//计数器，每7天输出换行，包括输出的空区域num-1</span><br><span class="line">        for (int i = 1; i &lt; num; i++) &#123;</span><br><span class="line">            //输入num个空区域,比如1号是第一周的中的第3天，则1号是周二，前面应该输出2个空区域</span><br><span class="line">            System.out.print(&quot;\t&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        for (int i = 1; i &lt;= maxDate; i++) &#123;</span><br><span class="line">            if (day == i) &#123;//如果是当前日，则用*标注</span><br><span class="line">                System.out.print(i + &quot;*\t&quot;);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                System.out.print(i + &quot;\t&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            count++;</span><br><span class="line">            if (count % 7 == 0) &#123;</span><br><span class="line">                //count计数器，每7个换行</span><br><span class="line">                System.out.println();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><p>输出结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">请输入日期，比如：2021-06-18</span><br><span class="line">2021-07-18</span><br><span class="line">日一二三四五六</span><br><span class="line">123</span><br><span class="line">45678910</span><br><span class="line">11121314151617</span><br><span class="line">18*192021222324</span><br><span class="line">25262728293031</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;使用键盘输入日期，输出当月日历&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;b</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java输出形状</title>
    <link href="https://codingdgsun.github.io/2021/07/11/Java%E8%BE%93%E5%87%BA%E5%BD%A2%E7%8A%B6/"/>
    <id>https://codingdgsun.github.io/2021/07/11/Java%E8%BE%93%E5%87%BA%E5%BD%A2%E7%8A%B6/</id>
    <published>2021-07-11T11:14:48.000Z</published>
    <updated>2021-07-11T11:15:06.941Z</updated>
    
    <content type="html"><![CDATA[<p><strong>输出矩形</strong></p><p>以此矩形案例（4行，9列的矩形）为例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        //输出矩形</span><br><span class="line">        for (int i = 1; i &lt;= 4; i++) &#123;//控制行，即4行</span><br><span class="line">            for (int j = 1; j &lt;= 9; j++) &#123;//控制输出的*的个数，每行9个</span><br><span class="line">                System.out.print(&quot;*&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            //换行</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//输出结果</span><br><span class="line">*********</span><br><span class="line">*********</span><br><span class="line">*********</span><br><span class="line">*********</span><br></pre></td></tr></table></figure><hr><p><strong>前面有空格的矩形</strong></p><p>以此矩形案例（4行，9列的矩形）为例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        //输出前面有空格矩形</span><br><span class="line">        for (int i = 1; i &lt;= 4; i++) &#123;//控制行，即4行</span><br><span class="line">            //输出空格</span><br><span class="line">            for (int k = 1; k &lt;= 5; k++) &#123;//控制空格，即每行开始输出5个空格</span><br><span class="line">                System.out.print(&quot; &quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            for (int j = 1; j &lt;= 9; j++) &#123;//控制输出的*的个数，每行9个</span><br><span class="line">                System.out.print(&quot;*&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            //换行</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//输出结果</span><br><span class="line">     *********</span><br><span class="line">     *********</span><br><span class="line">     *********</span><br><span class="line">     *********</span><br></pre></td></tr></table></figure><hr><p><strong>输出平行四边形</strong></p><p>以此矩形案例（4行，9列的矩形）为例，要变成平行四边形</p><ul><li>第一行前面输出8个空格</li><li>第二行前面输出7个空格</li><li>第三行前面输出6个空格</li><li>第四行前面输出5个空格</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   ********* 1 8</span><br><span class="line">  ********* 2 7</span><br><span class="line"> ********* 3 6</span><br><span class="line">********* 4 5</span><br></pre></td></tr></table></figure><p><strong>综上所述，得出规律：行数+空格数=9</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        //输出平行四边形</span><br><span class="line">        for (int i = 1; i &lt;= 4; i++) &#123;//控制行，即4行</span><br><span class="line">            //输出空格</span><br><span class="line">            for (int k = 1; k &lt;= 9 - i; k++) &#123;//控制空格，行数+空格数=9，即每行开始输出9-i个空格</span><br><span class="line">                System.out.print(&quot; &quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            for (int j = 1; j &lt;= 5; j++) &#123;//控制输出的*的个数，每行5个</span><br><span class="line">                System.out.print(&quot;*&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            //换行</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//输出结果：</span><br><span class="line">        *****</span><br><span class="line">       *****</span><br><span class="line">      *****</span><br><span class="line">     *****</span><br></pre></td></tr></table></figure><hr><p><strong>输出三角形</strong></p><p>以此案例（4行）为例，要变成三角形</p><ul><li>第一行前面输出8个空格，1个星</li><li>第二行前面输出7个空格，3个星</li><li>第三行前面输出6个空格，5个星</li><li>第四行前面输出5个空格，7个星</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   * 1 8 1</span><br><span class="line">  *** 2 7 3</span><br><span class="line"> ***** 3 6 5</span><br><span class="line">******* 4 5 7</span><br></pre></td></tr></table></figure><p><strong>综上所述，得出规律：行数+空格数=9，2x行数-1=星的个数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        //输出三角形</span><br><span class="line">        for (int i = 1; i &lt;= 4; i++) &#123;//控制行，即4行</span><br><span class="line">            //输出空格</span><br><span class="line">            for (int k = 1; k &lt;= 9 - i; k++) &#123;//控制空格，行数+空格数=9，即每行开始输出9-i个空格</span><br><span class="line">                System.out.print(&quot; &quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            for (int j = 1; j &lt;= 2 * i - 1; j++) &#123;//控制输出的*的个数，2x行数-1=星的个数，即每行2 * i -1个星</span><br><span class="line">                System.out.print(&quot;*&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            //换行</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//输出结果：</span><br><span class="line">        *</span><br><span class="line">       ***</span><br><span class="line">      *****</span><br><span class="line">     *******</span><br></pre></td></tr></table></figure><hr><p><strong>输出菱形</strong></p><p>此案例由上面三角形（4行）和下面倒三角形（3行）组合，变成菱形</p><p>上面三角形</p><ul><li>第一行前面输出8个空格，1个星</li><li>第二行前面输出7个空格，3个星</li><li>第三行前面输出6个空格，5个星</li><li>第四行前面输出5个空格，7个星</li></ul><p>下面倒三角形</p><ul><li>第一行前面输出6个空格，5个星</li><li>第二行前面输出7个空格，3个星</li><li>第三行前面输出8个空格，1个星<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   * 1 8 1</span><br><span class="line">  *** 2 7 3</span><br><span class="line"> ***** 3 6 5</span><br><span class="line">******* 4 5 7</span><br><span class="line"> *****   1 6 5</span><br><span class="line">  ***     2 7 3</span><br><span class="line">   *       3 8 1</span><br></pre></td></tr></table></figure></li></ul><p><strong>综上所述，得出规律：上面三角形，行数+空格数=9，2x行数-1=星的个数；下面倒三角形，行数+5=空格数，7-2x行数=星的个数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        //输出上面三角形</span><br><span class="line">        for (int i = 1; i &lt;= 4; i++) &#123;//控制行，即4行</span><br><span class="line">            //输出空格</span><br><span class="line">            for (int k = 1; k &lt;= 9 - i; k++) &#123;//控制空格，行数+空格数=9，即每行开始输出9-i个空格</span><br><span class="line">                System.out.print(&quot; &quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            for (int j = 1; j &lt;= 2 * i - 1; j++) &#123;//控制输出的*的个数，2x行数-1=星的个数，即每行2 * i -1个星</span><br><span class="line">                System.out.print(&quot;*&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            //换行</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //输出下面倒三角形</span><br><span class="line">        for (int i = 1; i &lt;= 3; i++) &#123;//控制行，即3行</span><br><span class="line">            //输出空格</span><br><span class="line">            for (int k = 1; k &lt;= i + 5; k++) &#123;//控制空格，行数+5=空格数，即每行开始输出i+5个空格</span><br><span class="line">                System.out.print(&quot; &quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            for (int j = 1; j &lt;= 7 - 2 * i; j++) &#123;//控制输出的*的个数，7-2x行数=星的个数，即每行7 - 2 * i个星</span><br><span class="line">                System.out.print(&quot;*&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            //换行</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//输出结果：</span><br><span class="line">        *</span><br><span class="line">       ***</span><br><span class="line">      *****</span><br><span class="line">     *******</span><br><span class="line">      *****</span><br><span class="line">       ***</span><br><span class="line">        *</span><br></pre></td></tr></table></figure><hr><p><strong>输出空心菱形</strong></p><p>此案例由上面三角形（4行）和下面倒三角形（3行）组合，变成菱形，中间星形由空格代替</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   * </span><br><span class="line">  * * </span><br><span class="line"> *   * </span><br><span class="line">*     * </span><br><span class="line"> *   *   </span><br><span class="line">  * *     </span><br><span class="line">   *       </span><br></pre></td></tr></table></figure><p><strong>得出规律：在输出星的地方，每行第一个和最后一个输出星，其余输出空格</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"> public static void main(String[] args) &#123;</span><br><span class="line">        //输出上面三角形</span><br><span class="line">        for (int i = 1; i &lt;= 4; i++) &#123;//控制行，即4行</span><br><span class="line">            //输出空格</span><br><span class="line">            for (int k = 1; k &lt;= 9 - i; k++) &#123;//控制空格，行数+空格数=9，即每行开始输出9-i个空格</span><br><span class="line">                System.out.print(&quot; &quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            for (int j = 1; j &lt;= 2 * i - 1; j++) &#123;//控制输出的*的个数，2x行数-1=星的个数，即每行2 * i -1个星</span><br><span class="line">                //在首和尾输出星，其余输出空格</span><br><span class="line">                if (j == 1 || j == 2 * i - 1) &#123;</span><br><span class="line">                    System.out.print(&quot;*&quot;);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    System.out.print(&quot; &quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            //换行</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //输出下面倒三角形</span><br><span class="line">        for (int i = 1; i &lt;= 3; i++) &#123;//控制行，即3行</span><br><span class="line">            //输出空格</span><br><span class="line">            for (int k = 1; k &lt;= i + 5; k++) &#123;//控制空格，行数+5=空格数，即每行开始输出i+5个空格</span><br><span class="line">                System.out.print(&quot; &quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            for (int j = 1; j &lt;= 7 - 2 * i; j++) &#123;//控制输出的*的个数，7-2x行数=星的个数，即每行7 - 2 * i个星</span><br><span class="line">                //在首和尾输出星，其余输出空格</span><br><span class="line">                if (j == 1 || j == 7 - 2 * i) &#123;</span><br><span class="line">                    System.out.print(&quot;*&quot;);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    System.out.print(&quot; &quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            //换行</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//输出结果：</span><br><span class="line">        *</span><br><span class="line">       * *</span><br><span class="line">      *   *</span><br><span class="line">     *     *</span><br><span class="line">      *   *</span><br><span class="line">       * *</span><br><span class="line">        *</span><br></pre></td></tr></table></figure><hr><p><strong>输出正方形</strong></p><p>以此案例（5行，5列的正方形）为例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        //输出正方形</span><br><span class="line">        int len = 5;//正方形边长</span><br><span class="line">        for (int i = 1; i &lt;= len; i++) &#123;//控制行，即4行</span><br><span class="line">            for (int j = 1; j &lt;= len; j++) &#123;//输出星，即每行输出j个星</span><br><span class="line">                System.out.print(&quot;*&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            //换行</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//输出结果：</span><br><span class="line">*****</span><br><span class="line">*****</span><br><span class="line">*****</span><br><span class="line">*****</span><br><span class="line">*****</span><br></pre></td></tr></table></figure><hr><p><strong>输出实心菱形</strong></p><p>以此案例（5行，5列）为例</p><ul><li>第一行第一个和最后一个星的位置是3和3</li><li>第二行第一个和最后一个星的位置是2和4</li><li>第三行第一个和最后一个星的位置是1和5</li><li>第四行第一个和最后一个星的位置是2和4</li><li>第五行第一个和最后一个星的位置是3和3</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  *  1 3 3</span><br><span class="line"> ***  2 2 4</span><br><span class="line">*****  3 1 5</span><br><span class="line"> ***    4 2 4 </span><br><span class="line">  *      5 3 3 </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        //输出实心菱形</span><br><span class="line">        int len = 5;//边长</span><br><span class="line">        int first = len / 2 + 1;//开始输出星的位置</span><br><span class="line">        int end = len / 2 + 1;//结束输出星的位置</span><br><span class="line">        boolean flag = true;//如果是上半部三角形则是true，如果是下半倒三角形则是false</span><br><span class="line"></span><br><span class="line">        for (int i = 1; i &lt;= len; i++) &#123;//控制行，即4行</span><br><span class="line">            for (int j = 1; j &lt;= len; j++) &#123;//输出星，即每行输出j个星</span><br><span class="line">                if (j &gt;= first &amp;&amp; j &lt;= end) &#123;//在每行的起始至结束位置输出星</span><br><span class="line">                    System.out.print(&quot;*&quot;);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    System.out.print(&quot; &quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            //换行</span><br><span class="line">            System.out.println();</span><br><span class="line"></span><br><span class="line">            if(end == len)&#123;//最后一个星位置是边长宽度</span><br><span class="line">                flag = false;//下一行，马上执行下半部倒三角形</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if(flag)&#123;</span><br><span class="line">                //在上半三角形，开始输出星的位置first前移1，结束输出星的位置end后移1</span><br><span class="line">                first--;</span><br><span class="line">                end++;</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                //在下半倒三角形，开始输出星的位置first后移1，结束输出星的位置end前移1</span><br><span class="line">                first++;</span><br><span class="line">                end--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//输出结果：</span><br><span class="line">  *  </span><br><span class="line"> *** </span><br><span class="line">*****</span><br><span class="line"> *** </span><br><span class="line">  *  </span><br></pre></td></tr></table></figure><p>如果想输出空心菱形则只需要将：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (j &gt;= first &amp;&amp; j &lt;= end)</span><br></pre></td></tr></table></figure><p>改成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (j == first || j == end)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;输出矩形&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以此矩形案例（4行，9列的矩形）为例&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java输出九九乘法表</title>
    <link href="https://codingdgsun.github.io/2021/07/11/Java%E8%BE%93%E5%87%BA%E4%B9%9D%E4%B9%9D%E4%B9%98%E6%B3%95%E8%A1%A8/"/>
    <id>https://codingdgsun.github.io/2021/07/11/Java%E8%BE%93%E5%87%BA%E4%B9%9D%E4%B9%9D%E4%B9%98%E6%B3%95%E8%A1%A8/</id>
    <published>2021-07-11T11:13:27.000Z</published>
    <updated>2021-07-11T11:13:52.225Z</updated>
    
    <content type="html"><![CDATA[<p><strong>使用For嵌套循环输出九九乘法表</strong><br><strong>正序输出</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        /**</span><br><span class="line">         //先输出两行，找找规律</span><br><span class="line">         for (int i = 1; i &lt;= 6; i++) &#123;</span><br><span class="line">         System.out.print(i + &quot;* 6 =&quot; + i * 6 + &quot;\t&quot;);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         System.out.println();</span><br><span class="line"></span><br><span class="line">         for (int i = 1; i &lt;= 7; i++) &#123;</span><br><span class="line">         System.out.print(i + &quot;* 7 =&quot; + i * 7 + &quot;\t&quot;);</span><br><span class="line">         &#125;</span><br><span class="line">         */</span><br><span class="line"></span><br><span class="line">        for (int i = 1; i &lt;= 9; i++) &#123;//外循环控制行，从1至9行</span><br><span class="line">            for (int j = 1; j &lt;= i; j++) &#123;//内循环控制列，依次遍历到i的值，即每行i个等式个数</span><br><span class="line">                System.out.print(j + &quot;*&quot; + i + &quot;=&quot; + i * j + &quot;\t&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//输出结果：</span><br><span class="line">/**</span><br><span class="line">1*1=1</span><br><span class="line">1*2=22*2=4</span><br><span class="line">1*3=32*3=63*3=9</span><br><span class="line">1*4=42*4=83*4=124*4=16</span><br><span class="line">1*5=52*5=103*5=154*5=205*5=25</span><br><span class="line">1*6=62*6=123*6=184*6=245*6=306*6=36</span><br><span class="line">1*7=72*7=143*7=214*7=285*7=356*7=427*7=49</span><br><span class="line">1*8=82*8=163*8=244*8=325*8=406*8=487*8=568*8=64</span><br><span class="line">1*9=92*9=183*9=274*9=365*9=456*9=547*9=638*9=729*9=81</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><hr><p><strong>逆序输出</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        //先输出两行，找找规律</span><br><span class="line">        /**</span><br><span class="line">         for (int i = 1; i &lt;= 7; i++) &#123;</span><br><span class="line">         System.out.print(i + &quot;* 7 =&quot; + i * 7 + &quot;\t&quot;);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         System.out.println();</span><br><span class="line"></span><br><span class="line">         for (int i = 1; i &lt;= 6; i++) &#123;</span><br><span class="line">         System.out.print(i + &quot;* 6 =&quot; + i * 6 + &quot;\t&quot;);</span><br><span class="line">         &#125;</span><br><span class="line">         */</span><br><span class="line"></span><br><span class="line">        for (int i = 9; i &gt;= 1; i--) &#123;//外循环控制行，从9至1行</span><br><span class="line">            for (int j = 1; j &lt;= i; j++) &#123;//内循环控制列，依次遍历到i的值，即每行等式个数</span><br><span class="line">                System.out.print(j + &quot;*&quot; + i + &quot;=&quot; + i * j + &quot;\t&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//输出结果：</span><br><span class="line">/**</span><br><span class="line">1*9=92*9=183*9=274*9=365*9=456*9=547*9=638*9=729*9=81</span><br><span class="line">1*8=82*8=163*8=244*8=325*8=406*8=487*8=568*8=64</span><br><span class="line">1*7=72*7=143*7=214*7=285*7=356*7=427*7=49</span><br><span class="line">1*6=62*6=123*6=184*6=245*6=306*6=36</span><br><span class="line">1*5=52*5=103*5=154*5=205*5=25</span><br><span class="line">1*4=42*4=83*4=124*4=16</span><br><span class="line">1*3=32*3=63*3=9</span><br><span class="line">1*2=22*2=4</span><br><span class="line">1*1=1</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;使用For嵌套循环输出九九乘法表&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;正序输出&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;sp</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java中try、catch、finally执行顺序</title>
    <link href="https://codingdgsun.github.io/2021/07/08/Java%E4%B8%ADtry%E3%80%81catch%E3%80%81finally%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/"/>
    <id>https://codingdgsun.github.io/2021/07/08/Java%E4%B8%ADtry%E3%80%81catch%E3%80%81finally%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/</id>
    <published>2021-07-08T05:50:10.000Z</published>
    <updated>2021-07-08T05:50:25.997Z</updated>
    
    <content type="html"><![CDATA[<p><strong>try、catch和finally</strong></p><ul><li>try块：用于捕获异常。<ul><li>后面可以有0个或多个catch块。</li><li>只能有0个或1个finally块。</li><li>try块后面，如果没有catch块，则后面必须有一个finally块。</li><li>执行代码捕获异常后，进入catch块，try中出现异常代码处后面的代码不会再继续执行。</li></ul></li><li>catch块：用于处理处理try中捕获的异常。<ul><li>可以有多个catch块，进入一个catch块后，执行完毕后，如果有finally块，则进入finally块。即使后面还有catch块，也不会再进入其他catch块。</li></ul></li><li>finally块：无论是否捕获或处理异常，finally块中的代码都会被执行。<ul><li>当try块中或者catch块中遇到return语句时，先执行完finally里面的代码后，再执行return返回语句。</li></ul></li></ul><hr><p><strong>可以有多个catch块，并且try块后面，只能有0个或1个finally块</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        System.out.println(&quot;try...&quot;);</span><br><span class="line">    &#125;catch (ArithmeticException e)&#123;</span><br><span class="line">        System.out.println(&quot;ArithmeticException...&quot;);</span><br><span class="line">    &#125;catch (NullPointerException e)&#123;</span><br><span class="line">        System.out.println(&quot;NullPointerException...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    finally &#123;</span><br><span class="line">        System.out.println(&quot;finally...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//输出结果：</span><br><span class="line">//try...</span><br><span class="line">//finally...</span><br></pre></td></tr></table></figure><hr><p><strong>try块后面，如果没有catch块，则后面必须有一个finally</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        System.out.println(&quot;try...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    finally &#123;</span><br><span class="line">        System.out.println(&quot;finally...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//输出结果：</span><br><span class="line">//try...</span><br><span class="line">//finally...</span><br></pre></td></tr></table></figure><hr><p><strong>执行代码捕获异常后，进入catch块，try中出现异常代码处后面的代码不会再继续执行</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        System.out.println(&quot;try...&quot;);</span><br><span class="line">        int a = 0;</span><br><span class="line">        String str = null;</span><br><span class="line">        System.out.println(str.toString());</span><br><span class="line">        a = a / 0;</span><br><span class="line">    &#125; catch (ArithmeticException e) &#123;</span><br><span class="line">        System.out.println(&quot;ArithmeticException...&quot;);</span><br><span class="line">    &#125; catch (NullPointerException e) &#123;</span><br><span class="line">        System.out.println(&quot;NullPointerException...&quot;);</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        System.out.println(&quot;finally...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//输出结果：</span><br><span class="line">//try...</span><br><span class="line">//NullPointerException...</span><br><span class="line">//finally...</span><br></pre></td></tr></table></figure><hr><p><strong>当try块中或者catch块中遇到return语句时，先执行完finally里面的代码后，再执行return返回语句。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        System.out.println(&quot;try...&quot;);</span><br><span class="line">        return;</span><br><span class="line">    &#125; catch (ArithmeticException e) &#123;</span><br><span class="line">        System.out.println(&quot;ArithmeticException...&quot;);</span><br><span class="line">    &#125; catch (NullPointerException e) &#123;</span><br><span class="line">        System.out.println(&quot;NullPointerException...&quot;);</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        System.out.println(&quot;finally...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//输出结果：</span><br><span class="line">//try...</span><br><span class="line">//finally...</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        System.out.println(&quot;try...&quot;);</span><br><span class="line">        int a = 0;</span><br><span class="line">        a = a / 0;</span><br><span class="line">    &#125; catch (ArithmeticException e) &#123;</span><br><span class="line">        System.out.println(&quot;ArithmeticException...&quot;);</span><br><span class="line">        return;</span><br><span class="line">    &#125; catch (NullPointerException e) &#123;</span><br><span class="line">        System.out.println(&quot;NullPointerException...&quot;);</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        System.out.println(&quot;finally...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//输出结果：</span><br><span class="line">//try...</span><br><span class="line">//ArithmeticException...</span><br><span class="line">//finally...</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;try、catch和finally&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;try块：用于捕获异常。&lt;ul&gt;
&lt;li&gt;后面可以有0个或多个catch块。&lt;/li&gt;
&lt;li&gt;只能有0个或1个finally块。&lt;/li&gt;
&lt;li&gt;try块后面，如果没有cat</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java中Error和Exception</title>
    <link href="https://codingdgsun.github.io/2021/07/08/Java%E4%B8%ADError%E5%92%8CException/"/>
    <id>https://codingdgsun.github.io/2021/07/08/Java%E4%B8%ADError%E5%92%8CException/</id>
    <published>2021-07-08T05:48:44.000Z</published>
    <updated>2021-07-08T05:52:25.882Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Error和Exception区别：</strong></p><ul><li>Error：程序无法处理的错误</li><li>Exception：程序本身可以处理的异常</li></ul><p><strong>PantUML语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A &lt;|-- B //B继承A</span><br><span class="line">C &lt;|... D //D实现了C</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line"></span><br><span class="line">interface Serializable&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">class Throwable&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">class Exception&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">class Error&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">class IOError&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">abstract class VirtualMachineError&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">class AWTError&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">class StackOverflowError&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">class OutOfMemoryError&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">class IOException&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">class RuntimeException&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">class ReflectiveOperationException&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">class ClassNotFoundException&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">class EOFException&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">class FileNotFoundException&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">class ArithmeticException&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">class MissingResourceException&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">class NullPointerException&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">class IllegalArgumentException&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">class IndexOutOfBoundsException&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">class ArrayIndexOutOfBoundsException&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">class UnknownEntityException&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">class UnknownTypeException&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">Serializable &lt;|.. Throwable</span><br><span class="line"></span><br><span class="line">Throwable &lt;|-- Exception</span><br><span class="line">Throwable &lt;|-- Error</span><br><span class="line"></span><br><span class="line">Error &lt;|-- IOError</span><br><span class="line">Error &lt;|-- VirtualMachineError</span><br><span class="line">Error &lt;|-- AWTError</span><br><span class="line"></span><br><span class="line">VirtualMachineError &lt;|-- StackOverflowError</span><br><span class="line">VirtualMachineError &lt;|-- OutOfMemoryError</span><br><span class="line"></span><br><span class="line">Exception &lt;|-- IOException</span><br><span class="line">Exception &lt;|-- RuntimeException</span><br><span class="line">Exception &lt;|-- ReflectiveOperationException</span><br><span class="line"></span><br><span class="line">ReflectiveOperationException &lt;|-- ClassNotFoundException</span><br><span class="line"></span><br><span class="line">IOException &lt;|-- EOFException</span><br><span class="line">IOException &lt;|-- FileNotFoundException</span><br><span class="line"></span><br><span class="line">RuntimeException &lt;|-- ArithmeticException</span><br><span class="line">RuntimeException &lt;|-- MissingResourceException</span><br><span class="line">RuntimeException &lt;|-- NullPointerException</span><br><span class="line">RuntimeException &lt;|-- IllegalArgumentException</span><br><span class="line">RuntimeException &lt;|-- IndexOutOfBoundsException</span><br><span class="line">RuntimeException &lt;|-- UnknownEntityException</span><br><span class="line"></span><br><span class="line">UnknownEntityException &lt;|-- UnknownTypeException</span><br><span class="line"></span><br><span class="line">IndexOutOfBoundsException &lt;|-- ArrayIndexOutOfBoundsException</span><br><span class="line"></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><p><strong>Java中异常类关系图，UML关系图如下所示</strong></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/24_01.58dx5wnt5e9s.png" alt="24_01"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;Error和Exception区别：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Error：程序无法处理的错误&lt;/li&gt;
&lt;li&gt;Exception：程序本身可以处理的异常&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;PantUML语法&lt;/strong&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java中的传递是值传递</title>
    <link href="https://codingdgsun.github.io/2021/07/07/Java%E4%B8%AD%E7%9A%84%E4%BC%A0%E9%80%92%E6%98%AF%E5%80%BC%E4%BC%A0%E9%80%92/"/>
    <id>https://codingdgsun.github.io/2021/07/07/Java%E4%B8%AD%E7%9A%84%E4%BC%A0%E9%80%92%E6%98%AF%E5%80%BC%E4%BC%A0%E9%80%92/</id>
    <published>2021-07-07T09:20:07.000Z</published>
    <updated>2021-07-07T09:20:34.927Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Java中的参数类型</strong></p><ul><li>形式参数，即形参</li><li>实际参数，即实参</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        int i = 0;</span><br><span class="line">        run(i);//变量 i 即实际参数</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">public static void run(int a) &#123;//变量 a 即形式参数</span><br><span class="line">    System.out.println(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Java中的两种参数传递情况</strong></p><ul><li>值传递：指在进行函数方法调用时，将实际参数复制一份到函数方法内，在函数方法内对参数进行的修改操作，将不会影响到实际参数，则称为【值传递】。</li><li>引用传递：指在进行函数方法调用时，将实际参数的地址引用直接传递到函数方法内，在函数方法内对参数进行的修改，将影响到实际参数，则称为【引用传递】。</li></ul><hr><p><strong>案例一：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        int i = 0;</span><br><span class="line">        run(i);//变量 i 即实际参数</span><br><span class="line">        System.out.println(i);//结果是：0</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">public static void run(int a) &#123;//变量 a 即形式参数</span><br><span class="line">    a = 10;</span><br><span class="line">    System.out.println(a);//结果是：10</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>变量i，初始值是：0，以实际参数传递给方法run后，在方法体内对变量进行了修改，最终再次输出变量i，依旧是原值：0。即，符合第一种参数传递情况：【值传递】。</strong></p><p><strong>案例二：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        String msg = &quot;hello world&quot;;</span><br><span class="line">        run(msg);</span><br><span class="line">        System.out.println(msg);//结果是：hello world</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">public static void run(String str)&#123;</span><br><span class="line">    str = new String(&quot;haha&quot;);//效果等同于：str = &quot;haha&quot;;</span><br><span class="line">    System.out.println(str);//结果是：haha</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>变量msg，初始值是：hello world，以实际参数传递给方法run后，在方法体内对变量进行了修改，最终再次输出变量msg，依旧是原值：hello world。即，符合第一种参数传递情况：【值传递】。</strong></p><p><strong>案例三：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        Student stu = new Student(&quot;张三&quot;, 7);</span><br><span class="line">        System.out.println(stu);//此案例输出结果：com.study.demo13.ArgsTest$Student@23fc625e</span><br><span class="line">        run(stu);</span><br><span class="line">        System.out.println(stu);//此案例输出结果：com.study.demo13.ArgsTest$Student@23fc625e</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">public static void run(Student student) &#123;</span><br><span class="line">    student = new Student();</span><br><span class="line">    student.setName(&quot;王五&quot;);</span><br><span class="line">    student.setAge(12);</span><br><span class="line">    System.out.println(student);//此案例输出结果：com.study.demo13.ArgsTest$Student@3f99bd52</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static class Student &#123;</span><br><span class="line">    public String name;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    public Student() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Student(String name, int age) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>对象stu，以实际参数传递给方法run后，在方法体内对对象进行了修改，最终再次输出对象stu，依旧是原对象的引用地址。即，符合第一种参数传递情况：【值传递】。</strong></p><hr><p><strong>总结：</strong><br><strong>Java中的参数传递是值传递。</strong></p><p>判断实参内容是否发生变化，判断依据是，主要看参数传递的是什么，如果参数传递的是引用地址，则查看执行方法函数，实参前后的地址是否发生变化。</p><p>案例三中，实参对象前后的引用地址没有变化，则传递的参数是值传递。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;Java中的参数类型&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;形式参数，即形参&lt;/li&gt;
&lt;li&gt;实际参数，即实参&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java中的反射</title>
    <link href="https://codingdgsun.github.io/2021/07/06/Java%E4%B8%AD%E7%9A%84%E5%8F%8D%E5%B0%84/"/>
    <id>https://codingdgsun.github.io/2021/07/06/Java%E4%B8%AD%E7%9A%84%E5%8F%8D%E5%B0%84/</id>
    <published>2021-07-06T05:59:27.000Z</published>
    <updated>2021-07-06T06:22:31.038Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Java反射机制，是在程序的运行过程中，对于任何一个类，都能够知道它的所有属性和方法。对于任意一个对象，都能够知道调用他的任意属性和方法。这种动态获取信息以及动态调用对象方法的功能称为Java语言的反射机制。</strong></p><p>如下代码示例：</p><ul><li>父类Animal</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">package com.study.reflection;</span><br><span class="line"></span><br><span class="line">public class Animal &#123;</span><br><span class="line">    public String name;</span><br><span class="line">    public int age;</span><br><span class="line"></span><br><span class="line">    public Animal() &#123;</span><br><span class="line">        super();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Animal(String name, int age) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void eat() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getInfo() &#123;</span><br><span class="line">        return &quot;name:&quot; + this.name + &quot;, age:&quot; + age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>子类Cat，继承Animal</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">package com.study.reflection;</span><br><span class="line"></span><br><span class="line">public class Cat extends Animal &#123;</span><br><span class="line">    public String color;</span><br><span class="line">    private String owner;</span><br><span class="line">    String sex;</span><br><span class="line"></span><br><span class="line">    public Cat() &#123;</span><br><span class="line">        super();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Cat(String name, int age, String color, String owner) &#123;</span><br><span class="line">        super(name, age);</span><br><span class="line">        this.color = color;</span><br><span class="line">        this.owner = owner;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Cat(String owner) &#123;</span><br><span class="line">        this.owner = owner;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getColor() &#123;</span><br><span class="line">        return color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setColor(String color) &#123;</span><br><span class="line">        this.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void mie() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void smile() &#123;</span><br><span class="line">        System.out.println(name + &quot;在笑&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void cry() &#123;</span><br><span class="line">        System.out.println(name + &quot;在哭&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;姓名：&quot; + this.name + &quot;, 年龄：&quot; + this.age + &quot;, 颜色：&quot; + color + &quot;, 主人：&quot; + owner;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试类TestReflect</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line">package com.study.reflection;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.Constructor;</span><br><span class="line">import java.lang.reflect.Field;</span><br><span class="line">import java.lang.reflect.InvocationTargetException;</span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line">public class TestReflect &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Class cat = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            cat = Class.forName(&quot;com.study.reflection.Cat&quot;);</span><br><span class="line">        &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //获取对象的所有公有（public）属性，例如：public String color;包括继承的父类中public修饰的属性</span><br><span class="line">        Field[] fields = cat.getFields();</span><br><span class="line">        for (Field f : fields) &#123;</span><br><span class="line">            //输出结果：</span><br><span class="line">            // public java.lang.String com.study.reflection.Cat.color</span><br><span class="line">            // public java.lang.String com.study.reflection.Animal.name</span><br><span class="line">            // public int com.study.reflection.Animal.age</span><br><span class="line">            System.out.println(f);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;==========================================================&quot;);</span><br><span class="line"></span><br><span class="line">        //获取对象所有属性（不管是public还是private或者没有修饰符的修饰的属性），但不包括继承的父类中的属性</span><br><span class="line">        Field[] declaredFields = cat.getDeclaredFields();</span><br><span class="line">        for (Field df : declaredFields) &#123;</span><br><span class="line">            //输出结果：</span><br><span class="line">            //public java.lang.String com.study.reflection.Cat.color</span><br><span class="line">            //private java.lang.String com.study.reflection.Cat.owner</span><br><span class="line">            //java.lang.String com.study.reflection.Cat.sex</span><br><span class="line">            System.out.println(df);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;==========================================================&quot;);</span><br><span class="line"></span><br><span class="line">        //获取对象的所有公共（public）方法;包括继承的父类中的public修饰的方法以及Object类中public修饰的方法</span><br><span class="line">        Method[] methods = cat.getMethods();</span><br><span class="line">        for (Method m : methods) &#123;</span><br><span class="line">            //输出结果：</span><br><span class="line">            //public java.lang.String com.study.reflection.Cat.toString()</span><br><span class="line">            //public void com.study.reflection.Cat.setColor(java.lang.String)</span><br><span class="line">            //public java.lang.String com.study.reflection.Cat.getColor()</span><br><span class="line">            //public void com.study.reflection.Cat.cry()</span><br><span class="line">            //public void com.study.reflection.Animal.eat()</span><br><span class="line">            //public java.lang.String com.study.reflection.Animal.getInfo()</span><br><span class="line">            //public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException</span><br><span class="line">            //public final void java.lang.Object.wait() throws java.lang.InterruptedException</span><br><span class="line">            //public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException</span><br><span class="line">            //public boolean java.lang.Object.equals(java.lang.Object)</span><br><span class="line">            //public native int java.lang.Object.hashCode()</span><br><span class="line">            //public final native java.lang.Class java.lang.Object.getClass()</span><br><span class="line">            //public final native void java.lang.Object.notify()</span><br><span class="line">            //public final native void java.lang.Object.notifyAll()</span><br><span class="line">            System.out.println(m);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;==========================================================&quot;);</span><br><span class="line"></span><br><span class="line">        //获取对象所有方法（不管是public还是private或者没有修饰符的修饰的方法），但不包括继承的父类中的方法</span><br><span class="line">        Method[] declaredMethods = cat.getDeclaredMethods();</span><br><span class="line">        for (Method dm : declaredMethods) &#123;</span><br><span class="line">            //输出结果：</span><br><span class="line">            //public java.lang.String com.study.reflection.Cat.toString()</span><br><span class="line">            //public void com.study.reflection.Cat.setColor(java.lang.String)</span><br><span class="line">            //public java.lang.String com.study.reflection.Cat.getColor()</span><br><span class="line">            //void com.study.reflection.Cat.mie()</span><br><span class="line">            //private void com.study.reflection.Cat.smile()</span><br><span class="line">            //public void com.study.reflection.Cat.cry()</span><br><span class="line">            System.out.println(dm);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;==========================================================&quot;);</span><br><span class="line"></span><br><span class="line">        //获取对象的所有公共（public）构造方法，但不包括继承的父类中的构造方法</span><br><span class="line">        Constructor[] constructors = cat.getConstructors();</span><br><span class="line">        for (Constructor c : constructors) &#123;</span><br><span class="line">            //输出结果：</span><br><span class="line">            //public com.study.reflection.Cat(java.lang.String)</span><br><span class="line">            //public com.study.reflection.Cat(java.lang.String,int,java.lang.String,java.lang.String)</span><br><span class="line">            //public com.study.reflection.Cat()</span><br><span class="line">            System.out.println(c);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;==========================================================&quot;);</span><br><span class="line"></span><br><span class="line">        //获取对象的所有构造方法，</span><br><span class="line">        Constructor[] declaredConstructors = cat.getDeclaredConstructors();</span><br><span class="line">        for (Constructor dc : declaredConstructors) &#123;</span><br><span class="line">            //输出结果：</span><br><span class="line">            //public com.study.reflection.Cat(java.lang.String)</span><br><span class="line">            //public com.study.reflection.Cat(java.lang.String,int,java.lang.String,java.lang.String)</span><br><span class="line">            //public com.study.reflection.Cat()</span><br><span class="line">            System.out.println(dc);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;==========================================================&quot;);</span><br><span class="line"></span><br><span class="line">        //Cat cat1 = (Cat) cat.newInstance();//此方法在Java9之后显示已过时</span><br><span class="line">        Constructor&lt;Cat&gt; constructor = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            //获取全参数构造函数</span><br><span class="line">            constructor = cat.getConstructor(String.class, int.class, String.class, String.class);</span><br><span class="line">        &#125; catch (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        Cat cat1 = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            //使用构造函数赋值初始化</span><br><span class="line">            cat1 = constructor.newInstance(&quot;花花&quot;, 2, &quot;白色&quot;, &quot;小明&quot;);</span><br><span class="line">        &#125; catch (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        //输出结果：</span><br><span class="line">        //姓名：花花, 年龄：2, 颜色：白色, 主人：小明</span><br><span class="line">        System.out.println(cat1);</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;==========================================================&quot;);</span><br><span class="line"></span><br><span class="line">        //获取指定方法，并执行，【获取的方法必须是public修饰的】</span><br><span class="line">        Method cry = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            //输出结果：</span><br><span class="line">            //花花在哭</span><br><span class="line">            cry = cat.getMethod(&quot;cry&quot;);//cry()方法</span><br><span class="line">        &#125; catch (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Object object = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            object = cry.invoke(cat1);//调用cry()方法</span><br><span class="line">        &#125; catch (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;Java反射机制，是在程序的运行过程中，对于任何一个类，都能够知道它的所有属性和方法。对于任意一个对象，都能够知道调用他的任意属性和方法。这种动态获取信息以及动态调用对象方法的功能称为Java语言的反射机制。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如下代码示例：&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java类中各个成员初始化顺序</title>
    <link href="https://codingdgsun.github.io/2021/07/05/Java%E7%B1%BB%E4%B8%AD%E5%90%84%E4%B8%AA%E6%88%90%E5%91%98%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%BA%E5%BA%8F/"/>
    <id>https://codingdgsun.github.io/2021/07/05/Java%E7%B1%BB%E4%B8%AD%E5%90%84%E4%B8%AA%E6%88%90%E5%91%98%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%BA%E5%BA%8F/</id>
    <published>2021-07-05T03:51:12.000Z</published>
    <updated>2021-07-05T03:51:59.639Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Java中各个成员初始化顺序</strong></p><ul><li>静态属性：static开头定义的属性</li><li>静态方法块：static{}包起来的代码块</li><li>main()方法入口执行</li><li>普通属性：非static定义的属性</li><li>普通方法快：{}包起来的代码块</li><li>无参构造函数：类名相同的方法</li><li>普通属性：非static定义的属性</li><li>普通方法快：{}包起来的代码块</li><li>带参数的参构造函数：类名相同的方法（参数列表）</li></ul><p><strong>其中，静态属性和静态方法块，按照先定义的代码先执行。同理，普通属性和普通方法块，按照先定义的代码先执行。</strong></p><hr><p><strong>具体代码如下：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">public class JavaLifeCycle &#123;</span><br><span class="line">    //静态属性</span><br><span class="line">    private static String staticField = getStaticField();</span><br><span class="line"></span><br><span class="line">    //静态方法块</span><br><span class="line">    static &#123;</span><br><span class="line">        System.out.println(&quot;初始化静态方法块 &quot; + staticField);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //普通属性</span><br><span class="line">    private String field = getField();</span><br><span class="line">    private String filed2 = getField2();</span><br><span class="line"></span><br><span class="line">    //普通方法块</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(&quot;初始化普通方法块 &quot; + field + &quot;-&quot; + filed2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //无参构造函数</span><br><span class="line">    public JavaLifeCycle() &#123;</span><br><span class="line">        System.out.println(&quot;初始化无参构造函数&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //带参数的构造函数</span><br><span class="line">    public JavaLifeCycle(String filed2) &#123;</span><br><span class="line">        this.filed2 = filed2;</span><br><span class="line">        System.out.println(&quot;初始化带参数的构造函数 &quot; + filed2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static String getStaticField() &#123;</span><br><span class="line">        System.out.println(&quot;初始化静态属性&quot;);</span><br><span class="line">        String staticFiled = &quot;Static Field Initial&quot;;</span><br><span class="line">        return staticFiled;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getField() &#123;</span><br><span class="line">        System.out.println(&quot;初始化普通属性 field&quot;);</span><br><span class="line">        String filed = &quot;Field Initial&quot;;</span><br><span class="line">        return filed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getField2() &#123;</span><br><span class="line">        System.out.println(&quot;初始化普通属性 field2&quot;);</span><br><span class="line">        String filed2 = &quot;Field2 Initial&quot;;</span><br><span class="line">        return filed2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //静态方法</span><br><span class="line">    public static void staticMethod() &#123;</span><br><span class="line">        System.out.println(&quot;初始化静态方法&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //普通方法</span><br><span class="line">    public void method() &#123;</span><br><span class="line">        System.out.println(&quot;初始化普通方法&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //主函数</span><br><span class="line">    public static void main(String[] argc) &#123;</span><br><span class="line">        System.out.println(&quot;开始执行main方法...&quot;);</span><br><span class="line">        JavaLifeCycle lifeCycle = new JavaLifeCycle();</span><br><span class="line">        lifeCycle.method();</span><br><span class="line">        System.out.println(&quot;====================&quot;);</span><br><span class="line">        JavaLifeCycle lifeCycle2 = new JavaLifeCycle(&quot;hello world&quot;);</span><br><span class="line">        lifeCycle2.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出结果如下：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">初始化静态属性</span><br><span class="line">初始化静态方法块 Static Field Initial</span><br><span class="line">开始执行main方法...</span><br><span class="line">初始化普通属性 field</span><br><span class="line">初始化普通属性 field2</span><br><span class="line">初始化普通代码块 Field Initial-Field2 Initial</span><br><span class="line">初始化无参构造函数</span><br><span class="line">初始化普通方法</span><br><span class="line">====================</span><br><span class="line">初始化普通属性 field</span><br><span class="line">初始化普通属性 field2</span><br><span class="line">初始化普通代码块 Field Initial-Field2 Initial</span><br><span class="line">初始化带参数的构造函数 hello world</span><br><span class="line">初始化普通方法</span><br></pre></td></tr></table></figure><hr><p><strong>总结：</strong></p><ul><li>静态属性和静态方法块在main方法前初始化</li><li>静态属性和静态方法块，在第一次new，即第一次初始化实例类前执行一次，之后new实例，不再执行</li><li>方法块在构造函数初始化之前执行</li><li>普通属性和普通方法块，在每一次new实例前执行一次</li><li>类中包含多个静态属性或静态方法块，按照先定义的代码先执行</li><li>类中包含多个普通属性或普通代码块，按照先定义的代码先执行</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;Java中各个成员初始化顺序&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静态属性：static开头定义的属性&lt;/li&gt;
&lt;li&gt;静态方法块：static{}包起来的代码块&lt;/li&gt;
&lt;li&gt;main()方法入口执行&lt;/li&gt;
&lt;li&gt;普通属性：非stati</summary>
      
    
    
    
    
  </entry>
  
</feed>
