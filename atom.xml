<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CodingDGSun&#39;s Blog</title>
  
  
  <link href="https://codingdgsun.github.io/atom.xml" rel="self"/>
  
  <link href="https://codingdgsun.github.io/"/>
  <updated>2021-12-31T05:59:21.131Z</updated>
  <id>https://codingdgsun.github.io/</id>
  
  <author>
    <name>CodingDGSun</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java中的桥接模式</title>
    <link href="https://codingdgsun.github.io/2021/12/31/Java%E4%B8%AD%E7%9A%84%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>https://codingdgsun.github.io/2021/12/31/Java%E4%B8%AD%E7%9A%84%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-12-31T05:58:55.000Z</published>
    <updated>2021-12-31T05:59:21.131Z</updated>
    
    <content type="html"><![CDATA[<h4 id="桥接模式简介"><a href="#桥接模式简介" class="headerlink" title="桥接模式简介"></a>桥接模式简介</h4><ul><li>桥接是用于把抽象化与实现化解耦，使得二者可以独立变化。这种类型的设计模式属于结构型模式，它通过提供抽象化和实现化之间的桥接结构，来实现二者的解耦。</li><li>这种模式涉及到一个作为桥接的接口，使得实体类的功能独立于接口实现类。这两种类型的类可被结构化改变而互不影响。</li></ul><h5 id="品牌接口Brand"><a href="#品牌接口Brand" class="headerlink" title="品牌接口Brand"></a>品牌接口Brand</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//产品品牌</span><br><span class="line">public interface Brand &#123;</span><br><span class="line">    void name();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="实现类品牌A和品牌B"><a href="#实现类品牌A和品牌B" class="headerlink" title="实现类品牌A和品牌B"></a>实现类品牌A和品牌B</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//A品牌</span><br><span class="line">public class ABrand implements Brand &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void name() &#123;</span><br><span class="line">        System.out.print(&quot;A品牌&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//B品牌</span><br><span class="line">public class BBrand implements Brand &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void name() &#123;</span><br><span class="line">        System.out.print(&quot;B品牌&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="抽象产品类Product"><a href="#抽象产品类Product" class="headerlink" title="抽象产品类Product"></a>抽象产品类Product</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//抽象产品类</span><br><span class="line">public abstract class Product &#123;</span><br><span class="line">    //带品牌，组合方式</span><br><span class="line">    private Brand brand;</span><br><span class="line"></span><br><span class="line">    public Product(Brand brand) &#123;</span><br><span class="line">        this.brand = brand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void name() &#123;</span><br><span class="line">        brand.name();//品牌名称</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="子类产品C和D"><a href="#子类产品C和D" class="headerlink" title="子类产品C和D"></a>子类产品C和D</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//C产品</span><br><span class="line">public class CProduct extends Product &#123;</span><br><span class="line">    public CProduct(Brand brand) &#123;</span><br><span class="line">        super(brand);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void name() &#123;</span><br><span class="line">        super.name();</span><br><span class="line">        System.out.println(&quot;C产品&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//D产品</span><br><span class="line">public class DProduct extends Product &#123;</span><br><span class="line">    public DProduct(Brand brand) &#123;</span><br><span class="line">        super(brand);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void name() &#123;</span><br><span class="line">        super.name();</span><br><span class="line">        System.out.println(&quot;D产品&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Brand brandA = new ABrand();//A品牌</span><br><span class="line">        Brand brandB = new BBrand();//B品牌</span><br><span class="line">        CProduct cProduct = new CProduct(brandA);//C产品，带A品牌，即A品牌的C产品</span><br><span class="line">        DProduct dProduct = new DProduct(brandB);//D产品，带B品牌，即B品牌的D产品</span><br><span class="line">        cProduct.name();</span><br><span class="line">        dProduct.name();</span><br><span class="line">        /**</span><br><span class="line">         * 输出结果：</span><br><span class="line">         * A品牌C产品</span><br><span class="line">         * B品牌D产品</span><br><span class="line">         */</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A品牌C产品</span><br><span class="line">B品牌D产品</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;桥接模式简介&quot;&gt;&lt;a href=&quot;#桥接模式简介&quot; class=&quot;headerlink&quot; title=&quot;桥接模式简介&quot;&gt;&lt;/a&gt;桥接模式简介&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;桥接是用于把抽象化与实现化解耦，使得二者可以独立变化。这种类型的设计模式属于结构型模式，它通过提</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java中的适配器模式</title>
    <link href="https://codingdgsun.github.io/2021/12/31/Java%E4%B8%AD%E7%9A%84%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>https://codingdgsun.github.io/2021/12/31/Java%E4%B8%AD%E7%9A%84%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-12-31T05:57:39.000Z</published>
    <updated>2021-12-31T05:58:12.163Z</updated>
    
    <content type="html"><![CDATA[<h4 id="适配器模式简介"><a href="#适配器模式简介" class="headerlink" title="适配器模式简介"></a>适配器模式简介</h4><ul><li>适配器模式是作为两个不兼容的接口之间的桥梁。这种类型的设计模式属于结构型模式，它结合了两个独立接口的功能。</li><li>这种模式涉及到一个单一的类，该类负责加入独立的或不兼容的接口功能。</li></ul><blockquote><p>类模式</p></blockquote><h5 id="要被适配的类TV和类Wire"><a href="#要被适配的类TV和类Wire" class="headerlink" title="要被适配的类TV和类Wire"></a>要被适配的类TV和类Wire</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//要被适配的类：电视</span><br><span class="line">public class TV &#123;</span><br><span class="line">    //电视剧需要一个电源适配器，就可以供电，开机</span><br><span class="line">    public void open(IPowerAdapter iPowerAdapter) &#123;</span><br><span class="line">        //打开电视，需要电，需要连接电线，需要一个电源适配器</span><br><span class="line">        iPowerAdapter.power();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//要被适配接入的类：电线</span><br><span class="line">public class Wire &#123;</span><br><span class="line">    public void supply() &#123;</span><br><span class="line">        System.out.println(&quot;供上电了...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="电源适配器接口IPowerAdapter"><a href="#电源适配器接口IPowerAdapter" class="headerlink" title="电源适配器接口IPowerAdapter"></a>电源适配器接口IPowerAdapter</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//电源适配器接口</span><br><span class="line">public interface IPowerAdapter &#123;</span><br><span class="line">    //供电</span><br><span class="line">    void power();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="电线和电视机适配器类TVPowerAdapter（通过继承方式）"><a href="#电线和电视机适配器类TVPowerAdapter（通过继承方式）" class="headerlink" title="电线和电视机适配器类TVPowerAdapter（通过继承方式）"></a>电线和电视机适配器类TVPowerAdapter（通过继承方式）</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//真正的适配器，一端连接电线，一端连接电视</span><br><span class="line">public class TVPowerAdapter extends Wire implements IPowerAdapter &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void power() &#123;</span><br><span class="line">        super.supply();//有电了</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        TV tv = new TV();//电视</span><br><span class="line">        TVPowerAdapter tvPowerAdapter = new TVPowerAdapter();//电源适配器</span><br><span class="line">        Wire wire = new Wire();//电线</span><br><span class="line"></span><br><span class="line">        tv.open(tvPowerAdapter);</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 输出结果：</span><br><span class="line">         * 供上电了...</span><br><span class="line">         */</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">供上电了...</span><br></pre></td></tr></table></figure><blockquote><p>组合模式（推荐使用）</p></blockquote><h5 id="要被适配的类TV和类Wire-1"><a href="#要被适配的类TV和类Wire-1" class="headerlink" title="要被适配的类TV和类Wire"></a>要被适配的类TV和类Wire</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//要被适配的类：电视</span><br><span class="line">public class TV &#123;</span><br><span class="line">    //电视剧需要一个电源适配器，就可以供电，开机</span><br><span class="line">    public void open(IPowerAdapter iPowerAdapter) &#123;</span><br><span class="line">        //打开电视，需要电，需要连接电线，需要一个电源适配器</span><br><span class="line">        iPowerAdapter.power();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//要被适配接入的类：电线</span><br><span class="line">public class Wire &#123;</span><br><span class="line">    public void supply() &#123;</span><br><span class="line">        System.out.println(&quot;供上电了...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="电源适配器接口IPowerAdapter-1"><a href="#电源适配器接口IPowerAdapter-1" class="headerlink" title="电源适配器接口IPowerAdapter"></a>电源适配器接口IPowerAdapter</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//电源适配器接口</span><br><span class="line">public interface IPowerAdapter &#123;</span><br><span class="line">    //供电</span><br><span class="line">    void power();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="电线和电视机适配器类TVPowerAdapter（通过组合方式）"><a href="#电线和电视机适配器类TVPowerAdapter（通过组合方式）" class="headerlink" title="电线和电视机适配器类TVPowerAdapter（通过组合方式）"></a>电线和电视机适配器类TVPowerAdapter（通过组合方式）</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//真正的适配器，一端连接电线，一端连接电视</span><br><span class="line">public class TVPowerAdapter implements IPowerAdapter &#123;</span><br><span class="line">    private Wire wire;</span><br><span class="line"></span><br><span class="line">    public TVPowerAdapter(Wire wire) &#123;</span><br><span class="line">        this.wire = wire;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void power() &#123;</span><br><span class="line">        wire.supply();//有电了</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试类-1"><a href="#测试类-1" class="headerlink" title="测试类"></a>测试类</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        TV tv = new TV();//电视</span><br><span class="line">        Wire wire = new Wire();//电线</span><br><span class="line">        TVPowerAdapter tvPowerAdapter = new TVPowerAdapter(wire);//电源适配器</span><br><span class="line"></span><br><span class="line">        tv.open(tvPowerAdapter);</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 输出结果：</span><br><span class="line">         * 供上电了...</span><br><span class="line">         */</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试结果-1"><a href="#测试结果-1" class="headerlink" title="测试结果"></a>测试结果</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">供上电了...</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;适配器模式简介&quot;&gt;&lt;a href=&quot;#适配器模式简介&quot; class=&quot;headerlink&quot; title=&quot;适配器模式简介&quot;&gt;&lt;/a&gt;适配器模式简介&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;适配器模式是作为两个不兼容的接口之间的桥梁。这种类型的设计模式属于结构型模式，它结合了两</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Mac OS上用命令行执行C程序</title>
    <link href="https://codingdgsun.github.io/2021/12/31/Mac-OS%E4%B8%8A%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%89%A7%E8%A1%8CC%E7%A8%8B%E5%BA%8F/"/>
    <id>https://codingdgsun.github.io/2021/12/31/Mac-OS%E4%B8%8A%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%89%A7%E8%A1%8CC%E7%A8%8B%E5%BA%8F/</id>
    <published>2021-12-31T05:55:21.000Z</published>
    <updated>2021-12-31T05:57:03.333Z</updated>
    
    <content type="html"><![CDATA[<h4 id="用命令行新建C文件"><a href="#用命令行新建C文件" class="headerlink" title="用命令行新建C文件"></a>用命令行新建C文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch hello.c</span><br></pre></td></tr></table></figure><h4 id="编辑C文件"><a href="#编辑C文件" class="headerlink" title="编辑C文件"></a>编辑C文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim hello.c</span><br></pre></td></tr></table></figure><h4 id="编写C程序代码"><a href="#编写C程序代码" class="headerlink" title="编写C程序代码"></a>编写C程序代码</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;Hello World!&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/80-01.3q90u8uku2o0.webp" alt="80-01"></p><h4 id="编译C程序文件"><a href="#编译C程序文件" class="headerlink" title="编译C程序文件"></a>编译C程序文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cc -c hello.c</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/80-02.7aizgqg7qwk0.webp" alt="80-02"></p><h4 id="生成可执行文件"><a href="#生成可执行文件" class="headerlink" title="生成可执行文件"></a>生成可执行文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cc hello.o</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/80-03.3uv17lx8om00.webp" alt="80-03"></p><h4 id="执行文件"><a href="#执行文件" class="headerlink" title="执行文件"></a>执行文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./a.out</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/80-04.19nks75flj40.webp" alt="80-04"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;用命令行新建C文件&quot;&gt;&lt;a href=&quot;#用命令行新建C文件&quot; class=&quot;headerlink&quot; title=&quot;用命令行新建C文件&quot;&gt;&lt;/a&gt;用命令行新建C文件&lt;/h4&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;t</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java中的原型模式</title>
    <link href="https://codingdgsun.github.io/2021/12/31/Java%E4%B8%AD%E7%9A%84%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://codingdgsun.github.io/2021/12/31/Java%E4%B8%AD%E7%9A%84%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-12-31T05:54:02.000Z</published>
    <updated>2021-12-31T05:54:36.718Z</updated>
    
    <content type="html"><![CDATA[<h4 id="原型模式简介"><a href="#原型模式简介" class="headerlink" title="原型模式简介"></a>原型模式简介</h4><ul><li>模式属于创建型模式，它提供了一种创建对象的最佳方式。</li><li>用于创建重复的对象，同时又能保证性能。</li><li>这种模式是实现了一个原型接口，该接口用于创建当前对象的克隆。当直接创建对象的代价比较大时，则采用这种模式。</li><li>例如，一个对象需要在一个高代价的数据库操作之后被创建。我们可以缓存该对象，在下一个请求时返回它的克隆，在需要的时候更新数据库，以此来减少数据库调用。</li></ul><blockquote><p>浅克隆</p></blockquote><h5 id="类Book实现Cloneable接口并重写clone方法"><a href="#类Book实现Cloneable接口并重写clone方法" class="headerlink" title="类Book实现Cloneable接口并重写clone方法"></a>类Book实现Cloneable接口并重写clone方法</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">public class Book implements Cloneable &#123;</span><br><span class="line">    private String name;//书名</span><br><span class="line">    private Date publishDate;//发布日期</span><br><span class="line"></span><br><span class="line">    public Book() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Book(String name, Date publishDate) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.publishDate = publishDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Date getPublishDate() &#123;</span><br><span class="line">        return publishDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPublishDate(Date publishDate) &#123;</span><br><span class="line">        this.publishDate = publishDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected Object clone() throws CloneNotSupportedException &#123;</span><br><span class="line">        return super.clone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Book&#123;&quot; +</span><br><span class="line">                &quot;name=&#x27;&quot; + name + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &quot;, publishDate=&quot; + publishDate +</span><br><span class="line">                &#x27;&#125;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) throws CloneNotSupportedException &#123;</span><br><span class="line">        String name = &quot;Java 设计模式&quot;;</span><br><span class="line">        Date publishDate = new Date();</span><br><span class="line"></span><br><span class="line">        Book book = new Book(name, publishDate);</span><br><span class="line">        //克隆出对象</span><br><span class="line">        Book clone = (Book) book.clone();</span><br><span class="line"></span><br><span class="line">        System.out.println(book);</span><br><span class="line">        System.out.println(book.hashCode());</span><br><span class="line">        System.out.println(clone);</span><br><span class="line">        System.out.println(clone.hashCode());</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;==================&quot;);</span><br><span class="line"></span><br><span class="line">        publishDate.setTime(publishDate.getTime() + 2000);//修改时间</span><br><span class="line">        System.out.println(book);</span><br><span class="line">        System.out.println(book.hashCode());</span><br><span class="line">        System.out.println(clone);</span><br><span class="line">        System.out.println(clone.hashCode());</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 测试结果：修改了时间，源对象和克隆的对象的时间，都发生了改变</span><br><span class="line">         * Book&#123;name=&#x27;Java 设计模式&#x27;, publishDate=Wed Dec 29 12:17:33 CST 2021&#125;</span><br><span class="line">         * 2093631819</span><br><span class="line">         * Book&#123;name=&#x27;Java 设计模式&#x27;, publishDate=Wed Dec 29 12:17:33 CST 2021&#125;</span><br><span class="line">         * 2074407503</span><br><span class="line">         * ==================</span><br><span class="line">         * Book&#123;name=&#x27;Java 设计模式&#x27;, publishDate=Wed Dec 29 12:17:35 CST 2021&#125;</span><br><span class="line">         * 2093631819</span><br><span class="line">         * Book&#123;name=&#x27;Java 设计模式&#x27;, publishDate=Wed Dec 29 12:17:35 CST 2021&#125;</span><br><span class="line">         * 2074407503</span><br><span class="line">         */</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Book&#123;name=&#x27;Java 设计模式&#x27;, publishDate=Wed Dec 29 12:17:33 CST 2021&#125;</span><br><span class="line">2093631819</span><br><span class="line">Book&#123;name=&#x27;Java 设计模式&#x27;, publishDate=Wed Dec 29 12:17:33 CST 2021&#125;</span><br><span class="line">2074407503</span><br><span class="line">==================</span><br><span class="line">Book&#123;name=&#x27;Java 设计模式&#x27;, publishDate=Wed Dec 29 12:17:35 CST 2021&#125;</span><br><span class="line">2093631819</span><br><span class="line">Book&#123;name=&#x27;Java 设计模式&#x27;, publishDate=Wed Dec 29 12:17:35 CST 2021&#125;</span><br><span class="line">2074407503</span><br></pre></td></tr></table></figure><blockquote><p>深克隆</p></blockquote><h5 id="类Book实现Cloneable接口并重写clone方法-1"><a href="#类Book实现Cloneable接口并重写clone方法-1" class="headerlink" title="类Book实现Cloneable接口并重写clone方法"></a>类Book实现Cloneable接口并重写clone方法</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">public class Book implements Cloneable &#123;</span><br><span class="line">    private String name;//书名</span><br><span class="line">    private Date publishDate;//发布日期</span><br><span class="line"></span><br><span class="line">    public Book() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Book(String name, Date publishDate) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.publishDate = publishDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Date getPublishDate() &#123;</span><br><span class="line">        return publishDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPublishDate(Date publishDate) &#123;</span><br><span class="line">        this.publishDate = publishDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected Object clone() throws CloneNotSupportedException &#123;</span><br><span class="line">        Object obj = super.clone();</span><br><span class="line">        Book book = (Book) obj;</span><br><span class="line"></span><br><span class="line">        //将源对象的属性也进行克隆，即深克隆</span><br><span class="line">        book.publishDate = (Date) book.publishDate.clone();</span><br><span class="line">        return obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Book&#123;&quot; +</span><br><span class="line">                &quot;name=&#x27;&quot; + name + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &quot;, publishDate=&quot; + publishDate +</span><br><span class="line">                &#x27;&#125;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试类-1"><a href="#测试类-1" class="headerlink" title="测试类"></a>测试类</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) throws CloneNotSupportedException &#123;</span><br><span class="line">        String name = &quot;Java 设计模式&quot;;</span><br><span class="line">        Date publishDate = new Date();</span><br><span class="line"></span><br><span class="line">        Book book = new Book(name, publishDate);</span><br><span class="line">        //克隆出对象</span><br><span class="line">        Book clone = (Book) book.clone();</span><br><span class="line"></span><br><span class="line">        System.out.println(book);</span><br><span class="line">        System.out.println(book.hashCode());</span><br><span class="line">        System.out.println(clone);</span><br><span class="line">        System.out.println(clone.hashCode());</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;==================&quot;);</span><br><span class="line"></span><br><span class="line">        publishDate.setTime(publishDate.getTime() + 2000);</span><br><span class="line">        System.out.println(book);</span><br><span class="line">        System.out.println(book.hashCode());</span><br><span class="line">        System.out.println(clone);</span><br><span class="line">        System.out.println(clone.hashCode());</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 测试结果：修改了时间，源对象的时间，发生了改变，但克隆的对象的时间没有改变</span><br><span class="line">         * Book&#123;name=&#x27;Java 设计模式&#x27;, publishDate=Wed Dec 29 12:41:47 CST 2021&#125;</span><br><span class="line">         * 2093631819</span><br><span class="line">         * Book&#123;name=&#x27;Java 设计模式&#x27;, publishDate=Wed Dec 29 12:41:47 CST 2021&#125;</span><br><span class="line">         * 2074407503</span><br><span class="line">         * ==================</span><br><span class="line">         * Book&#123;name=&#x27;Java 设计模式&#x27;, publishDate=Wed Dec 29 12:41:49 CST 2021&#125;</span><br><span class="line">         * 2093631819</span><br><span class="line">         * Book&#123;name=&#x27;Java 设计模式&#x27;, publishDate=Wed Dec 29 12:41:47 CST 2021&#125;</span><br><span class="line">         * 2074407503</span><br><span class="line">         */</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试结果-1"><a href="#测试结果-1" class="headerlink" title="测试结果"></a>测试结果</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Book&#123;name=&#x27;Java 设计模式&#x27;, publishDate=Wed Dec 29 12:41:47 CST 2021&#125;</span><br><span class="line">2093631819</span><br><span class="line">Book&#123;name=&#x27;Java 设计模式&#x27;, publishDate=Wed Dec 29 12:41:47 CST 2021&#125;</span><br><span class="line">2074407503</span><br><span class="line">==================</span><br><span class="line">Book&#123;name=&#x27;Java 设计模式&#x27;, publishDate=Wed Dec 29 12:41:49 CST 2021&#125;</span><br><span class="line">2093631819</span><br><span class="line">Book&#123;name=&#x27;Java 设计模式&#x27;, publishDate=Wed Dec 29 12:41:47 CST 2021&#125;</span><br><span class="line">2074407503</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;原型模式简介&quot;&gt;&lt;a href=&quot;#原型模式简介&quot; class=&quot;headerlink&quot; title=&quot;原型模式简介&quot;&gt;&lt;/a&gt;原型模式简介&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;模式属于创建型模式，它提供了一种创建对象的最佳方式。&lt;/li&gt;
&lt;li&gt;用于创建重复的对象，同时</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java中的建造者模式</title>
    <link href="https://codingdgsun.github.io/2021/12/31/Java%E4%B8%AD%E7%9A%84%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://codingdgsun.github.io/2021/12/31/Java%E4%B8%AD%E7%9A%84%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-12-31T05:52:39.000Z</published>
    <updated>2021-12-31T05:53:03.732Z</updated>
    
    <content type="html"><![CDATA[<h4 id="建造者模式简介"><a href="#建造者模式简介" class="headerlink" title="建造者模式简介"></a>建造者模式简介</h4><ul><li>模式属于创建型模式，它提供了一种创建对象的最佳方式。</li><li>使用多个简单的对象一步一步构建成一个复杂的对象。</li><li>一个Builder类会一步一步构造最终的对象。该Builder类是独立于其他对象的。</li></ul><blockquote><p>指挥者模式</p></blockquote><h5 id="产品类Product"><a href="#产品类Product" class="headerlink" title="产品类Product"></a>产品类Product</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">//产品</span><br><span class="line">public class Product &#123;</span><br><span class="line">    private String one;</span><br><span class="line">    private String two;</span><br><span class="line">    private String three;</span><br><span class="line"></span><br><span class="line">    public String getOne() &#123;</span><br><span class="line">        return one;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setOne(String one) &#123;</span><br><span class="line">        this.one = one;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getTwo() &#123;</span><br><span class="line">        return two;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setTwo(String two) &#123;</span><br><span class="line">        this.two = two;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getThree() &#123;</span><br><span class="line">        return three;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setThree(String three) &#123;</span><br><span class="line">        this.three = three;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Product&#123;&quot; +</span><br><span class="line">                &quot;one=&#x27;&quot; + one + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &quot;, two=&#x27;&quot; + two + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &quot;, three=&#x27;&quot; + three + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &#x27;&#125;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="抽象类Builder"><a href="#抽象类Builder" class="headerlink" title="抽象类Builder"></a>抽象类Builder</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//抽象的建造者</span><br><span class="line">public abstract class Builder &#123;</span><br><span class="line">    abstract void one();//第一步工序</span><br><span class="line"></span><br><span class="line">    abstract void two();//第二步工序</span><br><span class="line"></span><br><span class="line">    abstract void three();//第三步工序</span><br><span class="line"></span><br><span class="line">    abstract Product getProduct();//完工，得到产品</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="子类Worker"><a href="#子类Worker" class="headerlink" title="子类Worker"></a>子类Worker</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">//具体的建造者：工人</span><br><span class="line">public class Worker extends Builder &#123;</span><br><span class="line">    private Product product;</span><br><span class="line"></span><br><span class="line">    public Worker() &#123;</span><br><span class="line">        product = new Product();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    void one() &#123;</span><br><span class="line">        product.setOne(&quot;第一步工序&quot;);</span><br><span class="line">        System.out.println(&quot;第一步工序&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    void two() &#123;</span><br><span class="line">        product.setTwo(&quot;第二步工序&quot;);</span><br><span class="line">        System.out.println(&quot;第二步工序&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    void three() &#123;</span><br><span class="line">        product.setThree(&quot;第三步工序&quot;);</span><br><span class="line">        System.out.println(&quot;第三步工序&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    Product getProduct() &#123;</span><br><span class="line">        return product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="指挥者类"><a href="#指挥者类" class="headerlink" title="指挥者类"></a>指挥者类</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//指挥者</span><br><span class="line">public class Director &#123;</span><br><span class="line">    //指挥工人生成产品</span><br><span class="line">    public Product build(Builder builder)&#123;</span><br><span class="line">        builder.one();</span><br><span class="line">        builder.two();</span><br><span class="line">        builder.three();</span><br><span class="line"></span><br><span class="line">        return builder.getProduct();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //指挥者</span><br><span class="line">        Director director = new Director();</span><br><span class="line">        //指挥工人生产产品</span><br><span class="line">        Product product = director.build(new Worker());</span><br><span class="line">        System.out.println(product);</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 输出结果：</span><br><span class="line">         * 第一步工序</span><br><span class="line">         * 第二步工序</span><br><span class="line">         * 第三步工序</span><br><span class="line">         * Product&#123;one=&#x27;第一步工序&#x27;, two=&#x27;第二步工序&#x27;, three=&#x27;第三步工序&#x27;&#125;</span><br><span class="line">         */</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">第一步工序</span><br><span class="line">第二步工序</span><br><span class="line">第三步工序</span><br><span class="line">Product&#123;one=&#x27;第一步工序&#x27;, two=&#x27;第二步工序&#x27;, three=&#x27;第三步工序&#x27;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>内部类模式</p></blockquote><h5 id="产品类Product-1"><a href="#产品类Product-1" class="headerlink" title="产品类Product"></a>产品类Product</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">//产品</span><br><span class="line">public class Product &#123;</span><br><span class="line">    private String one = &quot;第一步工序&quot;;</span><br><span class="line">    private String two = &quot;第二步工序&quot;;</span><br><span class="line">    private String three = &quot;第三步工序&quot;;</span><br><span class="line"></span><br><span class="line">    public String getOne() &#123;</span><br><span class="line">        return one;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setOne(String one) &#123;</span><br><span class="line">        this.one = one;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getTwo() &#123;</span><br><span class="line">        return two;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setTwo(String two) &#123;</span><br><span class="line">        this.two = two;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getThree() &#123;</span><br><span class="line">        return three;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setThree(String three) &#123;</span><br><span class="line">        this.three = three;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Product&#123;&quot; +</span><br><span class="line">                &quot;one=&#x27;&quot; + one + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &quot;, two=&#x27;&quot; + two + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &quot;, three=&#x27;&quot; + three + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &#x27;&#125;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="抽象类Builder-1"><a href="#抽象类Builder-1" class="headerlink" title="抽象类Builder"></a>抽象类Builder</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//抽象的建造者</span><br><span class="line">public abstract class Builder &#123;</span><br><span class="line">    abstract Builder one(String mes);//第一步工序</span><br><span class="line"></span><br><span class="line">    abstract Builder two(String mes);//第二步工序</span><br><span class="line"></span><br><span class="line">    abstract Builder three(String mes);//第三步工序</span><br><span class="line"></span><br><span class="line">    abstract Product getProduct();//完工，得到产品</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="子类Worker-1"><a href="#子类Worker-1" class="headerlink" title="子类Worker"></a>子类Worker</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">//具体的建造者：工人</span><br><span class="line">public class Worker extends Builder &#123;</span><br><span class="line">    private Product product;</span><br><span class="line"></span><br><span class="line">    public Worker() &#123;</span><br><span class="line">        product = new Product();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    Builder one(String mes) &#123;</span><br><span class="line">        product.setOne(mes);</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    Builder two(String mes) &#123;</span><br><span class="line">        product.setTwo(mes);</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    Builder three(String mes) &#123;</span><br><span class="line">        product.setThree(mes);</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    Product getProduct() &#123;</span><br><span class="line">        return product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试类-1"><a href="#测试类-1" class="headerlink" title="测试类"></a>测试类</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //工人</span><br><span class="line">        Worker worker = new Worker();</span><br><span class="line">        //生产产品</span><br><span class="line">        Product product = worker.getProduct();</span><br><span class="line">        System.out.println(product.toString());</span><br><span class="line">        /**</span><br><span class="line">         * 输出结果：</span><br><span class="line">         * Product&#123;one=&#x27;第一步工序&#x27;, two=&#x27;第二步工序&#x27;, three=&#x27;第三步工序&#x27;&#125;</span><br><span class="line">         */</span><br><span class="line"></span><br><span class="line">        //链式编程</span><br><span class="line">        product = worker.one(&quot;第一步额外工序&quot;).three(&quot;提前第三步工序&quot;).getProduct();</span><br><span class="line">        System.out.println(product);</span><br><span class="line">        /**</span><br><span class="line">         * 输出结果：</span><br><span class="line">         * Product&#123;one=&#x27;第一步额外工序&#x27;, two=&#x27;第二步工序&#x27;, three=&#x27;提前第三步工序&#x27;&#125;</span><br><span class="line">         */</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试结果-1"><a href="#测试结果-1" class="headerlink" title="测试结果"></a>测试结果</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Product&#123;one=&#x27;第一步工序&#x27;, two=&#x27;第二步工序&#x27;, three=&#x27;第三步工序&#x27;&#125;</span><br><span class="line">Product&#123;one=&#x27;第一步额外工序&#x27;, two=&#x27;第二步工序&#x27;, three=&#x27;提前第三步工序&#x27;&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;建造者模式简介&quot;&gt;&lt;a href=&quot;#建造者模式简介&quot; class=&quot;headerlink&quot; title=&quot;建造者模式简介&quot;&gt;&lt;/a&gt;建造者模式简介&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;模式属于创建型模式，它提供了一种创建对象的最佳方式。&lt;/li&gt;
&lt;li&gt;使用多个简单的对</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java中的抽象工厂模式</title>
    <link href="https://codingdgsun.github.io/2021/12/27/Java%E4%B8%AD%E7%9A%84%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>https://codingdgsun.github.io/2021/12/27/Java%E4%B8%AD%E7%9A%84%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-12-27T02:20:32.000Z</published>
    <updated>2021-12-27T02:20:50.926Z</updated>
    
    <content type="html"><![CDATA[<h4 id="抽象工厂模式简介"><a href="#抽象工厂模式简介" class="headerlink" title="抽象工厂模式简介"></a>抽象工厂模式简介</h4><ul><li>模式属于创建型模式，它提供了一种创建对象的最佳方式。</li><li>抽象工厂模式（Abstract Factory Pattern）是围绕一个超级工厂创建其他工厂。该超级工厂又称为其他工厂的工厂。</li><li>在抽象工厂模式中，接口是负责创建一个相关对象的工厂，不需要显式指定它们的类。每个生成的工厂都能按照工厂模式提供对象。</li></ul><h5 id="接口IComputerProduct"><a href="#接口IComputerProduct" class="headerlink" title="接口IComputerProduct"></a>接口IComputerProduct</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//电脑产品接口</span><br><span class="line">public interface IComputerProduct &#123;</span><br><span class="line">    void start();</span><br><span class="line"></span><br><span class="line">    void shutdown();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="子类AComputer和BComputer"><a href="#子类AComputer和BComputer" class="headerlink" title="子类AComputer和BComputer"></a>子类AComputer和BComputer</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//A电脑</span><br><span class="line">public class AComputer implements IComputerProduct &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void start() &#123;</span><br><span class="line">        System.out.println(&quot;开启A电脑&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void shutdown() &#123;</span><br><span class="line">        System.out.println(&quot;关闭A电脑&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//B电脑</span><br><span class="line">public class BComputer implements IComputerProduct &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void start() &#123;</span><br><span class="line">        System.out.println(&quot;开启B电脑&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void shutdown() &#123;</span><br><span class="line">        System.out.println(&quot;关闭B电脑&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="接口ITVProduct"><a href="#接口ITVProduct" class="headerlink" title="接口ITVProduct"></a>接口ITVProduct</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//电视机产品接口</span><br><span class="line">public interface ITVProduct &#123;</span><br><span class="line">    void start();</span><br><span class="line"></span><br><span class="line">    void shutdown();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="子类ATV和BTV"><a href="#子类ATV和BTV" class="headerlink" title="子类ATV和BTV"></a>子类ATV和BTV</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//A电视</span><br><span class="line">public class ATV implements ITVProduct &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void start() &#123;</span><br><span class="line">        System.out.println(&quot;开启A电视&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void shutdown() &#123;</span><br><span class="line">        System.out.println(&quot;关闭A电视&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//B电视</span><br><span class="line">public class BTV implements ITVProduct &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void start() &#123;</span><br><span class="line">        System.out.println(&quot;开启B电视&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void shutdown() &#123;</span><br><span class="line">        System.out.println(&quot;关闭B电视&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="接口IProductFactory"><a href="#接口IProductFactory" class="headerlink" title="接口IProductFactory"></a>接口IProductFactory</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//抽象产品工厂</span><br><span class="line">public interface IProductFactory &#123;</span><br><span class="line">    //生产电脑</span><br><span class="line">    IComputerProduct iComputerProduct();</span><br><span class="line"></span><br><span class="line">    //生产电视</span><br><span class="line">    ITVProduct itvProduct();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="子类AFactory和BFactory"><a href="#子类AFactory和BFactory" class="headerlink" title="子类AFactory和BFactory"></a>子类AFactory和BFactory</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public class AFactory implements IProductFactory &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public IComputerProduct iComputerProduct() &#123;</span><br><span class="line">        return new AComputer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public ITVProduct itvProduct() &#123;</span><br><span class="line">        return new ATV();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class BFactory implements IProductFactory &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public IComputerProduct iComputerProduct() &#123;</span><br><span class="line">        return new BComputer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public ITVProduct itvProduct() &#123;</span><br><span class="line">        return new BTV();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        AFactory aFactory = new AFactory();//A工厂</span><br><span class="line">        IComputerProduct iComputerProduct = aFactory.iComputerProduct();//A工厂电脑产品</span><br><span class="line">        iComputerProduct.start();</span><br><span class="line">        iComputerProduct.shutdown();</span><br><span class="line"></span><br><span class="line">        ITVProduct itvProduct = aFactory.itvProduct();//A工厂电视产品</span><br><span class="line">        itvProduct.start();</span><br><span class="line">        itvProduct.shutdown();</span><br><span class="line"></span><br><span class="line">        BFactory bFactory = new BFactory();//B工厂</span><br><span class="line">        iComputerProduct = bFactory.iComputerProduct();//B工厂电脑产品</span><br><span class="line">        iComputerProduct.start();</span><br><span class="line">        iComputerProduct.shutdown();</span><br><span class="line"></span><br><span class="line">        itvProduct = bFactory.itvProduct();//B工厂电视产品</span><br><span class="line">        itvProduct.start();</span><br><span class="line">        itvProduct.shutdown();</span><br><span class="line">        /**</span><br><span class="line">         * 输出结果：</span><br><span class="line">         * 开启A电脑</span><br><span class="line">         * 关闭A电脑</span><br><span class="line">         * 开启A电视</span><br><span class="line">         * 关闭A电视</span><br><span class="line">         * 开启B电脑</span><br><span class="line">         * 关闭B电脑</span><br><span class="line">         * 开启B电视</span><br><span class="line">         * 关闭B电视</span><br><span class="line">         */</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">开启A电脑</span><br><span class="line">关闭A电脑</span><br><span class="line">开启A电视</span><br><span class="line">关闭A电视</span><br><span class="line">开启B电脑</span><br><span class="line">关闭B电脑</span><br><span class="line">开启B电视</span><br><span class="line">关闭B电视</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;抽象工厂模式简介&quot;&gt;&lt;a href=&quot;#抽象工厂模式简介&quot; class=&quot;headerlink&quot; title=&quot;抽象工厂模式简介&quot;&gt;&lt;/a&gt;抽象工厂模式简介&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;模式属于创建型模式，它提供了一种创建对象的最佳方式。&lt;/li&gt;
&lt;li&gt;抽象工厂</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java中的工厂模式</title>
    <link href="https://codingdgsun.github.io/2021/12/27/Java%E4%B8%AD%E7%9A%84%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>https://codingdgsun.github.io/2021/12/27/Java%E4%B8%AD%E7%9A%84%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-12-27T02:19:58.000Z</published>
    <updated>2021-12-27T02:20:15.765Z</updated>
    
    <content type="html"><![CDATA[<h4 id="工厂模式简介"><a href="#工厂模式简介" class="headerlink" title="工厂模式简介"></a>工厂模式简介</h4><ul><li>模式属于创建型模式，它提供了一种创建对象的最佳方式。</li><li>在工厂模式中，创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。</li></ul><blockquote><p>静态简单工厂模式</p></blockquote><h5 id="接口Animal"><a href="#接口Animal" class="headerlink" title="接口Animal"></a>接口Animal</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface Animal &#123;</span><br><span class="line">    String getName();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="子类Dog和Cat"><a href="#子类Dog和Cat" class="headerlink" title="子类Dog和Cat"></a>子类Dog和Cat</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class Dog implements Animal &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return &quot;Dog&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Cat implements Animal &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return &quot;Cat&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="工厂类"><a href="#工厂类" class="headerlink" title="工厂类"></a>工厂类</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class AnimalFactory &#123;</span><br><span class="line">    //静态简单工厂模式</span><br><span class="line">    public static Animal getAnimal(String animal) &#123;</span><br><span class="line">        if (animal != null) &#123;</span><br><span class="line">            if (animal.equals(&quot;Dog&quot;)) &#123;</span><br><span class="line">                return new Dog();</span><br><span class="line">            &#125; else if (animal.equals(&quot;Cat&quot;)) &#123;</span><br><span class="line">                return new Cat();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Animal animal1 = AnimalFactory.getAnimal(&quot;Dog&quot;);</span><br><span class="line">        Animal animal2 = AnimalFactory.getAnimal(&quot;Cat&quot;);</span><br><span class="line"></span><br><span class="line">        if (animal1 != null) &#123;</span><br><span class="line">            System.out.println(animal1.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (animal2 != null) &#123;</span><br><span class="line">            System.out.println(animal2.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 输出结果：</span><br><span class="line">         * Dog</span><br><span class="line">         * Cat</span><br><span class="line">         */</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Dog</span><br><span class="line">Cat</span><br></pre></td></tr></table></figure><hr><blockquote><p>工厂方法模式</p></blockquote><h5 id="接口Animal-1"><a href="#接口Animal-1" class="headerlink" title="接口Animal"></a>接口Animal</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface Animal &#123;</span><br><span class="line">    String getName();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="子类Dog和Cat-1"><a href="#子类Dog和Cat-1" class="headerlink" title="子类Dog和Cat"></a>子类Dog和Cat</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class Dog implements Animal &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return &quot;Dog&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Cat implements Animal &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return &quot;Cat&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="接口AnimalFactory"><a href="#接口AnimalFactory" class="headerlink" title="接口AnimalFactory"></a>接口AnimalFactory</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface AnimalFactory &#123;</span><br><span class="line">    Animal getAnimal();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="子类CatFactory和DogFactory"><a href="#子类CatFactory和DogFactory" class="headerlink" title="子类CatFactory和DogFactory"></a>子类CatFactory和DogFactory</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class CatFactory implements AnimalFactory&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public Animal getAnimal() &#123;</span><br><span class="line">        return new Cat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class DogFactory implements AnimalFactory&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public Animal getAnimal() &#123;</span><br><span class="line">        return new Dog();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试类-1"><a href="#测试类-1" class="headerlink" title="测试类"></a>测试类</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Animal animal1 = new DogFactory().getAnimal();</span><br><span class="line">        Animal animal2 = new CatFactory().getAnimal();</span><br><span class="line"></span><br><span class="line">        if (animal1 != null) &#123;</span><br><span class="line">            System.out.println(animal1.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (animal2 != null) &#123;</span><br><span class="line">            System.out.println(animal2.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 输出结果：</span><br><span class="line">         * Dog</span><br><span class="line">         * Cat</span><br><span class="line">         */</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试结果-1"><a href="#测试结果-1" class="headerlink" title="测试结果"></a>测试结果</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Dog</span><br><span class="line">Cat</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;工厂模式简介&quot;&gt;&lt;a href=&quot;#工厂模式简介&quot; class=&quot;headerlink&quot; title=&quot;工厂模式简介&quot;&gt;&lt;/a&gt;工厂模式简介&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;模式属于创建型模式，它提供了一种创建对象的最佳方式。&lt;/li&gt;
&lt;li&gt;在工厂模式中，创建对象时</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java中的单例模式</title>
    <link href="https://codingdgsun.github.io/2021/12/27/Java%E4%B8%AD%E7%9A%84%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://codingdgsun.github.io/2021/12/27/Java%E4%B8%AD%E7%9A%84%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-12-27T02:19:17.000Z</published>
    <updated>2021-12-27T02:19:37.601Z</updated>
    
    <content type="html"><![CDATA[<h4 id="单例模式简介"><a href="#单例模式简介" class="headerlink" title="单例模式简介"></a>单例模式简介</h4><ul><li>模式属于创建型模式，它提供了一种创建对象的最佳方式。</li><li>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。</li><li>这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</li><li>主要分为：<strong>饿汉模式</strong>和<strong>懒汉模式</strong></li></ul><blockquote><p>饿汉模式</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//饿汉模式</span><br><span class="line">public class Hungry &#123;</span><br><span class="line">    private static Hungry hungry = new Hungry();</span><br><span class="line"></span><br><span class="line">    private Hungry() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static Hungry getInstance() &#123;</span><br><span class="line">        return hungry;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>懒汉模式（单线程）</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class LazyMan01 &#123;</span><br><span class="line">    private static LazyMan01 lazyMan;</span><br><span class="line"></span><br><span class="line">    private LazyMan01() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static LazyMan01 getInstance() &#123;</span><br><span class="line">        if (lazyMan == null) &#123;</span><br><span class="line">            lazyMan = new LazyMan01();</span><br><span class="line">        &#125;</span><br><span class="line">        return lazyMan;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>懒汉模式（多线程）</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class LazyMan02 &#123;</span><br><span class="line">    private volatile static LazyMan02 lazyMan;</span><br><span class="line"></span><br><span class="line">    private LazyMan02() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //双重检测锁 懒汉单例模式 DCL懒汉模式</span><br><span class="line">    public static LazyMan02 getInstance() &#123;</span><br><span class="line">        if (lazyMan == null) &#123;</span><br><span class="line">            synchronized (LazyMan02.class) &#123;</span><br><span class="line">                if (lazyMan == null) &#123;</span><br><span class="line">                    lazyMan = new LazyMan02();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return lazyMan;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;单例模式简介&quot;&gt;&lt;a href=&quot;#单例模式简介&quot; class=&quot;headerlink&quot; title=&quot;单例模式简介&quot;&gt;&lt;/a&gt;单例模式简介&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;模式属于创建型模式，它提供了一种创建对象的最佳方式。&lt;/li&gt;
&lt;li&gt;这种模式涉及到一个单一的</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>上传docker镜像到阿里云镜像中心实践</title>
    <link href="https://codingdgsun.github.io/2021/12/23/%E4%B8%8A%E4%BC%A0docker%E9%95%9C%E5%83%8F%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91%E9%95%9C%E5%83%8F%E4%B8%AD%E5%BF%83%E5%AE%9E%E8%B7%B5/"/>
    <id>https://codingdgsun.github.io/2021/12/23/%E4%B8%8A%E4%BC%A0docker%E9%95%9C%E5%83%8F%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91%E9%95%9C%E5%83%8F%E4%B8%AD%E5%BF%83%E5%AE%9E%E8%B7%B5/</id>
    <published>2021-12-23T07:26:09.000Z</published>
    <updated>2021-12-23T07:26:46.209Z</updated>
    
    <content type="html"><![CDATA[<h4 id="注册并登录阿里云账户"><a href="#注册并登录阿里云账户" class="headerlink" title="注册并登录阿里云账户"></a>注册并登录阿里云账户</h4><p>需提前在<a href="https://www.aliyun.com/">阿里云官网</a>，注册一个用户<br><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/74-01.15owi8srn5ts.jpg" alt="74-01"></p><h4 id="进入控制后台"><a href="#进入控制后台" class="headerlink" title="进入控制后台"></a>进入控制后台</h4><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/74-02.g4d2fpny4v4.jpg" alt="74-02"></p><h4 id="进入容器镜像服务"><a href="#进入容器镜像服务" class="headerlink" title="进入容器镜像服务"></a>进入容器镜像服务</h4><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/74-03.2s9pfoj67ue0.jpg" alt="74-03"></p><h4 id="创建个人实例"><a href="#创建个人实例" class="headerlink" title="创建个人实例"></a>创建个人实例</h4><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/74-04.76876twdqgg0.jpg" alt="74-04"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/74-05.3nxq0q97aks0.jpg" alt="74-05"></p><h4 id="设置Registry密码"><a href="#设置Registry密码" class="headerlink" title="设置Registry密码"></a>设置Registry密码</h4><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/74-06.2tx9zc5vzci0.jpg" alt="74-06"></p><h4 id="创建命名空间"><a href="#创建命名空间" class="headerlink" title="创建命名空间"></a>创建命名空间</h4><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/74-07.5rmim98en600.jpg" alt="74-07"></p><h4 id="创建镜像仓库"><a href="#创建镜像仓库" class="headerlink" title="创建镜像仓库"></a>创建镜像仓库</h4><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/74-08.7gn1vmgjs3s0.jpg" alt="74-08"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/74-09.5ujod1i1g3o0.jpg" alt="74-09"></p><h4 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull tomcat      //下载tomcat镜像</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/65-01.323ona7ue4s0.jpg" alt="65-01"></p><h4 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name=&quot;MyTomcat&quot; -p 8888:8080 tomcat     </span><br><span class="line">//后台方式，以外部主机端口8888映射容器端口8080，运行Tomcat，容器别名为MyTomcat</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-11.1qdl3qsvqekg.jpg" alt="63-09"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl localhost:8888     //测试访问显示404</span><br></pre></td></tr></table></figure><p><strong>此处要注意，【有坑】！</strong></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-07.6m9lxsdxl0o0.jpg" alt="63-10"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-08.3pbn6nqzv5q0.jpg" alt="63-11"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it 2dd5319e4047 /bin/bash      //进入容器</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-12.1399pww3sdyo.jpg" alt="63-12"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -r webapps.dist/* webapps      //将webapps.dist目录下的所以文件，拷贝到webapps目录</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-13.3fqizw1cu620.jpg" alt="63-13"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl localhost:8888     //测试访问显示正常</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-14.3400o668a420.jpg" alt="63-14"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-15.6jo9k4icxgg0.jpg" alt="63-15"></p><h4 id="提交生成镜像"><a href="#提交生成镜像" class="headerlink" title="提交生成镜像"></a>提交生成镜像</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker commit --help        //查看commit帮助</span><br><span class="line">        -a 作者</span><br><span class="line">        -m 提交的信息内容</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/65-02.5iznzj4pifw0.jpg" alt="65-02"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker commit -a &quot;codingdgsun&quot; -m &quot;Init tomcat webapps&quot; 08635d0f1579 registry.cn-hangzhou.aliyuncs.com/codingdgsun/mytomcat:1.0.0     </span><br><span class="line">//提交镜像，作者：codingdgsun；提交的备注信息：Init tomcat webapps；提交的容器ID：08635d0f1579；</span><br><span class="line">//镜像的别名：registry.cn-hangzhou.aliyuncs.com/codingdgsun/mytomcat；版本号：1.0.0</span><br></pre></td></tr></table></figure><p><strong>注意</strong>镜像的别名必须是(<strong>registry.cn-hangzhou.aliyuncs.com/codingdgsun/mytomcat；版本号：1.0.0</strong>)：其中，codingdgsun是阿里云镜像服务里面新建的命名空间，不然阿里云镜像中心不允许上传镜像</p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/74-11.hqjzk8dsaw8.jpg" alt="74-11"></p><h4 id="登录阿里云Docker-Registry"><a href="#登录阿里云Docker-Registry" class="headerlink" title="登录阿里云Docker Registry"></a>登录阿里云Docker Registry</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker login  registry.cn-hangzhou.aliyuncs.com</span><br><span class="line">//输入阿里云用户名和registry密码进行登录</span><br><span class="line">docker logout registry.cn-hangzhou.aliyuncs.com          //退出登录</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/74-10.2uwq2pbzrn40.jpg" alt="74-10"></p><h4 id="上传镜像到阿里云镜像中心"><a href="#上传镜像到阿里云镜像中心" class="headerlink" title="上传镜像到阿里云镜像中心"></a>上传镜像到阿里云镜像中心</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push registry.cn-hangzhou.aliyuncs.com/codingdgsun/mytomcat:1.0.0</span><br></pre></td></tr></table></figure><h4 id="镜像上传成功"><a href="#镜像上传成功" class="headerlink" title="镜像上传成功"></a>镜像上传成功</h4><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/74-12.6vt8yfejyn00.jpg" alt="74-12"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/74-13.5iak35mgh4g0.jpg" alt="74-13"></p><h4 id="从阿里云镜像中心下载镜像"><a href="#从阿里云镜像中心下载镜像" class="headerlink" title="从阿里云镜像中心下载镜像"></a>从阿里云镜像中心下载镜像</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/codingdgsun/mytomcat:1.0.0</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;注册并登录阿里云账户&quot;&gt;&lt;a href=&quot;#注册并登录阿里云账户&quot; class=&quot;headerlink&quot; title=&quot;注册并登录阿里云账户&quot;&gt;&lt;/a&gt;注册并登录阿里云账户&lt;/h4&gt;&lt;p&gt;需提前在&lt;a href=&quot;https://www.aliyun.com/&quot;&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>上传docker镜像到dockerhub实践</title>
    <link href="https://codingdgsun.github.io/2021/12/23/%E4%B8%8A%E4%BC%A0docker%E9%95%9C%E5%83%8F%E5%88%B0dockerhub%E5%AE%9E%E8%B7%B5/"/>
    <id>https://codingdgsun.github.io/2021/12/23/%E4%B8%8A%E4%BC%A0docker%E9%95%9C%E5%83%8F%E5%88%B0dockerhub%E5%AE%9E%E8%B7%B5/</id>
    <published>2021-12-23T07:24:36.000Z</published>
    <updated>2021-12-23T07:24:54.009Z</updated>
    
    <content type="html"><![CDATA[<h4 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull tomcat      //下载tomcat镜像</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/65-01.323ona7ue4s0.jpg" alt="65-01"></p><h4 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name=&quot;MyTomcat&quot; -p 8888:8080 tomcat     </span><br><span class="line">//后台方式，以外部主机端口8888映射容器端口8080，运行Tomcat，容器别名为MyTomcat</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-11.1qdl3qsvqekg.jpg" alt="63-09"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl localhost:8888     //测试访问显示404</span><br></pre></td></tr></table></figure><p><strong>此处要注意，【有坑】！</strong></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-07.6m9lxsdxl0o0.jpg" alt="63-10"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-08.3pbn6nqzv5q0.jpg" alt="63-11"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it 2dd5319e4047 /bin/bash      //进入容器</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-12.1399pww3sdyo.jpg" alt="63-12"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -r webapps.dist/* webapps      //将webapps.dist目录下的所以文件，拷贝到webapps目录</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-13.3fqizw1cu620.jpg" alt="63-13"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl localhost:8888     //测试访问显示正常</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-14.3400o668a420.jpg" alt="63-14"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-15.6jo9k4icxgg0.jpg" alt="63-15"></p><h4 id="提交生成镜像"><a href="#提交生成镜像" class="headerlink" title="提交生成镜像"></a>提交生成镜像</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker commit --help        //查看commit帮助</span><br><span class="line">        -a 作者</span><br><span class="line">        -m 提交的信息内容</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/65-02.5iznzj4pifw0.jpg" alt="65-02"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker commit -a &quot;codingdgsun&quot; -m &quot;Init tomcat webapps&quot; 08635d0f1579 sunjiedg/mytomcat:1.0.0     </span><br><span class="line">//提交镜像，作者：codingdgsun；提交的备注信息：Init tomcat webapps；提交的容器ID：08635d0f1579；</span><br><span class="line">//镜像的别名：sunjiedg/mytomcat；版本号：1.0.0</span><br></pre></td></tr></table></figure><p><strong>注意</strong>镜像的别名必须是（sunjiedg/mytomcat；版本号：1.0.0）：其中，sunjiedg是dockerhub注册的用户名（需提前在<a href="https://hub.docker.com/">dockerhub官网</a>，注册一个用户)，不然dockerhub不允许上传镜像</p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/73-03.2qwh308p7is0.png" alt="73-03"></p><h4 id="登录dockerhub"><a href="#登录dockerhub" class="headerlink" title="登录dockerhub"></a>登录dockerhub</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker login        //输入dockerhub的用户名和密码</span><br><span class="line">docker logout           //退出登录</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/73-04.6k578xy9m6c0.jpg" alt="73-04"></p><h4 id="查看dockerhub中的镜像仓库"><a href="#查看dockerhub中的镜像仓库" class="headerlink" title="查看dockerhub中的镜像仓库"></a>查看dockerhub中的镜像仓库</h4><p>需提前在<a href="https://hub.docker.com/">dockerhub官网</a>，注册一个用户<br><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/73-02.4nakesf95860.jpg" alt="73-02"></p><h4 id="上传镜像到dockerhub"><a href="#上传镜像到dockerhub" class="headerlink" title="上传镜像到dockerhub"></a>上传镜像到dockerhub</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker push sunjiedg/mytomcat:1.0.0     </span><br><span class="line">//使用命令，上传镜像到dockehub仓库，镜像的名字必须是：dockerhub注册的用户名/镜像的别名:版本号(latest)</span><br></pre></td></tr></table></figure><h4 id="镜像上传成功"><a href="#镜像上传成功" class="headerlink" title="镜像上传成功"></a>镜像上传成功</h4><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/73-05.2eksna0g8l8g.jpg" alt="73-05"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/73-06.14t00tch81uo.jpg" alt="73-06"></p><h4 id="从dockerhub下载镜像"><a href="#从dockerhub下载镜像" class="headerlink" title="从dockerhub下载镜像"></a>从dockerhub下载镜像</h4><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/73-07.gma7c6490sg.jpg" alt="73-07"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull sunjiedg/mytomcat:1.0.0</span><br><span class="line">//镜像名称为：dockerhub注册的用户名/镜像的别名:版本号(latest)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;下载镜像&quot;&gt;&lt;a href=&quot;#下载镜像&quot; class=&quot;headerlink&quot; title=&quot;下载镜像&quot;&gt;&lt;/a&gt;下载镜像&lt;/h4&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java中稀疏数组的使用</title>
    <link href="https://codingdgsun.github.io/2021/12/22/Java%E4%B8%AD%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://codingdgsun.github.io/2021/12/22/Java%E4%B8%AD%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2021-12-22T07:54:13.000Z</published>
    <updated>2021-12-22T07:54:37.769Z</updated>
    
    <content type="html"><![CDATA[<h4 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a>稀疏数组</h4><p>当一个数组中大部分元素是0，或者是一个相同的值时，可以使用稀疏数组来保存该数组。并且稀疏数组，行数为：原来数组非0元素个数+1；列数为：3。即：稀疏数组列数总是3。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">原数组总行数                原数组总列数               原数组非0元素个数</span><br><span class="line">原数组非0元素行索引         原数组非0元素列索引         原数组非0元素值</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br></pre></td></tr></table></figure><p>稀疏数组，第一行（即：0行），第一列存储原数组的总行数，第二列存储原数组的总列数，第三列存储非零元素的数量； 其他行结构相同，每一行存储一条非0元素信息。</p><blockquote><p>代码如下</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">       System.out.println(&quot;原来数组为：&quot;);</span><br><span class="line">       int[][] array1 = new int[5][6];</span><br><span class="line">       array1[1][3] = 4;</span><br><span class="line">       array1[3][4] = 6;</span><br><span class="line">       int sum = 0;//非0的元素个数</span><br><span class="line">       for (int[] arrays : array1) &#123;</span><br><span class="line">           for (int array : arrays) &#123;</span><br><span class="line">               System.out.print(array + &quot;\t&quot;);</span><br><span class="line">               if (array != 0) &#123;</span><br><span class="line">                   sum++;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           System.out.println();</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println(&quot;原来数组中，非0的元素个数为：&quot; + sum);</span><br><span class="line"></span><br><span class="line">       System.out.println(&quot;稀疏数组为：&quot;);</span><br><span class="line">       int[][] array2 = new int[sum + 1][3];//稀疏数组，sum+1行，3列</span><br><span class="line"></span><br><span class="line">       array2[0][0] = array1.length;//稀疏数组第一行第一列：原数组行数</span><br><span class="line">       array2[0][1] = array1[0].length;//稀疏数组第一行第二列：原数组列数</span><br><span class="line">       array2[0][2] = sum;//稀疏数组第一行第三列：原数组中非0的元素个数</span><br><span class="line"></span><br><span class="line">       int count = 0;//非0的元素个数，即稀疏数组所在行索引</span><br><span class="line">       for (int i = 0; i &lt; array1.length; i++) &#123;</span><br><span class="line">           for (int j = 0; j &lt; array1[i].length; j++) &#123;</span><br><span class="line">               if (array1[i][j] != 0) &#123;</span><br><span class="line">                   count++;//稀疏数组所在行索引</span><br><span class="line">                   array2[count][0] = i;//稀疏数组第count行第一列，是原数组非0的元素的所在行索引</span><br><span class="line">                   array2[count][1] = j;//稀疏数组第count行第二列，是原数组非0的元素的所在列索引</span><br><span class="line">                   array2[count][2] = array1[i][j];//稀疏数组第count行第三列，是原数组非0的元素值</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       printArray(array2);//输出稀疏数组</span><br><span class="line"></span><br><span class="line">       System.out.println(&quot;将稀疏数组还原成正常数组为：&quot;);</span><br><span class="line"></span><br><span class="line">       //定义二维数组，稀疏数组第一行第一列：原数组行数，第一行第二列：原数组列数</span><br><span class="line">       int[][] array3 = new int[array2[0][0]][array2[0][1]];//数组初始化后，每个元素都为0</span><br><span class="line">       for (int i = 1; i &lt; array2.length; i++) &#123;</span><br><span class="line">           //从稀疏数组，第二行开始遍历，即 i 为1</span><br><span class="line">           array3[array2[i][0]][array2[i][1]] = array2[i][2];//稀疏数组第i行第一列是原数组非0元素的行索引，第i行第二列是原数组非0元素的列索引，第i行第三列的值是原数组的元素值</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       printArray(array3);//输出还原后的数组</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   private static void printArray(int[][] arrays) &#123;</span><br><span class="line">       for (int[] array : arrays) &#123;</span><br><span class="line">           for (int num : array) &#123;</span><br><span class="line">               System.out.print(num + &quot;\t&quot;);</span><br><span class="line">           &#125;</span><br><span class="line">           System.out.println();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果如下</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">原来数组为：</span><br><span class="line">000000</span><br><span class="line">000400</span><br><span class="line">000000</span><br><span class="line">000060</span><br><span class="line">000000</span><br><span class="line">原来数组中，非0的元素个数为：2</span><br><span class="line">稀疏数组为：</span><br><span class="line">562</span><br><span class="line">134</span><br><span class="line">346</span><br><span class="line">将稀疏数组还原成正常数组为：</span><br><span class="line">000000</span><br><span class="line">000400</span><br><span class="line">000000</span><br><span class="line">000060</span><br><span class="line">000000</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;稀疏数组&quot;&gt;&lt;a href=&quot;#稀疏数组&quot; class=&quot;headerlink&quot; title=&quot;稀疏数组&quot;&gt;&lt;/a&gt;稀疏数组&lt;/h4&gt;&lt;p&gt;当一个数组中大部分元素是0，或者是一个相同的值时，可以使用稀疏数组来保存该数组。并且稀疏数组，行数为：原来数组非0元素个数+</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Markdown语法入门</title>
    <link href="https://codingdgsun.github.io/2021/12/21/Markdown%E8%AF%AD%E6%B3%95%E5%85%A5%E9%97%A8/"/>
    <id>https://codingdgsun.github.io/2021/12/21/Markdown%E8%AF%AD%E6%B3%95%E5%85%A5%E9%97%A8/</id>
    <published>2021-12-21T03:00:46.000Z</published>
    <updated>2021-12-21T03:01:05.016Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Markdown-是一种轻量级标记语言"><a href="#Markdown-是一种轻量级标记语言" class="headerlink" title="Markdown 是一种轻量级标记语言"></a>Markdown 是一种轻量级标记语言</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><hr><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">**加粗**</span><br><span class="line">*斜体*</span><br><span class="line">***加粗且斜体***</span><br><span class="line">~~删除线~~~</span><br></pre></td></tr></table></figure><p><strong>加粗</strong><br><em>斜体</em><br><em><strong>加粗且斜体</strong></em><br>~~删除线~~~</p><hr><h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">***</span><br></pre></td></tr></table></figure><hr><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![图片名称](图片本地地址，或网络的地址都可以)</span><br></pre></td></tr></table></figure><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fpic1.zhimg.com%2Fv2-45e8fd517c0481f4961ab1e1e1abc5a6_1440w.jpg%3Fsource%3D172ae18b&refer=http%3A%2F%2Fpic1.zhimg.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1642426623&t=bf6345b71ce36b1ba82541d1d3b2b68f" alt="Markdown"></p><hr><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[超链接名称](超链接地址)</span><br></pre></td></tr></table></figure><p><a href="http://localhost/">网站</a></p><hr><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. a</span><br><span class="line">2. b</span><br><span class="line">3. c</span><br><span class="line"></span><br><span class="line">- A</span><br><span class="line">- B</span><br><span class="line">- C</span><br></pre></td></tr></table></figure><ol><li>a</li><li>b</li><li>c</li></ol><ul><li>A</li><li>B</li><li>C</li></ul><hr><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">|序号|姓名|年龄|</span><br><span class="line">|:--|:--:|:--|</span><br><span class="line">|1|张三|14|</span><br><span class="line">|2|李四|3|</span><br><span class="line"></span><br><span class="line">-:  右对齐</span><br><span class="line">:-  左对齐</span><br><span class="line">:-: 居中对齐</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">序号</th><th align="center">姓名</th><th align="right">年龄</th></tr></thead><tbody><tr><td align="left">1</td><td align="center">张三阿</td><td align="right">14</td></tr><tr><td align="left">2</td><td align="center">李四</td><td align="right">3</td></tr></tbody></table><hr><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用```来表示</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是代码块</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Markdown-是一种轻量级标记语言&quot;&gt;&lt;a href=&quot;#Markdown-是一种轻量级标记语言&quot; class=&quot;headerlink&quot; title=&quot;Markdown 是一种轻量级标记语言&quot;&gt;&lt;/a&gt;Markdown 是一种轻量级标记语言&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Dockerfile创建Ubuntu镜像实践</title>
    <link href="https://codingdgsun.github.io/2021/12/17/Dockerfile%E5%88%9B%E5%BB%BAUbuntu%E9%95%9C%E5%83%8F%E5%AE%9E%E8%B7%B5/"/>
    <id>https://codingdgsun.github.io/2021/12/17/Dockerfile%E5%88%9B%E5%BB%BAUbuntu%E9%95%9C%E5%83%8F%E5%AE%9E%E8%B7%B5/</id>
    <published>2021-12-17T09:05:03.000Z</published>
    <updated>2021-12-17T09:05:23.333Z</updated>
    
    <content type="html"><![CDATA[<h4 id="手动安装Linux命令"><a href="#手动安装Linux命令" class="headerlink" title="手动安装Linux命令"></a>手动安装Linux命令</h4><blockquote><p>下载Ubuntu镜像</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull ubuntu</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/70-01.4yov6xx7o6w0.jpg" alt="70-01"></p><blockquote><p>启动一个ubuntu容器</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name myubuntu01 ba6acccedd29 /bin/bash</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/70-02.43tp7fm8hd00.jpg" alt="70-02"></p><blockquote><p>查看Ubuntu版本</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/issue</span><br><span class="line">//Ubuntu 20.04.3 LTS \n \l</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/70-03.1q0hnpcvbta8.jpg" alt="70-03"></p><blockquote><p>查看ubuntu中基本命令，都无法使用</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim     //文本编辑</span><br><span class="line">ifconfig        //显示或配置网络设备</span><br><span class="line">ping        //因特网包探索器，用于测试网络连接量的程序</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/70-04.5hvhqx3ey2g0.jpg" alt="70-04"></p><blockquote><p>手动安装命令</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apt-get update      //更新源列表</span><br><span class="line">apt-get install -y  vim     //安装文本编辑命令 </span><br><span class="line">apt-get install -y  net-tools       //安装显示或配置网络设备命令</span><br><span class="line">apt-get install -y  iputils-ping        //安装ping命令</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/70-05.3302urfwk3e0.jpg" alt="70-05"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/70-06.6m88b9e9br80.jpg" alt="70-06"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/70-07.14p5s1l8sf9c.jpg" alt="70-07"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/70-08.7048bjcko600.jpg" alt="70-08"></p><blockquote><p>命令安装成功，测试没问题</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/70-09.2bhq7xbjgvi8.jpg" alt="70-09"></p><h4 id="使用Dockerfile创建Ubuntu镜像"><a href="#使用Dockerfile创建Ubuntu镜像" class="headerlink" title="使用Dockerfile创建Ubuntu镜像"></a>使用Dockerfile创建Ubuntu镜像</h4><blockquote><p>编写dockerfile</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu</span><br><span class="line">MAINTAINER sunjiedgsun</span><br><span class="line"></span><br><span class="line">ENV MYPATH /usr/local</span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line"></span><br><span class="line">RUN apt-get update</span><br><span class="line">RUN apt-get install -y  vim </span><br><span class="line">RUN apt-get install -y  net-tools</span><br><span class="line">RUN apt-get install -y  iputils-ping</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line">CMD /bin/bash</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/70-10.6nb80ka5j0k0.jpg" alt="70-10"></p><blockquote><p>生成镜像</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -f dockerfile01 -t myubuntu:1.0.0 .</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/70-11.7j2s7jpznsg0.jpg" alt="70-11"></p><blockquote><p>查看镜像的创建历史过程</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker history bb9803c8b55a</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/70-12.6orb5wqdwck0.jpg" alt="70-12"></p><blockquote><p>使用刚刚生成的镜像，启动一个容器，并测试相关命令，都可以使用</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name myubuntu02 bb9803c8b55a /bin/bash</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/70-13.4kzrbbj4chi0.jpg" alt="70-13"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;手动安装Linux命令&quot;&gt;&lt;a href=&quot;#手动安装Linux命令&quot; class=&quot;headerlink&quot; title=&quot;手动安装Linux命令&quot;&gt;&lt;/a&gt;手动安装Linux命令&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;下载Ubuntu镜像&lt;/p&gt;
&lt;/bloc</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Dockerfile创建CentOS镜像实践</title>
    <link href="https://codingdgsun.github.io/2021/12/17/Dockerfile%E5%88%9B%E5%BB%BACentOS%E9%95%9C%E5%83%8F%E5%AE%9E%E8%B7%B5/"/>
    <id>https://codingdgsun.github.io/2021/12/17/Dockerfile%E5%88%9B%E5%BB%BACentOS%E9%95%9C%E5%83%8F%E5%AE%9E%E8%B7%B5/</id>
    <published>2021-12-17T06:50:42.000Z</published>
    <updated>2021-12-17T06:51:49.080Z</updated>
    
    <content type="html"><![CDATA[<h4 id="手动安装Linux命令"><a href="#手动安装Linux命令" class="headerlink" title="手动安装Linux命令"></a>手动安装Linux命令</h4><blockquote><p>下载CentOS镜像</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull centos</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/69-01.124zxox9s19s.jpg" alt="69-01"></p><blockquote><p>启动一个centos容器</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name mycentos01 5d0da3dc9764 /bin/bash</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/69-02.3aaz7q304tk0.jpg" alt="69-02"></p><blockquote><p>查看CentOS版本</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/redhat-release</span><br><span class="line">//CentOS Linux release 8.4.2105</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/69-03.4fz2s5vnsom0.jpg" alt="69-03"></p><blockquote><p>查看centos中基本命令，都无法使用</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">clear       //清屏</span><br><span class="line">vim     //文本编辑</span><br><span class="line">ifconfig        //显示或配置网络设备</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/69-04.3kwq167clcm0.jpg" alt="69-04"></p><blockquote><p>手动安装命令</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum -y install vim      //安装文本编辑命令</span><br><span class="line">yum install -y  net-tools       //安装显示或配置网络设备命令</span><br><span class="line">yum install -y  ncurses     //安装清屏命令</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/69-05.77cgz1pbvrg0.jpg" alt="69-05"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/69-06.4pk3fbnmfkm0.jpg" alt="69-06"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/69-07.4acqey7hqsc0.jpg" alt="69-07"></p><blockquote><p>命令安装成功，测试没问题</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/69-08.3qfmc23gpu00.jpg" alt="69-08"></p><h4 id="使用Dockerfile创建CentOS镜像"><a href="#使用Dockerfile创建CentOS镜像" class="headerlink" title="使用Dockerfile创建CentOS镜像"></a>使用Dockerfile创建CentOS镜像</h4><blockquote><p>编写dockerfile</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">MAINTAINER sunjiedgsun</span><br><span class="line"></span><br><span class="line">ENV MYPATH /usr/local</span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line"></span><br><span class="line">RUN yum -y install vim</span><br><span class="line">RUN yum install -y  net-tools</span><br><span class="line">RUN yum install -y  ncurses</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line">CMD /bin/bash</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/69-09.3gcdx61wjme0.jpg" alt="69-09"></p><blockquote><p>生成镜像</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -f dockerfile01 -t mycentos:1.0.0 .</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/69-10.2dd2spwy4h8g.jpg" alt="69-10"></p><blockquote><p>查看镜像的创建历史过程</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker history 1bf47dff9310</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/69-11.4u89s3c2lgc0.jpg" alt="69-11"></p><blockquote><p>使用刚刚生成的镜像，启动一个容器，并测试相关命令，都可以使用</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/69-12.4qod7jpumag0.jpg" alt="69-12"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;手动安装Linux命令&quot;&gt;&lt;a href=&quot;#手动安装Linux命令&quot; class=&quot;headerlink&quot; title=&quot;手动安装Linux命令&quot;&gt;&lt;/a&gt;手动安装Linux命令&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;下载CentOS镜像&lt;/p&gt;
&lt;/bloc</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Dockerfile使用入门</title>
    <link href="https://codingdgsun.github.io/2021/12/16/Dockerfile%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/"/>
    <id>https://codingdgsun.github.io/2021/12/16/Dockerfile%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/</id>
    <published>2021-12-16T03:04:41.000Z</published>
    <updated>2021-12-16T03:05:06.355Z</updated>
    
    <content type="html"><![CDATA[<h4 id="使用Dockerfile生成镜像，并挂载数据卷"><a href="#使用Dockerfile生成镜像，并挂载数据卷" class="headerlink" title="使用Dockerfile生成镜像，并挂载数据卷"></a>使用Dockerfile生成镜像，并挂载数据卷</h4><blockquote><p>编写Dockerfile <strong>注意：命令单词全部大写</strong></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu</span><br><span class="line">VOLUME [&quot;volume1&quot;,&quot;volume2&quot;]</span><br><span class="line">CMD echo &quot;------Done------&quot;</span><br><span class="line">CMD /bin/bash</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/68-01.3dvklj7txhc0.jpg" alt="68-01"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/68-02.1ubrnna0l29s.jpg" alt="68-02"></p><blockquote><p>查看docker build帮助</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker build --help     //查看docker build帮助</span><br><span class="line">        -f //dockerfile文件路径</span><br><span class="line">        -t //镜像别名:版本号</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/68-03.6jkmekwse7c0.jpg" alt="68-03"></p><blockquote><p>生成镜像并挂载数据卷</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -f /Users/sunjie/Desktop/test-dockerfile/dockerfile01 -t my_ubuntu:1.0.0 .     //执行dockerfile生成镜像</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/68-04.n21idggknn.jpg" alt="68-04"></p><blockquote><p>启动一个容器</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it bbef8a39891f /bin/bash</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/68-05.6ts5ux1loy0.jpg" alt="68-05"></p><blockquote><p>在容器一个挂载卷中，新建文件</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/68-06.5eaen268b640.jpg" alt="68-06"></p><blockquote><p>查看容器元数据，挂载卷的外面主机的目录</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect 1c259b42fc70</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/68-07.6xkk78bsm4w0.jpg" alt="68-07"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/68-08.yujnn6h6wdc.jpg" alt="68-08"></p><blockquote><p>查看外面物理主机相应目录内容，<strong>注意，在Mac上，此处有坑</strong></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /var/lib/docker/volumes/568d0c3e0d3267bbace8e99c0a75b1d0e2037a919b2e629861727d5889624582/_data</span><br><span class="line">//提示找不到目录或文件 no such file or directory: /var/lib/docker/volumes/568d0c3e0d3267bbace8e99c0a75b1d0e2037a919b2e629861727d5889624582/_data</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/68-09.6ywhjmcdo48.jpg" alt="68-09"></p><blockquote><p>解决方案</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --privileged --pid=host debian nsenter -t 1 -m -u -n -i sh               //执行此命令</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/68-10.4xs9w8ulqdk0.jpg" alt="68-10"></p><blockquote><p>跳转目录，找到物理主机相应目录内容</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/68-11.3ddngmrel9k0.jpg" alt="68-11"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;使用Dockerfile生成镜像，并挂载数据卷&quot;&gt;&lt;a href=&quot;#使用Dockerfile生成镜像，并挂载数据卷&quot; class=&quot;headerlink&quot; title=&quot;使用Dockerfile生成镜像，并挂载数据卷&quot;&gt;&lt;/a&gt;使用Dockerfile生成镜像，</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>关于MySQL的容器数据卷挂载实践</title>
    <link href="https://codingdgsun.github.io/2021/12/15/%E5%85%B3%E4%BA%8EMySQL%E7%9A%84%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E5%8D%B7%E6%8C%82%E8%BD%BD%E5%AE%9E%E8%B7%B5/"/>
    <id>https://codingdgsun.github.io/2021/12/15/%E5%85%B3%E4%BA%8EMySQL%E7%9A%84%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E5%8D%B7%E6%8C%82%E8%BD%BD%E5%AE%9E%E8%B7%B5/</id>
    <published>2021-12-15T14:38:29.000Z</published>
    <updated>2021-12-15T14:42:01.338Z</updated>
    
    <content type="html"><![CDATA[<h4 id="关于MySQL的容器数据卷挂载实践"><a href="#关于MySQL的容器数据卷挂载实践" class="headerlink" title="关于MySQL的容器数据卷挂载实践"></a>关于MySQL的容器数据卷挂载实践</h4><blockquote><p>下载mysql 5.7 镜像</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:5.7       //下载mysql 5.7 镜像</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/67-01.56e1j9bgf9c0.jpg" alt="67-01"></p><blockquote><p>启动mysql容器，并挂载相应目录</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3307:3306 -v /Users/sunjie/Desktop/conf:/etc/mysql/conf.d -v /Users/sunjie/Desktop/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=112233 --name=&quot;mysql01&quot; mysql:5.7        </span><br><span class="line">//后台方式运行mysql:5.7，数据库密码为：112233，容器别名：mysql01</span><br><span class="line">//外部主机端口3307映射到容器中的3306端口</span><br><span class="line">//将外部主机/Users/sunjie/Desktop/conf目录与容器中/etc/mysql/conf.d目录进行映射</span><br><span class="line">//将外部主机/Users/sunjie/Desktop/data目录与容器中/var/lib/mysql目录进行映射</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/67-02.2ybibjxtvri0.jpg" alt="67-02"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/67-03.5j2bozfhkeo0.jpg" alt="67-03"></p><blockquote><p>使用MySQLWorkBench连接容器中的MySQL</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/67-04.zpgoz962fhc.jpg" alt="67-04"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/67-05.t7wnloqcc74.jpg" alt="67-05"></p><blockquote><p>在容器数据库中新建一个数据库</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/67-06.29c4zr7v9f6s.jpg" alt="67-06"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/67-07.30dge6b7x6w0.jpg" alt="67-07"></p><blockquote><p>外部主机数据文件夹和容器内数据文件夹对比</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/67-08.4svc28syc4q0.jpg" alt="67-08"></p><blockquote><p>删除容器后，外部主机数据文件夹还在，没有丢失</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/67-09.teelti240ls.jpg" alt="67-09"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;关于MySQL的容器数据卷挂载实践&quot;&gt;&lt;a href=&quot;#关于MySQL的容器数据卷挂载实践&quot; class=&quot;headerlink&quot; title=&quot;关于MySQL的容器数据卷挂载实践&quot;&gt;&lt;/a&gt;关于MySQL的容器数据卷挂载实践&lt;/h4&gt;&lt;blockquote&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Docker容器数据卷挂载使用</title>
    <link href="https://codingdgsun.github.io/2021/12/15/Docker%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E5%8D%B7%E6%8C%82%E8%BD%BD%E4%BD%BF%E7%94%A8/"/>
    <id>https://codingdgsun.github.io/2021/12/15/Docker%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E5%8D%B7%E6%8C%82%E8%BD%BD%E4%BD%BF%E7%94%A8/</id>
    <published>2021-12-15T05:48:05.000Z</published>
    <updated>2021-12-15T05:48:23.958Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Docker容器数据卷挂载使用"><a href="#Docker容器数据卷挂载使用" class="headerlink" title="Docker容器数据卷挂载使用"></a>Docker容器数据卷挂载使用</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --help       //查看运行容器帮助</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/66-01.1y8h1empy8zk.jpg" alt="66-01"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/66-02.1x0uqgq56uao.jpg" alt="66-02"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -v /Users/sunjie/Desktop:/home tomcat        //以交互方式运行tomcat容器，并将外部主机的/Users/sunjie/Desktop与tomcat容器的/home目录进行映射</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/66-03.1fecntektuhs.jpg" alt="66-03"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it 7ff84fa6ad4c /bin/bash      //进入容器查看目录内容</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/66-04.6m1c6lqzi3o0.jpg" alt="66-04"></p><p>查看外部主机目录内容<br><br><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/66-05.9j9f4415o6w.jpg" alt="66-05"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect 7ff84fa6ad4c     //查看容器元数据信息，确认数据卷挂载是否成功</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/66-06.5r5oh1rfc3c0.jpg" alt="66-06"></p><p>在容器内目录创建文件，在外部主机目录可以查看到<br><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/66-07.68frwx2oa8g0.jpg" alt="66-07"></p><p>在外部主机目录创建文件，在容器内目录可以查看到<br><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/66-08.10jzjvl3dlow.jpg" alt="66-08"></p><p><strong>注意</strong>删除容器后，外部主机挂载目录里面的文件还在，没有丢失<br><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/66-09.54b0gxmwwt00.jpg" alt="66-09"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Docker容器数据卷挂载使用&quot;&gt;&lt;a href=&quot;#Docker容器数据卷挂载使用&quot; class=&quot;headerlink&quot; title=&quot;Docker容器数据卷挂载使用&quot;&gt;&lt;/a&gt;Docker容器数据卷挂载使用&lt;/h4&gt;&lt;figure class=&quot;highli</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>提交Docker镜像</title>
    <link href="https://codingdgsun.github.io/2021/12/15/%E6%8F%90%E4%BA%A4Docker%E9%95%9C%E5%83%8F/"/>
    <id>https://codingdgsun.github.io/2021/12/15/%E6%8F%90%E4%BA%A4Docker%E9%95%9C%E5%83%8F/</id>
    <published>2021-12-15T02:53:31.000Z</published>
    <updated>2021-12-15T02:57:42.417Z</updated>
    
    <content type="html"><![CDATA[<h4 id="提交Docker镜像"><a href="#提交Docker镜像" class="headerlink" title="提交Docker镜像"></a>提交Docker镜像</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull tomcat      //下载tomcat镜像</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/65-01.323ona7ue4s0.jpg" alt="65-01"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name=&quot;MyTomcat&quot; -p 8888:8080 tomcat     //后台方式，以外部主机端口8888映射容器端口8080，运行Tomcat，容器别名为MyTomcat</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-11.1qdl3qsvqekg.jpg" alt="63-09"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl localhost:8888     //测试访问显示404</span><br></pre></td></tr></table></figure><p><strong>此处要注意，【有坑】！</strong></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-07.6m9lxsdxl0o0.jpg" alt="63-10"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-08.3pbn6nqzv5q0.jpg" alt="63-11"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it 2dd5319e4047 /bin/bash      //进入容器</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-12.1399pww3sdyo.jpg" alt="63-12"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -r webapps.dist/* webapps      //将webapps.dist目录下的所以文件，拷贝到webapps目录</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-13.3fqizw1cu620.jpg" alt="63-13"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl localhost:8888     //测试访问显示正常</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-14.3400o668a420.jpg" alt="63-14"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-15.6jo9k4icxgg0.jpg" alt="63-15"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker commit --help        //查看commit帮助</span><br><span class="line">        -a 作者</span><br><span class="line">        -m 提交的信息内容</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/65-02.5iznzj4pifw0.jpg" alt="65-02"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit -a &quot;codingdgsun&quot; -m &quot;Init tomcat webapps&quot; 27db1b0306bd mytomcat:1.0.0     //提交镜像，作者：codingdgsun；提交的备注信息：Init tomcat webapps；提交的镜像ID：27db1b0306bd；镜像的别名：mytomcat；版本号：1.0.0</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/65-03.2vpvb28nu7c0.jpg" alt="65-03">-</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;提交Docker镜像&quot;&gt;&lt;a href=&quot;#提交Docker镜像&quot; class=&quot;headerlink&quot; title=&quot;提交Docker镜像&quot;&gt;&lt;/a&gt;提交Docker镜像&lt;/h4&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;tabl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>可视化图形工具Portainer</title>
    <link href="https://codingdgsun.github.io/2021/12/14/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%9B%BE%E5%BD%A2%E5%B7%A5%E5%85%B7Portainer/"/>
    <id>https://codingdgsun.github.io/2021/12/14/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%9B%BE%E5%BD%A2%E5%B7%A5%E5%85%B7Portainer/</id>
    <published>2021-12-14T13:46:22.000Z</published>
    <updated>2021-12-14T14:02:13.609Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Portainer是一个可视化的容器镜像的图形管理工具，利用Portainer可以轻松构建，管理和维护Docker环境。-而且完全免费，基于容器化的安装方式，方便高效部署。"><a href="#Portainer是一个可视化的容器镜像的图形管理工具，利用Portainer可以轻松构建，管理和维护Docker环境。-而且完全免费，基于容器化的安装方式，方便高效部署。" class="headerlink" title="Portainer是一个可视化的容器镜像的图形管理工具，利用Portainer可以轻松构建，管理和维护Docker环境。 而且完全免费，基于容器化的安装方式，方便高效部署。"></a>Portainer是一个可视化的容器镜像的图形管理工具，利用Portainer可以轻松构建，管理和维护Docker环境。 而且完全免费，基于容器化的安装方式，方便高效部署。</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8888:9000 --restart=always -v /var/run/docker.sock:/var/run/docker.sock --privileged=true portainer/portainer        //下载并运行portainer</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/64-01.30x8vniw5v80.jpg" alt="64-01"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localhost:8888       //测试查看网站</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/64-02.u4lhwlblly8.jpg" alt="64-02"></p><p>创建用户，进行登录<br><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/64-03.4hu89qjd0740.jpg" alt="64-03"></p><p>选择查看管理本地容器<br><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/64-04.rua4hm0lfyo.jpg" alt="64-04"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/64-05.4ku8t6ys1ts0.jpg" alt="64-05"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Portainer是一个可视化的容器镜像的图形管理工具，利用Portainer可以轻松构建，管理和维护Docker环境。-而且完全免费，基于容器化的安装方式，方便高效部署。&quot;&gt;&lt;a href=&quot;#Portainer是一个可视化的容器镜像的图形管理工具，利用Port</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Docker上部署服务应用</title>
    <link href="https://codingdgsun.github.io/2021/12/14/Docker%E4%B8%8A%E9%83%A8%E7%BD%B2%E6%9C%8D%E5%8A%A1%E5%BA%94%E7%94%A8/"/>
    <id>https://codingdgsun.github.io/2021/12/14/Docker%E4%B8%8A%E9%83%A8%E7%BD%B2%E6%9C%8D%E5%8A%A1%E5%BA%94%E7%94%A8/</id>
    <published>2021-12-14T08:28:52.000Z</published>
    <updated>2021-12-14T14:02:13.608Z</updated>
    
    <content type="html"><![CDATA[<h2 id="部署Nginx"><a href="#部署Nginx" class="headerlink" title="部署Nginx"></a>部署Nginx</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx       //下载Nginx镜像</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-01.6lb8u4ioxio0.jpg" alt="63-01"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name=&quot;MyNginx01&quot; -p 3090:80 nginx       //后台方式，以外部主机端口3090映射容器端口80，运行Nginx，容器别名为MyNginx01</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-02.45f082l2slc0.jpg" alt="63-02"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl localhost:3090     //在外部主机测试容器Nginx服务</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-03.3ujm0wohg6o0.jpg" alt="63-03"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-04.4trfmw30td40.jpg" alt="63-04"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it 53c01c475a1e /bin/bash      //进入容器</span><br><span class="line">whereis nginx       //查看Nginx所在位置</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-05.1sjgyqmw68m8.jpg" alt="63-05"></p><h2 id="部署Tomcat"><a href="#部署Tomcat" class="headerlink" title="部署Tomcat"></a>部署Tomcat</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --rm -p 8888:8080 tomcat:9.0     //交互方式，以外部主机端口8888映射容器端口8080，运行Tomcat。用完后，退出容器后，立即删除镜像，一般用于测试使用。</span><br><span class="line"></span><br><span class="line">ctrl + c        //退出，查看镜像，确实消失了</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-06.31g5gnccgno0.jpg" alt="63-06"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-09.3w2ulr3ovra0.jpg" alt="63-07"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull tomcat      //下载Tomcat镜像</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-10.1ucnk4ni1ssg.jpg" alt="63-08"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name=&quot;MyTomcat&quot; -p 8888:8080 tomcat     //后台方式，以外部主机端口8888映射容器端口8080，运行Tomcat，容器别名为MyTomcat</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-11.1qdl3qsvqekg.jpg" alt="63-09"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl localhost:8888     //测试访问显示404</span><br></pre></td></tr></table></figure><p><strong>此处要注意，【有坑】！</strong></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-07.6m9lxsdxl0o0.jpg" alt="63-10"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-08.3pbn6nqzv5q0.jpg" alt="63-11"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it 2dd5319e4047 /bin/bash      //进入容器</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-12.1399pww3sdyo.jpg" alt="63-12"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -r webapps.dist/* webapps      //将webapps.dist目录下的所以文件，拷贝到webapps目录</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-13.3fqizw1cu620.jpg" alt="63-13"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl localhost:8888     //测试访问显示正常</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-14.3400o668a420.jpg" alt="63-14"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-15.6jo9k4icxgg0.jpg" alt="63-15"></p><h2 id="部署Elasticsearch"><a href="#部署Elasticsearch" class="headerlink" title="部署Elasticsearch"></a>部署Elasticsearch</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name=&quot;MyElasticsearch&quot; -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; elasticsearch:7.6.2        //下载并运行elasticsearch</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-16.1j0te7c7txhc.jpg" alt="63-16"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker stats        //监控查看docker内存情况</span><br><span class="line"></span><br><span class="line">docker stats 容器Id       //监控查看指定docker内存情况</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-17.4l71mepu05m0.jpg" alt="63-17"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localhost:9200      //测试Elasticsearch</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-18.3kao0obf7060.jpg" alt="63-18"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop 17079ad436b2        //停止容器</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-19.6launorxf040.jpg" alt="63-19"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name=&quot;MyElasticsearch02&quot; -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; -e ES_JAVA_OPTS=&quot;-Xms64m -Xmx512m&quot; elasticsearch:7.6.2        //设置Elasticsearch内存限制，-e ES_JAVA_OPTS=&quot;-Xms64m -Xmx512m&quot;，最大内存512MB,最小64MB；容器别名：MyElasticsearch02</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-20.1g67t9f8xbsw.jpg" alt="63-20"></p><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-21.59hlonf64v40.jpg" alt="63-21"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl localhost:9200     //测试正常</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CodingDGSun/images-db@master/Blog/63-22.5husxnf3wlc0.jpg" alt="63-22"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;部署Nginx&quot;&gt;&lt;a href=&quot;#部署Nginx&quot; class=&quot;headerlink&quot; title=&quot;部署Nginx&quot;&gt;&lt;/a&gt;部署Nginx&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl</summary>
      
    
    
    
    
  </entry>
  
</feed>
